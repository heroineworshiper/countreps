

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Nov 25 00:48:14 2021

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F14K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    57  0000                     
    58                           ; Version 1.45
    59                           ; Generated 16/11/2017 GMT
    60                           ; 
    61                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    62                           ; All rights reserved.
    63                           ; 
    64                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    65                           ; 
    66                           ; Redistribution and use in source and binary forms, with or without modification, are
    67                           ; permitted provided that the following conditions are met:
    68                           ; 
    69                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    70                           ;        conditions and the following disclaimer.
    71                           ; 
    72                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    73                           ;        of conditions and the following disclaimer in the documentation and/or other
    74                           ;        materials provided with the distribution.
    75                           ; 
    76                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    77                           ;        software without specific prior written permission.
    78                           ; 
    79                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    80                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    81                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    82                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    83                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    84                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    85                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    86                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    87                           ; 
    88                           ; 
    89                           ; Code-generator required, PIC18F14K50 Definitions
    90                           ; 
    91                           ; SFR Addresses
    92  0000                     
    93                           	psect	idataCOMRAM
    94  001122                     __pidataCOMRAM:
    95                           	opt stack 0
    96                           
    97                           ;initializer for _cdc_in_packet
    98  001122  28                 	db	40
    99  001123  02                 	db	2
   100                           
   101                           ;initializer for _setup_in_packet
   102  001124  20                 	db	32
   103  001125  02                 	db	2
   104                           
   105                           ;initializer for _setup_out_packet
   106  001126  18                 	db	24
   107  001127  02                 	db	2
   108                           
   109                           ;initializer for _EP1_IN
   110  001128  0C                 	db	12
   111  001129  02                 	db	2
   112                           
   113                           ;initializer for _EP0_IN
   114  00112A  04                 	db	4
   115  00112B  02                 	db	2
   116                           
   117                           	psect	idataBANK0
   118  001116                     __pidataBANK0:
   119                           	opt stack 0
   120                           
   121                           ;initializer for _data_out_packet
   122  001116  78                 	db	120
   123  001117  02                 	db	2
   124                           
   125                           ;initializer for _data_in_packet
   126  001118  38                 	db	56
   127  001119  02                 	db	2
   128                           
   129                           ;initializer for _EP2_IN
   130  00111A  14                 	db	20
   131  00111B  02                 	db	2
   132                           
   133                           ;initializer for _EP2_OUT
   134  00111C  10                 	db	16
   135  00111D  02                 	db	2
   136                           
   137                           ;initializer for _EP0_OUT
   138  00111E  00                 	db	0
   139  00111F  02                 	db	2
   140                           
   141                           ;initializer for _input_state
   142  001120  BA                 	db	low _sync_code0
   143  001121  10                 	db	high _sync_code0
   144                           
   145                           	psect	mediumconst
   146  003EF8                     __pmediumconst:
   147                           	opt stack 0
   148  003EF8  00                 	db	0
   149  003EF9                     _hex_table:
   150                           	opt stack 0
   151  003EF9  30                 	db	48
   152  003EFA  31                 	db	49
   153  003EFB  32                 	db	50
   154  003EFC  33                 	db	51
   155  003EFD  34                 	db	52
   156  003EFE  35                 	db	53
   157  003EFF  36                 	db	54
   158  003F00  37                 	db	55
   159  003F01  38                 	db	56
   160  003F02  39                 	db	57
   161  003F03  61                 	db	97
   162  003F04  62                 	db	98
   163  003F05  63                 	db	99
   164  003F06  64                 	db	100
   165  003F07  65                 	db	101
   166  003F08  66                 	db	102
   167  003F09                     __end_of_hex_table:
   168                           	opt stack 0
   169  003F09                     _usb_config1:
   170                           	opt stack 0
   171  003F09  09                 	db	9
   172  003F0A  02                 	db	2
   173  003F0B  46                 	db	70
   174  003F0C  00                 	db	0
   175  003F0D  02                 	db	2
   176  003F0E  01                 	db	1
   177  003F0F  00                 	db	0
   178  003F10  80                 	db	128
   179  003F11  32                 	db	50
   180  003F12  08                 	db	8
   181  003F13  0B                 	db	11
   182  003F14  00                 	db	0
   183  003F15  02                 	db	2
   184  003F16  02                 	db	2
   185  003F17  02                 	db	2
   186  003F18  01                 	db	1
   187  003F19  00                 	db	0
   188  003F1A  09                 	db	9
   189  003F1B  04                 	db	4
   190  003F1C  00                 	db	0
   191  003F1D  00                 	db	0
   192  003F1E  01                 	db	1
   193  003F1F  02                 	db	2
   194  003F20  02                 	db	2
   195  003F21  01                 	db	1
   196  003F22  00                 	db	0
   197  003F23  05                 	db	5
   198  003F24  24                 	db	36
   199  003F25  00                 	db	0
   200  003F26  10                 	db	16
   201  003F27  01                 	db	1
   202  003F28  04                 	db	4
   203  003F29  24                 	db	36
   204  003F2A  02                 	db	2
   205  003F2B  00                 	db	0
   206  003F2C  05                 	db	5
   207  003F2D  24                 	db	36
   208  003F2E  06                 	db	6
   209  003F2F  00                 	db	0
   210  003F30  01                 	db	1
   211  003F31  07                 	db	7
   212  003F32  05                 	db	5
   213  003F33  81                 	db	129
   214  003F34  03                 	db	3
   215  003F35  10                 	db	16
   216  003F36  00                 	db	0
   217  003F37  20                 	db	32
   218  003F38  09                 	db	9
   219  003F39  04                 	db	4
   220  003F3A  01                 	db	1
   221  003F3B  00                 	db	0
   222  003F3C  02                 	db	2
   223  003F3D  0A                 	db	10
   224  003F3E  00                 	db	0
   225  003F3F  00                 	db	0
   226  003F40  00                 	db	0
   227  003F41  07                 	db	7
   228  003F42  05                 	db	5
   229  003F43  82                 	db	130
   230  003F44  02                 	db	2
   231  003F45  40                 	db	64
   232  003F46  00                 	db	0
   233  003F47  00                 	db	0
   234  003F48  07                 	db	7
   235  003F49  05                 	db	5
   236  003F4A  02                 	db	2
   237  003F4B  02                 	db	2
   238  003F4C  40                 	db	64
   239  003F4D  00                 	db	0
   240  003F4E  00                 	db	0
   241  003F4F                     __end_of_usb_config1:
   242                           	opt stack 0
   243  003F4F                     _sd001:
   244                           	opt stack 0
   245  003F4F  16                 	db	22
   246  003F50  03                 	db	3
   247  003F51  4D                 	db	77
   248  003F52  00                 	db	0
   249  003F53  63                 	db	99
   250  003F54  00                 	db	0
   251  003F55  4C                 	db	76
   252  003F56  00                 	db	0
   253  003F57  69                 	db	105
   254  003F58  00                 	db	0
   255  003F59  6F                 	db	111
   256  003F5A  00                 	db	0
   257  003F5B  6E                 	db	110
   258  003F5C  00                 	db	0
   259  003F5D  68                 	db	104
   260  003F5E  00                 	db	0
   261  003F5F  65                 	db	101
   262  003F60  00                 	db	0
   263  003F61  61                 	db	97
   264  003F62  00                 	db	0
   265  003F63  64                 	db	100
   266  003F64  00                 	db	0
   267  003F65                     __end_of_sd001:
   268                           	opt stack 0
   269  003F65                     _sd002:
   270                           	opt stack 0
   271  003F65  12                 	db	18
   272  003F66  03                 	db	3
   273  003F67  52                 	db	82
   274  003F68  00                 	db	0
   275  003F69  4F                 	db	79
   276  003F6A  00                 	db	0
   277  003F6B  42                 	db	66
   278  003F6C  00                 	db	0
   279  003F6D  4F                 	db	79
   280  003F6E  00                 	db	0
   281  003F6F  54                 	db	84
   282  003F70  00                 	db	0
   283  003F71  49                 	db	73
   284  003F72  00                 	db	0
   285  003F73  43                 	db	67
   286  003F74  00                 	db	0
   287  003F75  53                 	db	83
   288  003F76  00                 	db	0
   289  003F77                     __end_of_sd002:
   290                           	opt stack 0
   291  003F77                     _usb_descriptor:
   292                           	opt stack 0
   293  003F77  12                 	db	18
   294  003F78  01                 	db	1
   295  003F79  10                 	db	16
   296  003F7A  01                 	db	1
   297  003F7B  EF                 	db	239
   298  003F7C  02                 	db	2
   299  003F7D  01                 	db	1
   300  003F7E  08                 	db	8
   301  003F7F  D8                 	db	216
   302  003F80  04                 	db	4
   303  003F81  0B                 	db	11
   304  003F82  00                 	db	0
   305  003F83  03                 	db	3
   306  003F84  00                 	db	0
   307  003F85  01                 	db	1
   308  003F86  02                 	db	2
   309  003F87  00                 	db	0
   310  003F88  01                 	db	1
   311  003F89                     __end_of_usb_descriptor:
   312                           	opt stack 0
   313  003F89                     _qual_descriptor:
   314                           	opt stack 0
   315  003F89  0A                 	db	10
   316  003F8A  06                 	db	6
   317  003F8B  00                 	db	0
   318  003F8C  02                 	db	2
   319  003F8D  00                 	db	0
   320  003F8E  00                 	db	0
   321  003F8F  00                 	db	0
   322  003F90  08                 	db	8
   323  003F91  01                 	db	1
   324  003F92  00                 	db	0
   325  003F93                     __end_of_qual_descriptor:
   326                           	opt stack 0
   327  003F93                     _sd000:
   328                           	opt stack 0
   329  003F93  04                 	db	4
   330  003F94  03                 	db	3
   331  003F95  09                 	db	9
   332  003F96  04                 	db	4
   333  003F97                     __end_of_sd000:
   334                           	opt stack 0
   335  0000                     _UEP2bits	set	3925
   336  0000                     _UEP2	set	3925
   337  0000                     _UEP1bits	set	3924
   338  0000                     _UEP1	set	3924
   339  0000                     _UEP0bits	set	3923
   340  0000                     _UEP0	set	3923
   341  0000                     _UADDR	set	3932
   342  0000                     _TMR1	set	4046
   343  0000                     _TMR0	set	4054
   344  0000                     _TMR3	set	4018
   345  0000                     _T3CON	set	4017
   346  0000                     _T1CON	set	4045
   347  0000                     _T0CON	set	4053
   348  0000                     _TRISCbits	set	3988
   349  0000                     _LATCbits	set	3979
   350  0000                     _ANSELH	set	3967
   351  0000                     _ANSEL	set	3966
   352  0000                     _INTCONbits	set	4082
   353  0000                     _USTAT	set	3939
   354  0000                     _UIRbits	set	3938
   355  0000                     _PIE2bits	set	4000
   356  0000                     _UIEbits	set	3936
   357  0000                     _PIR2bits	set	4001
   358  0000                     _UIE	set	3936
   359  0000                     _UIR	set	3938
   360  0000                     _UCONbits	set	3940
   361  0000                     _UCON	set	3940
   362  0000                     _UCFG	set	3937
   363  0000                     _TXREG	set	4013
   364  0000                     _RCSTAbits	set	4011
   365  0000                     _RCREG	set	4014
   366  0000                     _PIE1bits	set	3997
   367  0000                     _PIR1bits	set	3998
   368  0000                     _SPBRG	set	4015
   369  0000                     _SPBRGH	set	4016
   370  0000                     _BAUDCTL	set	4024
   371  0000                     _TXSTA	set	4012
   372  0000                     _RCSTA	set	4011
   373  003F97                     STR_8:
   374  003F97  0A                 	db	10
   375  003F98  0A                 	db	10
   376  003F99  0A                 	db	10
   377  003F9A  0A                 	db	10
   378  003F9B  57                 	db	87	;'W'
   379  003F9C  65                 	db	101	;'e'
   380  003F9D  6C                 	db	108	;'l'
   381  003F9E  63                 	db	99	;'c'
   382  003F9F  6F                 	db	111	;'o'
   383  003FA0  6D                 	db	109	;'m'
   384  003FA1  65                 	db	101	;'e'
   385  003FA2  20                 	db	32
   386  003FA3  74                 	db	116	;'t'
   387  003FA4  6F                 	db	111	;'o'
   388  003FA5  20                 	db	32
   389  003FA6  73                 	db	115	;'s'
   390  003FA7  65                 	db	101	;'e'
   391  003FA8  72                 	db	114	;'r'
   392  003FA9  76                 	db	118	;'v'
   393  003FAA  6F                 	db	111	;'o'
   394  003FAB  2F                 	db	47
   395  003FAC  49                 	db	73	;'I'
   396  003FAD  52                 	db	82	;'R'
   397  003FAE  20                 	db	32
   398  003FAF  63                 	db	99	;'c'
   399  003FB0  6F                 	db	111	;'o'
   400  003FB1  6E                 	db	110	;'n'
   401  003FB2  74                 	db	116	;'t'
   402  003FB3  72                 	db	114	;'r'
   403  003FB4  6F                 	db	111	;'o'
   404  003FB5  6C                 	db	108	;'l'
   405  003FB6  6C                 	db	108	;'l'
   406  003FB7  65                 	db	101	;'e'
   407  003FB8  72                 	db	114	;'r'
   408  003FB9  0A                 	db	10
   409  003FBA  00                 	db	0
   410  003FBB                     STR_1:
   411  003FBB  75                 	db	117	;'u'
   412  003FBC  6E                 	db	110	;'n'
   413  003FBD  6B                 	db	107	;'k'
   414  003FBE  6E                 	db	110	;'n'
   415  003FBF  6F                 	db	111	;'o'
   416  003FC0  77                 	db	119	;'w'
   417  003FC1  6E                 	db	110	;'n'
   418  003FC2  20                 	db	32
   419  003FC3  64                 	db	100	;'d'
   420  003FC4  65                 	db	101	;'e'
   421  003FC5  73                 	db	115	;'s'
   422  003FC6  63                 	db	99	;'c'
   423  003FC7  72                 	db	114	;'r'
   424  003FC8  69                 	db	105	;'i'
   425  003FC9  70                 	db	112	;'p'
   426  003FCA  74                 	db	116	;'t'
   427  003FCB  6F                 	db	111	;'o'
   428  003FCC  72                 	db	114	;'r'
   429  003FCD  20                 	db	32
   430  003FCE  74                 	db	116	;'t'
   431  003FCF  79                 	db	121	;'y'
   432  003FD0  70                 	db	112	;'p'
   433  003FD1  65                 	db	101	;'e'
   434  003FD2  3A                 	db	58	;':'
   435  003FD3  20                 	db	32
   436  003FD4  00                 	db	0
   437  003FD5                     STR_3:
   438  003FD5  75                 	db	117	;'u'
   439  003FD6  6E                 	db	110	;'n'
   440  003FD7  6B                 	db	107	;'k'
   441  003FD8  6E                 	db	110	;'n'
   442  003FD9  6F                 	db	111	;'o'
   443  003FDA  77                 	db	119	;'w'
   444  003FDB  6E                 	db	110	;'n'
   445  003FDC  20                 	db	32
   446  003FDD  72                 	db	114	;'r'
   447  003FDE  65                 	db	101	;'e'
   448  003FDF  71                 	db	113	;'q'
   449  003FE0  75                 	db	117	;'u'
   450  003FE1  65                 	db	101	;'e'
   451  003FE2  73                 	db	115	;'s'
   452  003FE3  74                 	db	116	;'t'
   453  003FE4  20                 	db	32
   454  003FE5  00                 	db	0
   455  003FE6                     STR_7:
   456  003FE6  63                 	db	99	;'c'
   457  003FE7  74                 	db	116	;'t'
   458  003FE8  72                 	db	114	;'r'
   459  003FE9  6C                 	db	108	;'l'
   460  003FEA  5F                 	db	95	;'_'
   461  003FEB  6F                 	db	111	;'o'
   462  003FEC  75                 	db	117	;'u'
   463  003FED  74                 	db	116	;'t'
   464  003FEE  70                 	db	112	;'p'
   465  003FEF  75                 	db	117	;'u'
   466  003FF0  74                 	db	116	;'t'
   467  003FF1  20                 	db	32
   468  003FF2  33                 	db	51	;'3'
   469  003FF3  0A                 	db	10
   470  003FF4  00                 	db	0
   471  003FF5                     STR_5:
   472  003FF5  63                 	db	99	;'c'
   473  003FF6  74                 	db	116	;'t'
   474  003FF7  72                 	db	114	;'r'
   475  003FF8  6C                 	db	108	;'l'
   476  003FF9  5F                 	db	95	;'_'
   477  003FFA  6F                 	db	111	;'o'
   478  003FFB  75                 	db	117	;'u'
   479  003FFC  74                 	db	116	;'t'
   480  003FFD  20                 	db	32
   481  003FFE  00                 	db	0
   482  0000                     
   483                           ; #config settings
   484  003FFF  00                 	db	0	; dummy byte at the end
   485  0000                     
   486                           	psect	cinit
   487  000B34                     __pcinit:
   488                           	opt stack 0
   489  000B34                     start_initialization:
   490                           	opt stack 0
   491  000B34                     __initialization:
   492                           	opt stack 0
   493                           
   494                           ; Initialize objects allocated to BANK0 (12 bytes)
   495                           ; load TBLPTR registers with __pidataBANK0
   496  000B34  0E16               	movlw	low __pidataBANK0
   497  000B36  6EF6               	movwf	tblptrl,c
   498  000B38  0E11               	movlw	high __pidataBANK0
   499  000B3A  6EF7               	movwf	tblptrh,c
   500  000B3C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   501  000B3E  6EF8               	movwf	tblptru,c
   502  000B40  EE00  F0A6         	lfsr	0,__pdataBANK0
   503  000B44  EE10 F00C          	lfsr	1,12
   504  000B48                     copy_data0:
   505  000B48  0009               	tblrd		*+
   506  000B4A  CFF5 FFEE          	movff	tablat,postinc0
   507  000B4E  50E5               	movf	postdec1,w,c
   508  000B50  50E1               	movf	fsr1l,w,c
   509  000B52  E1FA               	bnz	copy_data0
   510                           
   511                           ; Initialize objects allocated to COMRAM (10 bytes)
   512                           ; load TBLPTR registers with __pidataCOMRAM
   513  000B54  0E22               	movlw	low __pidataCOMRAM
   514  000B56  6EF6               	movwf	tblptrl,c
   515  000B58  0E11               	movlw	high __pidataCOMRAM
   516  000B5A  6EF7               	movwf	tblptrh,c
   517  000B5C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   518  000B5E  6EF8               	movwf	tblptru,c
   519  000B60  EE00  F055         	lfsr	0,__pdataCOMRAM
   520  000B64  EE10 F00A          	lfsr	1,10
   521  000B68                     copy_data1:
   522  000B68  0009               	tblrd		*+
   523  000B6A  CFF5 FFEE          	movff	tablat,postinc0
   524  000B6E  50E5               	movf	postdec1,w,c
   525  000B70  50E1               	movf	fsr1l,w,c
   526  000B72  E1FA               	bnz	copy_data1
   527                           
   528                           ; Clear objects allocated to BANK1 (256 bytes)
   529  000B74  EE01  F000         	lfsr	0,__pbssBANK1
   530  000B78  EE11 F000          	lfsr	1,256
   531  000B7C                     clear_0:
   532  000B7C  6AEE               	clrf	postinc0,c
   533  000B7E  50E5               	movf	postdec1,w,c
   534  000B80  50E1               	movf	fsr1l,w,c
   535  000B82  E1FC               	bnz	clear_0
   536  000B84  50E2               	movf	fsr1h,w,c
   537  000B86  E1FA               	bnz	clear_0
   538                           
   539                           ; Clear objects allocated to BANK0 (36 bytes)
   540  000B88  EE00  F060         	lfsr	0,__pbssBANK0
   541  000B8C  0E24               	movlw	36
   542  000B8E                     clear_1:
   543  000B8E  6AEE               	clrf	postinc0,c
   544  000B90  06E8               	decf	wreg,f,c
   545  000B92  E1FD               	bnz	clear_1
   546                           
   547                           ; Clear objects allocated to COMRAM (31 bytes)
   548  000B94  EE00  F036         	lfsr	0,__pbssCOMRAM
   549  000B98  0E1F               	movlw	31
   550  000B9A                     clear_2:
   551  000B9A  6AEE               	clrf	postinc0,c
   552  000B9C  06E8               	decf	wreg,f,c
   553  000B9E  E1FD               	bnz	clear_2
   554  000BA0                     end_of_initialization:
   555                           	opt stack 0
   556  000BA0                     __end_of__initialization:
   557                           	opt stack 0
   558  000BA0  905F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   559  000BA2  925F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   560  000BA4  0100               	movlb	0
   561  000BA6  EF65  F000         	goto	_main	;jump to C main() function
   562                           tblptru	equ	0xFF8
   563                           tblptrh	equ	0xFF7
   564                           tblptrl	equ	0xFF6
   565                           tablat	equ	0xFF5
   566                           postinc0	equ	0xFEE
   567                           wreg	equ	0xFE8
   568                           postdec1	equ	0xFE5
   569                           fsr1h	equ	0xFE2
   570                           fsr1l	equ	0xFE1
   571                           
   572                           	psect	bssCOMRAM
   573  000036                     __pbssCOMRAM:
   574                           	opt stack 0
   575  000036                     _buffer:
   576                           	opt stack 0
   577  000036                     	ds	8
   578  00003E                     _data_ptr:
   579                           	opt stack 0
   580  00003E                     	ds	3
   581  000041                     _data_count:
   582                           	opt stack 0
   583  000041                     	ds	2
   584  000043                     _ir_ptr:
   585                           	opt stack 0
   586  000043                     	ds	2
   587  000045                     _serial_out_ptr2:
   588                           	opt stack 0
   589  000045                     	ds	2
   590  000047                     _serial_out_ptr:
   591                           	opt stack 0
   592  000047                     	ds	2
   593  000049                     _serial_out_count:
   594                           	opt stack 0
   595  000049                     	ds	2
   596  00004B                     _pwm1:
   597                           	opt stack 0
   598  00004B                     	ds	2
   599  00004D                     _pwm0:
   600                           	opt stack 0
   601  00004D                     	ds	2
   602  00004F                     _ctrl_trf_session_owner:
   603                           	opt stack 0
   604  00004F                     	ds	1
   605  000050                     _ctrl_trf_state:
   606                           	opt stack 0
   607  000050                     	ds	1
   608  000051                     _usb_state:
   609                           	opt stack 0
   610  000051                     	ds	1
   611  000052                     _counter:
   612                           	opt stack 0
   613  000052                     	ds	1
   614  000053                     _flags:
   615                           	opt stack 0
   616  000053                     	ds	1
   617  000054                     _usb_config:
   618                           	opt stack 0
   619  000054                     	ds	1
   620                           tblptru	equ	0xFF8
   621                           tblptrh	equ	0xFF7
   622                           tblptrl	equ	0xFF6
   623                           tablat	equ	0xFF5
   624                           postinc0	equ	0xFEE
   625                           wreg	equ	0xFE8
   626                           postdec1	equ	0xFE5
   627                           fsr1h	equ	0xFE2
   628                           fsr1l	equ	0xFE1
   629                           
   630                           	psect	dataCOMRAM
   631  000055                     __pdataCOMRAM:
   632                           	opt stack 0
   633  000055                     _cdc_in_packet:
   634                           	opt stack 0
   635  000055                     	ds	2
   636  000057                     _setup_in_packet:
   637                           	opt stack 0
   638  000057                     	ds	2
   639  000059                     _setup_out_packet:
   640                           	opt stack 0
   641  000059                     	ds	2
   642  00005B                     _EP1_IN:
   643                           	opt stack 0
   644  00005B                     	ds	2
   645  00005D                     _EP0_IN:
   646                           	opt stack 0
   647  00005D                     	ds	2
   648                           tblptru	equ	0xFF8
   649                           tblptrh	equ	0xFF7
   650                           tblptrl	equ	0xFF6
   651                           tablat	equ	0xFF5
   652                           postinc0	equ	0xFEE
   653                           wreg	equ	0xFE8
   654                           postdec1	equ	0xFE5
   655                           fsr1h	equ	0xFE2
   656                           fsr1l	equ	0xFE1
   657                           
   658                           	psect	bssBANK0
   659  000060                     __pbssBANK0:
   660                           	opt stack 0
   661  000060                     _ir_buffer:
   662                           	opt stack 0
   663  000060                     	ds	32
   664  000080                     _ir_ptr2:
   665                           	opt stack 0
   666  000080                     	ds	2
   667  000082                     _ir_count:
   668                           	opt stack 0
   669  000082                     	ds	2
   670                           tblptru	equ	0xFF8
   671                           tblptrh	equ	0xFF7
   672                           tblptrl	equ	0xFF6
   673                           tablat	equ	0xFF5
   674                           postinc0	equ	0xFEE
   675                           wreg	equ	0xFE8
   676                           postdec1	equ	0xFE5
   677                           fsr1h	equ	0xFE2
   678                           fsr1l	equ	0xFE1
   679                           
   680                           	psect	dataBANK0
   681  0000A6                     __pdataBANK0:
   682                           	opt stack 0
   683  0000A6                     _data_out_packet:
   684                           	opt stack 0
   685  0000A6                     	ds	2
   686  0000A8                     _data_in_packet:
   687                           	opt stack 0
   688  0000A8                     	ds	2
   689  0000AA                     _EP2_IN:
   690                           	opt stack 0
   691  0000AA                     	ds	2
   692  0000AC                     _EP2_OUT:
   693                           	opt stack 0
   694  0000AC                     	ds	2
   695  0000AE                     _EP0_OUT:
   696                           	opt stack 0
   697  0000AE                     	ds	2
   698  0000B0                     _input_state:
   699                           	opt stack 0
   700  0000B0                     	ds	2
   701                           tblptru	equ	0xFF8
   702                           tblptrh	equ	0xFF7
   703                           tblptrl	equ	0xFF6
   704                           tablat	equ	0xFF5
   705                           postinc0	equ	0xFEE
   706                           wreg	equ	0xFE8
   707                           postdec1	equ	0xFE5
   708                           fsr1h	equ	0xFE2
   709                           fsr1l	equ	0xFE1
   710                           
   711                           	psect	bssBANK1
   712  000100                     __pbssBANK1:
   713                           	opt stack 0
   714  000100                     _serial_out_buffer:
   715                           	opt stack 0
   716  000100                     	ds	256
   717                           tblptru	equ	0xFF8
   718                           tblptrh	equ	0xFF7
   719                           tblptrl	equ	0xFF6
   720                           tablat	equ	0xFF5
   721                           postinc0	equ	0xFEE
   722                           wreg	equ	0xFE8
   723                           postdec1	equ	0xFE5
   724                           fsr1h	equ	0xFE2
   725                           fsr1l	equ	0xFE1
   726                           
   727                           	psect	cstackBANK0
   728  000084                     __pcstackBANK0:
   729                           	opt stack 0
   730  000084                     ??_isr1:
   731                           
   732                           ; 1 bytes @ 0x0
   733  000084                     	ds	21
   734  000099                     ??_get_pwm:
   735  000099                     print_byte@c:
   736                           	opt stack 0
   737  000099                     init_usb@i:
   738                           	opt stack 0
   739  000099                     sync_code3@c:
   740                           	opt stack 0
   741  000099                     sync_code2@c:
   742                           	opt stack 0
   743  000099                     sync_code1@c:
   744                           	opt stack 0
   745  000099                     sync_code0@c:
   746                           	opt stack 0
   747  000099                     delayMicroseconds@x:
   748                           	opt stack 0
   749                           
   750                           ; 2 bytes @ 0x15
   751  000099                     	ds	1
   752  00009A                     print_text@s:
   753                           	opt stack 0
   754                           
   755                           ; 2 bytes @ 0x16
   756  00009A                     	ds	1
   757  00009B                     get_pwm@c:
   758                           	opt stack 0
   759  00009B                     delayMicroseconds@i:
   760                           	opt stack 0
   761                           
   762                           ; 2 bytes @ 0x17
   763  00009B                     	ds	1
   764  00009C                     
   765                           ; 1 bytes @ 0x18
   766  00009C                     	ds	1
   767  00009D                     
   768                           ; 2 bytes @ 0x19
   769  00009D                     	ds	2
   770  00009F                     
   771                           ; 3 bytes @ 0x1B
   772  00009F                     	ds	3
   773  0000A2                     
   774                           ; 1 bytes @ 0x1E
   775  0000A2                     	ds	1
   776  0000A3                     main@i:
   777                           	opt stack 0
   778                           
   779                           ; 1 bytes @ 0x1F
   780  0000A3                     	ds	1
   781  0000A4                     main@i_787:
   782                           	opt stack 0
   783                           
   784                           ; 1 bytes @ 0x20
   785  0000A4                     	ds	1
   786  0000A5                     main@fragment:
   787                           	opt stack 0
   788                           
   789                           ; 1 bytes @ 0x21
   790  0000A5                     	ds	1
   791                           tblptru	equ	0xFF8
   792                           tblptrh	equ	0xFF7
   793                           tblptrl	equ	0xFF6
   794                           tablat	equ	0xFF5
   795                           postinc0	equ	0xFEE
   796                           wreg	equ	0xFE8
   797                           postdec1	equ	0xFE5
   798                           fsr1h	equ	0xFE2
   799                           fsr1l	equ	0xFE1
   800                           
   801                           	psect	cstackCOMRAM
   802  000001                     __pcstackCOMRAM:
   803                           	opt stack 0
   804  000001                     ??_handle_usb_ctrl_in:
   805  000001                     ?___lwdiv:
   806                           	opt stack 0
   807  000001                     handle_uart_rx@c:
   808                           	opt stack 0
   809  000001                     i2print_byte@c:
   810                           	opt stack 0
   811  000001                     ___lwdiv@dividend:
   812                           	opt stack 0
   813                           
   814                           ; 2 bytes @ 0x0
   815  000001                     	ds	1
   816  000002                     ??_print_hex2:
   817  000002                     i2print_text@s:
   818                           	opt stack 0
   819                           
   820                           ; 2 bytes @ 0x1
   821  000002                     	ds	1
   822  000003                     ___lwdiv@divisor:
   823                           	opt stack 0
   824                           
   825                           ; 2 bytes @ 0x2
   826  000003                     	ds	1
   827  000004                     print_hex2@number:
   828                           	opt stack 0
   829  000004                     handle_usb_ctrl_in@i:
   830                           	opt stack 0
   831                           
   832                           ; 1 bytes @ 0x3
   833  000004                     	ds	1
   834  000005                     handle_usb_ctrl_out@temp:
   835                           	opt stack 0
   836  000005                     handle_usb_ctrl_in@fragment:
   837                           	opt stack 0
   838  000005                     ___lwdiv@quotient:
   839                           	opt stack 0
   840                           
   841                           ; 2 bytes @ 0x4
   842  000005                     	ds	2
   843  000007                     ___lwdiv@counter:
   844                           	opt stack 0
   845                           
   846                           ; 1 bytes @ 0x6
   847  000007                     	ds	1
   848  000008                     ?___lwmod:
   849                           	opt stack 0
   850  000008                     ___lwmod@dividend:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0x7
   854  000008                     	ds	2
   855  00000A                     ___lwmod@divisor:
   856                           	opt stack 0
   857                           
   858                           ; 2 bytes @ 0x9
   859  00000A                     	ds	2
   860  00000C                     ___lwmod@counter:
   861                           	opt stack 0
   862                           
   863                           ; 1 bytes @ 0xB
   864  00000C                     	ds	1
   865  00000D                     print_number_nospace@number:
   866                           	opt stack 0
   867                           
   868                           ; 2 bytes @ 0xC
   869  00000D                     	ds	2
   870  00000F                     print_number@number:
   871                           	opt stack 0
   872                           
   873                           ; 2 bytes @ 0xE
   874  00000F                     	ds	2
   875  000011                     usb_check_std_request@index:
   876                           	opt stack 0
   877                           
   878                           ; 1 bytes @ 0x10
   879  000011                     	ds	1
   880  000012                     usb_check_std_request@request:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x11
   884  000012                     	ds	1
   885  000013                     usb_check_std_request@type:
   886                           	opt stack 0
   887                           
   888                           ; 1 bytes @ 0x12
   889  000013                     	ds	1
   890  000014                     ??_handle_usb_ctrl_setup:
   891                           
   892                           ; 1 bytes @ 0x13
   893  000014                     	ds	5
   894  000019                     handle_usb_ctrl_setup@length:
   895                           	opt stack 0
   896                           
   897                           ; 2 bytes @ 0x18
   898  000019                     	ds	2
   899  00001B                     handle_usb_ctrl_setup@command:
   900                           	opt stack 0
   901                           
   902                           ; 1 bytes @ 0x1A
   903  00001B                     	ds	1
   904  00001C                     handle_usb_ctrl_setup@length_717:
   905                           	opt stack 0
   906                           
   907                           ; 2 bytes @ 0x1B
   908  00001C                     	ds	2
   909  00001E                     handle_usb_ctrl_setup@type:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x1D
   913  00001E                     	ds	1
   914  00001F                     handle_usb_ctrl_output@temp:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x1E
   918  00001F                     	ds	1
   919  000020                     ??_handle_usb_transaction:
   920                           
   921                           ; 1 bytes @ 0x1F
   922  000020                     	ds	2
   923  000022                     ??_isr:
   924                           
   925                           ; 1 bytes @ 0x21
   926  000022                     	ds	20
   927                           tblptru	equ	0xFF8
   928                           tblptrh	equ	0xFF7
   929                           tblptrl	equ	0xFF6
   930                           tablat	equ	0xFF5
   931                           postinc0	equ	0xFEE
   932                           wreg	equ	0xFE8
   933                           postdec1	equ	0xFE5
   934                           fsr1h	equ	0xFE2
   935                           fsr1l	equ	0xFE1
   936                           
   937 ;;
   938 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   939 ;;
   940 ;; *************** function _main *****************
   941 ;; Defined at:
   942 ;;		line 1234 in file "servos.c"
   943 ;; Parameters:    Size  Location     Type
   944 ;;  argc            2   25[BANK0 ] int 
   945 ;;  argv            3   27[BANK0 ] PTR PTR unsigned char 
   946 ;; Auto vars:     Size  Location     Type
   947 ;;  fragment        1   33[BANK0 ] unsigned char 
   948 ;;  i               1   32[BANK0 ] unsigned char 
   949 ;;  i               1   31[BANK0 ] unsigned char 
   950 ;; Return value:  Size  Location     Type
   951 ;;                  2   25[BANK0 ] int 
   952 ;; Registers used:
   953 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   954 ;; Tracked objects:
   955 ;;		On entry : 0/0
   956 ;;		On exit  : 0/0
   957 ;;		Unchanged: 0/0
   958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   959 ;;      Params:         0       5       0       0
   960 ;;      Locals:         0       3       0       0
   961 ;;      Temps:          0       1       0       0
   962 ;;      Totals:         0       9       0       0
   963 ;;Total ram usage:        9 bytes
   964 ;; Hardware stack levels required when called:   11
   965 ;; This function calls:
   966 ;;		_delayMicroseconds
   967 ;;		_flush_uart
   968 ;;		_get_pwm
   969 ;;		_handle_uart
   970 ;;		_init_uart
   971 ;;		_init_usb
   972 ;;		_print_byte
   973 ;;		_print_text
   974 ;;		_sync_code0
   975 ;;		_sync_code1
   976 ;;		_sync_code2
   977 ;;		_sync_code3
   978 ;; This function is called by:
   979 ;;		Startup code after reset
   980 ;; This function uses a non-reentrant model
   981 ;;
   982                           
   983                           	psect	text0
   984  0000CA                     __ptext0:
   985                           	opt stack 0
   986  0000CA                     _main:
   987                           	opt stack 20
   988                           
   989                           ;servos.c: 1237: ANSEL = 0b00000000;
   990                           
   991                           ;incstack = 0
   992  0000CA  0E00               	movlw	0
   993  0000CC  6E7E               	movwf	3966,c	;volatile
   994                           
   995                           ;servos.c: 1238: ANSELH = 0b00000000;
   996  0000CE  0E00               	movlw	0
   997  0000D0  6E7F               	movwf	3967,c	;volatile
   998                           
   999                           ;servos.c: 1241: init_uart();
  1000  0000D2  EC50  F008         	call	_init_uart	;wreg free
  1001                           
  1002                           ;servos.c: 1242: delayMicroseconds(10000);
  1003  0000D6  0E27               	movlw	39
  1004  0000D8  0100               	movlb	0	; () banked
  1005  0000DA  6F9A               	movwf	(delayMicroseconds@x+1)& (0+255),b
  1006  0000DC  0E10               	movlw	16
  1007  0000DE  6F99               	movwf	delayMicroseconds@x& (0+255),b
  1008  0000E0  EC3B  F008         	call	_delayMicroseconds	;wreg free
  1009                           
  1010                           ;servos.c: 1246: print_byte(0xff);
  1011  0000E4  0EFF               	movlw	255
  1012  0000E6  ECC2  F007         	call	_print_byte
  1013                           
  1014                           ;servos.c: 1247: print_text("\n\n\n\nWelcome to servo/IR controller\n");
  1015  0000EA  0E97               	movlw	low STR_8
  1016  0000EC  0100               	movlb	0	; () banked
  1017  0000EE  6F9A               	movwf	print_text@s& (0+255),b
  1018  0000F0  0E3F               	movlw	high STR_8
  1019  0000F2  6F9B               	movwf	(print_text@s+1)& (0+255),b
  1020  0000F4  ECF4  F007         	call	_print_text	;wreg free
  1021                           
  1022                           ;servos.c: 1248: flush_uart();
  1023  0000F8  EC7B  F008         	call	_flush_uart	;wreg free
  1024                           
  1025                           ;servos.c: 1250: LATCbits.LATC6 = 0;
  1026  0000FC  9C8B               	bcf	3979,6,c	;volatile
  1027                           
  1028                           ;servos.c: 1251: LATCbits.LATC7 = 0;
  1029  0000FE  9E8B               	bcf	3979,7,c	;volatile
  1030                           
  1031                           ;servos.c: 1252: TRISCbits.TRISC6 = 0;
  1032  000100  9C94               	bcf	3988,6,c	;volatile
  1033                           
  1034                           ;servos.c: 1253: TRISCbits.TRISC7 = 0;
  1035  000102  9E94               	bcf	3988,7,c	;volatile
  1036                           
  1037                           ;servos.c: 1257: T0CON = 0b10001000;
  1038  000104  0E88               	movlw	136
  1039  000106  6ED5               	movwf	4053,c	;volatile
  1040                           
  1041                           ;servos.c: 1258: INTCONbits.TMR0IF = 0;
  1042  000108  94F2               	bcf	intcon,2,c	;volatile
  1043                           
  1044                           ;servos.c: 1259: INTCONbits.TMR0IE = 1;
  1045  00010A  8AF2               	bsf	intcon,5,c	;volatile
  1046                           
  1047                           ;servos.c: 1262: T1CON = 0b10000001;
  1048  00010C  0E81               	movlw	129
  1049  00010E  6ECD               	movwf	4045,c	;volatile
  1050                           
  1051                           ;servos.c: 1263: PIR1bits.TMR1IF = 0;
  1052  000110  909E               	bcf	3998,0,c	;volatile
  1053                           
  1054                           ;servos.c: 1264: PIE1bits.TMR1IE = 1;
  1055  000112  809D               	bsf	3997,0,c	;volatile
  1056                           
  1057                           ;servos.c: 1268: T3CON = 0b10110001;
  1058  000114  0EB1               	movlw	177
  1059  000116  6EB1               	movwf	4017,c	;volatile
  1060                           
  1061                           ;servos.c: 1269: PIR2bits.TMR3IF = 0;
  1062  000118  92A1               	bcf	4001,1,c	;volatile
  1063                           
  1064                           ;servos.c: 1270: PIE2bits.TMR3IE = 1;
  1065  00011A  82A0               	bsf	4000,1,c	;volatile
  1066                           
  1067                           ;servos.c: 1273: init_usb();
  1068  00011C  ECAF  F006         	call	_init_usb	;wreg free
  1069                           
  1070                           ;servos.c: 1275: INTCONbits.PEIE = 1;
  1071  000120  8CF2               	bsf	intcon,6,c	;volatile
  1072                           
  1073                           ;servos.c: 1276: INTCONbits.GIE = 1;
  1074  000122  8EF2               	bsf	intcon,7,c	;volatile
  1075  000124                     l380:
  1076  000124  0004               	clrwdt		;# 
  1077                           
  1078                           ;servos.c: 1281: handle_uart();
  1079  000126  EC1A  F007         	call	_handle_uart	;wreg free
  1080                           
  1081                           ;servos.c: 1286: if(!(*(EP2_OUT) & (1 << 7)))
  1082  00012A  C0AC  FFD9         	movff	_EP2_OUT,fsr2l
  1083  00012E  C0AD  FFDA         	movff	_EP2_OUT+1,fsr2h
  1084  000132  0100               	movlb	0	; () banked
  1085  000134  BEDF               	btfsc	indf2,7,c
  1086  000136  D065               	goto	l386
  1087                           
  1088                           ; BSR set to: 0
  1089                           ;servos.c: 1287: {
  1090                           ;servos.c: 1292: uint8_t i;
  1091                           ;servos.c: 1293: for(i = 0; i < *(EP2_OUT + 1); i++)
  1092  000138  0E00               	movlw	0
  1093  00013A  6FA3               	movwf	main@i& (0+255),b
  1094  00013C  D016               	goto	l382
  1095  00013E                     
  1096                           ; BSR set to: 0
  1097                           ;servos.c: 1294: {
  1098                           ;servos.c: 1295: input_state(data_out_packet[i]);
  1099                           
  1100                           ; BSR set to: 0
  1101  00013E  D801               	call	u1878
  1102  000140  D012               	goto	u1879
  1103  000142                     u1878:
  1104  000142  0005               	push	
  1105  000144  6EFA               	movwf	pclath,c
  1106  000146  51B0               	movf	_input_state& (0+255),w,b
  1107  000148  6EFD               	movwf	tosl,c
  1108  00014A  51B1               	movf	(_input_state+1)& (0+255),w,b
  1109  00014C  6EFE               	movwf	tosh,c
  1110  00014E  6AFF               	clrf	tosu,c
  1111  000150  50FA               	movf	pclath,w,c
  1112  000152  51A3               	movf	main@i& (0+255),w,b
  1113  000154  0D01               	mullw	1
  1114  000156  50F3               	movf	prodl,w,c
  1115  000158  25A6               	addwf	_data_out_packet& (0+255),w,b
  1116  00015A  6ED9               	movwf	fsr2l,c
  1117  00015C  50F4               	movf	prodh,w,c
  1118  00015E  21A7               	addwfc	(_data_out_packet+1)& (0+255),w,b
  1119  000160  6EDA               	movwf	fsr2h,c
  1120  000162  50DF               	movf	indf2,w,c
  1121  000164  0012               	return		;indir
  1122  000166                     u1879:
  1123  000166  0100               	movlb	0	; () banked
  1124  000168  2BA3               	incf	main@i& (0+255),f,b
  1125  00016A                     l382:
  1126                           
  1127                           ; BSR set to: 0
  1128                           
  1129                           ; BSR set to: 0
  1130  00016A  EE20 F001          	lfsr	2,1
  1131  00016E  51AC               	movf	_EP2_OUT& (0+255),w,b
  1132  000170  26D9               	addwf	fsr2l,f,c
  1133  000172  51AD               	movf	(_EP2_OUT+1)& (0+255),w,b
  1134  000174  22DA               	addwfc	fsr2h,f,c
  1135  000176  50DE               	movf	postinc2,w,c
  1136  000178  5DA3               	subwf	main@i& (0+255),w,b
  1137  00017A  A0D8               	btfss	status,0,c
  1138  00017C  D7E0               	goto	l383
  1139                           
  1140                           ; BSR set to: 0
  1141                           ;servos.c: 1296: }
  1142                           ;servos.c: 1307: if(*(EP2_OUT) & (1 << 6))
  1143                           
  1144                           ; BSR set to: 0
  1145  00017E  C0AC  FFD9         	movff	_EP2_OUT,fsr2l
  1146  000182  C0AD  FFDA         	movff	_EP2_OUT+1,fsr2h
  1147  000186  ACDF               	btfss	indf2,6,c
  1148  000188  D01E               	goto	l385
  1149                           
  1150                           ; BSR set to: 0
  1151                           ;servos.c: 1308: {
  1152                           ;servos.c: 1309: *(EP2_OUT + 1) = (0x40); *(EP2_OUT + 2) = ((uint16_t)(data_out_packet) 
      +                          & 0xff); *(EP2_OUT + 3) = ((uint16_t)(data_out_packet) >> 8); *(EP2_OUT) = (0x80 | 0x00 
      +                          | 0x08);
  1153  00018A  EE20 F001          	lfsr	2,1
  1154  00018E  51AC               	movf	_EP2_OUT& (0+255),w,b
  1155  000190  26D9               	addwf	fsr2l,f,c
  1156  000192  51AD               	movf	(_EP2_OUT+1)& (0+255),w,b
  1157  000194  22DA               	addwfc	fsr2h,f,c
  1158  000196  0E40               	movlw	64
  1159  000198  6EDF               	movwf	indf2,c
  1160  00019A  EE20 F002          	lfsr	2,2
  1161  00019E  51AC               	movf	_EP2_OUT& (0+255),w,b
  1162  0001A0  26D9               	addwf	fsr2l,f,c
  1163  0001A2  51AD               	movf	(_EP2_OUT+1)& (0+255),w,b
  1164  0001A4  22DA               	addwfc	fsr2h,f,c
  1165  0001A6  C0A6  FFDF         	movff	_data_out_packet,indf2
  1166  0001AA  EE20 F003          	lfsr	2,3
  1167  0001AE  51AC               	movf	_EP2_OUT& (0+255),w,b
  1168  0001B0  26D9               	addwf	fsr2l,f,c
  1169  0001B2  51AD               	movf	(_EP2_OUT+1)& (0+255),w,b
  1170  0001B4  22DA               	addwfc	fsr2h,f,c
  1171  0001B6  51A7               	movf	(_data_out_packet+1)& (0+255),w,b
  1172  0001B8  6EDF               	movwf	indf2,c
  1173                           
  1174                           ; BSR set to: 0
  1175  0001BA  C0AC  FFD9         	movff	_EP2_OUT,fsr2l
  1176  0001BE  C0AD  FFDA         	movff	_EP2_OUT+1,fsr2h
  1177  0001C2  0E88               	movlw	136
  1178  0001C4  D01D               	goto	L2
  1179  0001C6                     l385:
  1180                           
  1181                           ; BSR set to: 0
  1182                           ;servos.c: 1311: else
  1183                           ;servos.c: 1312: {
  1184                           ;servos.c: 1313: *(EP2_OUT + 1) = (0x40); *(EP2_OUT + 2) = ((uint16_t)(data_out_packet) 
      +                          & 0xff); *(EP2_OUT + 3) = ((uint16_t)(data_out_packet) >> 8); *(EP2_OUT) = (0x80 | 0x40 
      +                          | 0x08);
  1185                           
  1186                           ; BSR set to: 0
  1187  0001C6  EE20 F001          	lfsr	2,1
  1188  0001CA  51AC               	movf	_EP2_OUT& (0+255),w,b
  1189  0001CC  26D9               	addwf	fsr2l,f,c
  1190  0001CE  51AD               	movf	(_EP2_OUT+1)& (0+255),w,b
  1191  0001D0  22DA               	addwfc	fsr2h,f,c
  1192  0001D2  0E40               	movlw	64
  1193  0001D4  6EDF               	movwf	indf2,c
  1194  0001D6  EE20 F002          	lfsr	2,2
  1195  0001DA  51AC               	movf	_EP2_OUT& (0+255),w,b
  1196  0001DC  26D9               	addwf	fsr2l,f,c
  1197  0001DE  51AD               	movf	(_EP2_OUT+1)& (0+255),w,b
  1198  0001E0  22DA               	addwfc	fsr2h,f,c
  1199  0001E2  C0A6  FFDF         	movff	_data_out_packet,indf2
  1200  0001E6  EE20 F003          	lfsr	2,3
  1201  0001EA  51AC               	movf	_EP2_OUT& (0+255),w,b
  1202  0001EC  26D9               	addwf	fsr2l,f,c
  1203  0001EE  51AD               	movf	(_EP2_OUT+1)& (0+255),w,b
  1204  0001F0  22DA               	addwfc	fsr2h,f,c
  1205  0001F2  51A7               	movf	(_data_out_packet+1)& (0+255),w,b
  1206  0001F4  6EDF               	movwf	indf2,c
  1207                           
  1208                           ; BSR set to: 0
  1209  0001F6  C0AC  FFD9         	movff	_EP2_OUT,fsr2l
  1210  0001FA  C0AD  FFDA         	movff	_EP2_OUT+1,fsr2h
  1211  0001FE  0EC8               	movlw	200
  1212  000200                     L2:
  1213  000200  6EDF               	movwf	indf2,c
  1214  000202                     l386:
  1215                           
  1216                           ; BSR set to: 0
  1217                           ;servos.c: 1314: }
  1218                           ;servos.c: 1315: }
  1219                           ;servos.c: 1318: if(ir_count > 0)
  1220                           
  1221                           ; BSR set to: 0
  1222                           
  1223                           ; BSR set to: 0
  1224  000202  5182               	movf	_ir_count& (0+255),w,b
  1225  000204  1183               	iorwf	(_ir_count+1)& (0+255),w,b
  1226  000206  B4D8               	btfsc	status,2,c
  1227  000208  D78D               	goto	l380
  1228                           
  1229                           ; BSR set to: 0
  1230                           ;servos.c: 1319: {
  1231                           ;servos.c: 1320: if(!(*(EP2_IN) & (1 << 7)))
  1232  00020A  C0AA  FFD9         	movff	_EP2_IN,fsr2l
  1233  00020E  C0AB  FFDA         	movff	_EP2_IN+1,fsr2h
  1234  000212  BEDF               	btfsc	indf2,7,c
  1235  000214  D787               	goto	l380
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;servos.c: 1321: {
  1239                           ;servos.c: 1323: PIE1bits.RCIE = 0;
  1240  000216  9A9D               	bcf	3997,5,c	;volatile
  1241                           
  1242                           ; BSR set to: 0
  1243                           ;servos.c: 1324: uint8_t i = 0;
  1244  000218  0E00               	movlw	0
  1245  00021A  6FA4               	movwf	main@i_787& (0+255),b
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;servos.c: 1325: uint8_t fragment = ir_count;
  1249  00021C  C082  F0A5         	movff	_ir_count,main@fragment
  1250                           
  1251                           ; BSR set to: 0
  1252                           ;servos.c: 1330: if(fragment > 0x40)
  1253  000220  0E40               	movlw	64
  1254  000222  65A5               	cpfsgt	main@fragment& (0+255),b
  1255  000224  D002               	goto	l389
  1256                           
  1257                           ; BSR set to: 0
  1258                           ;servos.c: 1331: {
  1259                           ;servos.c: 1332: fragment = 0x40;
  1260  000226  0E40               	movlw	64
  1261  000228  6FA5               	movwf	main@fragment& (0+255),b
  1262  00022A                     l389:
  1263                           
  1264                           ; BSR set to: 0
  1265                           ;servos.c: 1333: }
  1266                           ;servos.c: 1334: for(i = 0; i < fragment; i++)
  1267  00022A  0E00               	movlw	0
  1268  00022C  6FA4               	movwf	main@i_787& (0+255),b
  1269  00022E  D01D               	goto	l390
  1270  000230                     
  1271                           ; BSR set to: 0
  1272                           ;servos.c: 1335: {
  1273                           ;servos.c: 1336: data_in_packet[i] = ir_buffer[ir_ptr2++];
  1274                           
  1275                           ; BSR set to: 0
  1276  000230  0E60               	movlw	low _ir_buffer
  1277  000232  2580               	addwf	_ir_ptr2& (0+255),w,b
  1278  000234  6ED9               	movwf	fsr2l,c
  1279  000236  0E00               	movlw	high _ir_buffer
  1280  000238  2181               	addwfc	(_ir_ptr2+1)& (0+255),w,b
  1281  00023A  6EDA               	movwf	fsr2h,c
  1282  00023C  51A4               	movf	main@i_787& (0+255),w,b
  1283  00023E  0D01               	mullw	1
  1284  000240  50F3               	movf	prodl,w,c
  1285  000242  25A8               	addwf	_data_in_packet& (0+255),w,b
  1286  000244  6EE1               	movwf	fsr1l,c
  1287  000246  50F4               	movf	prodh,w,c
  1288  000248  21A9               	addwfc	(_data_in_packet+1)& (0+255),w,b
  1289  00024A  6EE2               	movwf	fsr1h,c
  1290  00024C  CFDF FFE7          	movff	indf2,indf1
  1291                           
  1292                           ; BSR set to: 0
  1293  000250  4B80               	infsnz	_ir_ptr2& (0+255),f,b
  1294  000252  2B81               	incf	(_ir_ptr2+1)& (0+255),f,b
  1295                           
  1296                           ; BSR set to: 0
  1297                           ;servos.c: 1337: if(ir_ptr2 >= 32)
  1298  000254  5181               	movf	(_ir_ptr2+1)& (0+255),w,b
  1299  000256  E104               	bnz	u1930
  1300  000258  0E20               	movlw	32
  1301  00025A  5D80               	subwf	_ir_ptr2& (0+255),w,b
  1302  00025C  A0D8               	btfss	status,0,c
  1303  00025E  D004               	goto	l392
  1304  000260                     u1930:
  1305                           
  1306                           ; BSR set to: 0
  1307                           ;servos.c: 1338: {
  1308                           ;servos.c: 1339: ir_ptr2 = 0;
  1309  000260  0E00               	movlw	0
  1310  000262  6F81               	movwf	(_ir_ptr2+1)& (0+255),b
  1311  000264  0E00               	movlw	0
  1312  000266  6F80               	movwf	_ir_ptr2& (0+255),b
  1313  000268                     l392:
  1314                           
  1315                           ; BSR set to: 0
  1316                           
  1317                           ; BSR set to: 0
  1318  000268  2BA4               	incf	main@i_787& (0+255),f,b
  1319  00026A                     l390:
  1320                           
  1321                           ; BSR set to: 0
  1322                           
  1323                           ; BSR set to: 0
  1324  00026A  51A5               	movf	main@fragment& (0+255),w,b
  1325  00026C  5DA4               	subwf	main@i_787& (0+255),w,b
  1326  00026E  A0D8               	btfss	status,0,c
  1327  000270  D7DF               	goto	l391
  1328                           
  1329                           ; BSR set to: 0
  1330                           ;servos.c: 1340: }
  1331                           ;servos.c: 1341: }
  1332                           ;servos.c: 1342: ir_count -= fragment;
  1333                           
  1334                           ; BSR set to: 0
  1335  000272  51A5               	movf	main@fragment& (0+255),w,b
  1336  000274  5F82               	subwf	_ir_count& (0+255),f,b
  1337  000276  0E00               	movlw	0
  1338  000278  5B83               	subwfb	(_ir_count+1)& (0+255),f,b
  1339                           
  1340                           ; BSR set to: 0
  1341                           ;servos.c: 1344: PIE1bits.RCIE = 1;
  1342  00027A  8A9D               	bsf	3997,5,c	;volatile
  1343                           
  1344                           ; BSR set to: 0
  1345                           ;servos.c: 1346: if(*(EP2_IN) & (1 << 6))
  1346  00027C  C0AA  FFD9         	movff	_EP2_IN,fsr2l
  1347  000280  C0AB  FFDA         	movff	_EP2_IN+1,fsr2h
  1348  000284  ACDF               	btfss	indf2,6,c
  1349  000286  D01E               	goto	l394
  1350                           
  1351                           ; BSR set to: 0
  1352                           ;servos.c: 1347: {
  1353                           ;servos.c: 1348: *(EP2_IN + 1) = (fragment); *(EP2_IN + 2) = ((uint16_t)(data_in_packet)
      +                           & 0xff); *(EP2_IN + 3) = ((uint16_t)(data_in_packet) >> 8); *(EP2_IN) = (0x80 | 0x00 | 
      +                          0x08);
  1354  000288  EE20 F001          	lfsr	2,1
  1355  00028C  51AA               	movf	_EP2_IN& (0+255),w,b
  1356  00028E  26D9               	addwf	fsr2l,f,c
  1357  000290  51AB               	movf	(_EP2_IN+1)& (0+255),w,b
  1358  000292  22DA               	addwfc	fsr2h,f,c
  1359  000294  C0A5  FFDF         	movff	main@fragment,indf2
  1360  000298  EE20 F002          	lfsr	2,2
  1361  00029C  51AA               	movf	_EP2_IN& (0+255),w,b
  1362  00029E  26D9               	addwf	fsr2l,f,c
  1363  0002A0  51AB               	movf	(_EP2_IN+1)& (0+255),w,b
  1364  0002A2  22DA               	addwfc	fsr2h,f,c
  1365  0002A4  C0A8  FFDF         	movff	_data_in_packet,indf2
  1366  0002A8  EE20 F003          	lfsr	2,3
  1367  0002AC  51AA               	movf	_EP2_IN& (0+255),w,b
  1368  0002AE  26D9               	addwf	fsr2l,f,c
  1369  0002B0  51AB               	movf	(_EP2_IN+1)& (0+255),w,b
  1370  0002B2  22DA               	addwfc	fsr2h,f,c
  1371  0002B4  51A9               	movf	(_data_in_packet+1)& (0+255),w,b
  1372  0002B6  6EDF               	movwf	indf2,c
  1373                           
  1374                           ; BSR set to: 0
  1375  0002B8  C0AA  FFD9         	movff	_EP2_IN,fsr2l
  1376  0002BC  C0AB  FFDA         	movff	_EP2_IN+1,fsr2h
  1377  0002C0  0E88               	movlw	136
  1378  0002C2  D01D               	goto	L1
  1379  0002C4                     l394:
  1380                           
  1381                           ; BSR set to: 0
  1382                           ;servos.c: 1350: else
  1383                           ;servos.c: 1351: {
  1384                           ;servos.c: 1352: *(EP2_IN + 1) = (fragment); *(EP2_IN + 2) = ((uint16_t)(data_in_packet)
      +                           & 0xff); *(EP2_IN + 3) = ((uint16_t)(data_in_packet) >> 8); *(EP2_IN) = (0x80 | 0x40 | 
      +                          0x08);
  1385                           
  1386                           ; BSR set to: 0
  1387  0002C4  EE20 F001          	lfsr	2,1
  1388  0002C8  51AA               	movf	_EP2_IN& (0+255),w,b
  1389  0002CA  26D9               	addwf	fsr2l,f,c
  1390  0002CC  51AB               	movf	(_EP2_IN+1)& (0+255),w,b
  1391  0002CE  22DA               	addwfc	fsr2h,f,c
  1392  0002D0  C0A5  FFDF         	movff	main@fragment,indf2
  1393  0002D4  EE20 F002          	lfsr	2,2
  1394  0002D8  51AA               	movf	_EP2_IN& (0+255),w,b
  1395  0002DA  26D9               	addwf	fsr2l,f,c
  1396  0002DC  51AB               	movf	(_EP2_IN+1)& (0+255),w,b
  1397  0002DE  22DA               	addwfc	fsr2h,f,c
  1398  0002E0  C0A8  FFDF         	movff	_data_in_packet,indf2
  1399  0002E4  EE20 F003          	lfsr	2,3
  1400  0002E8  51AA               	movf	_EP2_IN& (0+255),w,b
  1401  0002EA  26D9               	addwf	fsr2l,f,c
  1402  0002EC  51AB               	movf	(_EP2_IN+1)& (0+255),w,b
  1403  0002EE  22DA               	addwfc	fsr2h,f,c
  1404  0002F0  51A9               	movf	(_data_in_packet+1)& (0+255),w,b
  1405  0002F2  6EDF               	movwf	indf2,c
  1406                           
  1407                           ; BSR set to: 0
  1408  0002F4  C0AA  FFD9         	movff	_EP2_IN,fsr2l
  1409  0002F8  C0AB  FFDA         	movff	_EP2_IN+1,fsr2h
  1410  0002FC  0EC8               	movlw	200
  1411  0002FE                     L1:
  1412  0002FE  6EDF               	movwf	indf2,c
  1413                           
  1414                           ; BSR set to: 0
  1415                           
  1416                           ; BSR set to: 0
  1417                           
  1418                           ; BSR set to: 0
  1419                           
  1420                           ; BSR set to: 0
  1421  000300  D711               	goto	l380
  1422  000302                     __end_of_main:
  1423                           	opt stack 0
  1424                           tosu	equ	0xFFF
  1425                           tosh	equ	0xFFE
  1426                           tosl	equ	0xFFD
  1427                           pclath	equ	0xFFA
  1428                           tblptru	equ	0xFF8
  1429                           tblptrh	equ	0xFF7
  1430                           tblptrl	equ	0xFF6
  1431                           tablat	equ	0xFF5
  1432                           prodh	equ	0xFF4
  1433                           prodl	equ	0xFF3
  1434                           intcon	equ	0xFF2
  1435                           postinc0	equ	0xFEE
  1436                           wreg	equ	0xFE8
  1437                           indf1	equ	0xFE7
  1438                           postdec1	equ	0xFE5
  1439                           fsr1h	equ	0xFE2
  1440                           fsr1l	equ	0xFE1
  1441                           indf2	equ	0xFDF
  1442                           postinc2	equ	0xFDE
  1443                           fsr2h	equ	0xFDA
  1444                           fsr2l	equ	0xFD9
  1445                           status	equ	0xFD8
  1446                           
  1447 ;; *************** function _sync_code2 *****************
  1448 ;; Defined at:
  1449 ;;		line 1187 in file "servos.c"
  1450 ;; Parameters:    Size  Location     Type
  1451 ;;  c               1    wreg     unsigned char 
  1452 ;; Auto vars:     Size  Location     Type
  1453 ;;  c               1   21[BANK0 ] unsigned char 
  1454 ;; Return value:  Size  Location     Type
  1455 ;;                  1    wreg      void 
  1456 ;; Registers used:
  1457 ;;		wreg, status,2, status,0
  1458 ;; Tracked objects:
  1459 ;;		On entry : 0/0
  1460 ;;		On exit  : 0/0
  1461 ;;		Unchanged: 0/0
  1462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1463 ;;      Params:         0       0       0       0
  1464 ;;      Locals:         0       1       0       0
  1465 ;;      Temps:          0       0       0       0
  1466 ;;      Totals:         0       1       0       0
  1467 ;;Total ram usage:        1 bytes
  1468 ;; Hardware stack levels used:    1
  1469 ;; Hardware stack levels required when called:    9
  1470 ;; This function calls:
  1471 ;;		Nothing
  1472 ;; This function is called by:
  1473 ;;		_sync_code1
  1474 ;;		_main
  1475 ;; This function uses a non-reentrant model
  1476 ;;
  1477                           
  1478                           	psect	text1
  1479  000F20                     __ptext1:
  1480                           	opt stack 0
  1481  000F20                     _sync_code2:
  1482                           	opt stack 21
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;incstack = 0
  1486                           ;sync_code2@c stored from wreg
  1487  000F20  0100               	movlb	0	; () banked
  1488  000F22  6F99               	movwf	sync_code2@c& (0+255),b
  1489                           
  1490                           ;servos.c: 1189: if(c == 0xd4)
  1491  000F24  0ED4               	movlw	212
  1492  000F26  0100               	movlb	0	; () banked
  1493  000F28  1999               	xorwf	sync_code2@c& (0+255),w,b
  1494  000F2A  A4D8               	btfss	status,2,c
  1495  000F2C  D005               	goto	l360
  1496                           
  1497                           ; BSR set to: 0
  1498                           ;servos.c: 1190: {
  1499                           ;servos.c: 1192: input_state = sync_code3;
  1500  000F2E  0EB4               	movlw	low _sync_code3
  1501  000F30  6FB0               	movwf	_input_state& (0+255),b
  1502  000F32  0E0E               	movlw	high _sync_code3
  1503  000F34  6FB1               	movwf	(_input_state+1)& (0+255),b
  1504                           
  1505                           ;servos.c: 1193: }
  1506  000F36  0012               	return	
  1507  000F38                     l360:
  1508                           
  1509                           ; BSR set to: 0
  1510                           ;servos.c: 1194: else
  1511                           ;servos.c: 1195: if(c == 0xff)
  1512                           
  1513                           ; BSR set to: 0
  1514  000F38  2999               	incf	sync_code2@c& (0+255),w,b
  1515  000F3A  A4D8               	btfss	status,2,c
  1516  000F3C  D005               	goto	l362
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;servos.c: 1196: {
  1520                           ;servos.c: 1197: input_state = sync_code1;
  1521  000F3E  0E52               	movlw	low _sync_code1
  1522  000F40  6FB0               	movwf	_input_state& (0+255),b
  1523  000F42  0E0F               	movlw	high _sync_code1
  1524  000F44  6FB1               	movwf	(_input_state+1)& (0+255),b
  1525                           
  1526                           ;servos.c: 1198: }
  1527  000F46  0012               	return	
  1528  000F48                     l362:
  1529                           
  1530                           ; BSR set to: 0
  1531                           ;servos.c: 1199: else
  1532                           ;servos.c: 1200: {
  1533                           ;servos.c: 1201: input_state = sync_code0;
  1534                           
  1535                           ; BSR set to: 0
  1536  000F48  0EBA               	movlw	low _sync_code0
  1537  000F4A  6FB0               	movwf	_input_state& (0+255),b
  1538  000F4C  0E10               	movlw	high _sync_code0
  1539  000F4E  6FB1               	movwf	(_input_state+1)& (0+255),b
  1540                           
  1541                           ; BSR set to: 0
  1542  000F50  0012               	return	
  1543  000F52                     __end_of_sync_code2:
  1544                           	opt stack 0
  1545                           tosu	equ	0xFFF
  1546                           tosh	equ	0xFFE
  1547                           tosl	equ	0xFFD
  1548                           pclath	equ	0xFFA
  1549                           tblptru	equ	0xFF8
  1550                           tblptrh	equ	0xFF7
  1551                           tblptrl	equ	0xFF6
  1552                           tablat	equ	0xFF5
  1553                           prodh	equ	0xFF4
  1554                           prodl	equ	0xFF3
  1555                           intcon	equ	0xFF2
  1556                           postinc0	equ	0xFEE
  1557                           wreg	equ	0xFE8
  1558                           indf1	equ	0xFE7
  1559                           postdec1	equ	0xFE5
  1560                           fsr1h	equ	0xFE2
  1561                           fsr1l	equ	0xFE1
  1562                           indf2	equ	0xFDF
  1563                           postinc2	equ	0xFDE
  1564                           fsr2h	equ	0xFDA
  1565                           fsr2l	equ	0xFD9
  1566                           status	equ	0xFD8
  1567                           
  1568 ;; *************** function _get_pwm *****************
  1569 ;; Defined at:
  1570 ;;		line 1149 in file "servos.c"
  1571 ;; Parameters:    Size  Location     Type
  1572 ;;  c               1    wreg     unsigned char 
  1573 ;; Auto vars:     Size  Location     Type
  1574 ;;  c               1   23[BANK0 ] unsigned char 
  1575 ;; Return value:  Size  Location     Type
  1576 ;;                  1    wreg      void 
  1577 ;; Registers used:
  1578 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1579 ;; Tracked objects:
  1580 ;;		On entry : 0/0
  1581 ;;		On exit  : 0/0
  1582 ;;		Unchanged: 0/0
  1583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1584 ;;      Params:         0       0       0       0
  1585 ;;      Locals:         0       1       0       0
  1586 ;;      Temps:          0       2       0       0
  1587 ;;      Totals:         0       3       0       0
  1588 ;;Total ram usage:        3 bytes
  1589 ;; Hardware stack levels used:    1
  1590 ;; Hardware stack levels required when called:    9
  1591 ;; This function calls:
  1592 ;;		Nothing
  1593 ;; This function is called by:
  1594 ;;		_sync_code3
  1595 ;;		_main
  1596 ;; This function uses a non-reentrant model
  1597 ;;
  1598                           
  1599                           	psect	text2
  1600  000DAA                     __ptext2:
  1601                           	opt stack 0
  1602  000DAA                     _get_pwm:
  1603                           	opt stack 21
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;incstack = 0
  1607                           ;get_pwm@c stored from wreg
  1608  000DAA  0100               	movlb	0	; () banked
  1609  000DAC  6F9B               	movwf	get_pwm@c& (0+255),b
  1610                           
  1611                           ;servos.c: 1151: buffer[counter++] = c;
  1612  000DAE  5052               	movf	_counter,w,c
  1613  000DB0  0D01               	mullw	1
  1614  000DB2  0E36               	movlw	low _buffer
  1615  000DB4  24F3               	addwf	prodl,w,c
  1616  000DB6  6ED9               	movwf	fsr2l,c
  1617  000DB8  0E00               	movlw	high _buffer
  1618  000DBA  20F4               	addwfc	prodh,w,c
  1619  000DBC  6EDA               	movwf	fsr2h,c
  1620  000DBE  C09B  FFDF         	movff	get_pwm@c,indf2
  1621  000DC2  2A52               	incf	_counter,f,c
  1622                           
  1623                           ;servos.c: 1152: if(counter >= 4)
  1624  000DC4  0E03               	movlw	3
  1625  000DC6  6452               	cpfsgt	_counter,c
  1626  000DC8  0012               	return	
  1627                           
  1628                           ;servos.c: 1153: {
  1629                           ;servos.c: 1154: input_state = sync_code0;
  1630  000DCA  0EBA               	movlw	low _sync_code0
  1631  000DCC  0100               	movlb	0	; () banked
  1632  000DCE  6FB0               	movwf	_input_state& (0+255),b
  1633  000DD0  0E10               	movlw	high _sync_code0
  1634  000DD2  6FB1               	movwf	(_input_state+1)& (0+255),b
  1635                           
  1636                           ; BSR set to: 0
  1637                           ;servos.c: 1156: INTCONbits.GIE = 0;
  1638  000DD4  9EF2               	bcf	intcon,7,c	;volatile
  1639                           
  1640                           ; BSR set to: 0
  1641                           ;servos.c: 1157: pwm0 = buffer[0] | (((uint16_t)buffer[1]) << 8);
  1642  000DD6  5037               	movf	_buffer+1,w,c
  1643  000DD8  6F99               	movwf	??_get_pwm& (0+255),b
  1644  000DDA  5036               	movf	_buffer,w,c
  1645  000DDC  6E4D               	movwf	_pwm0,c
  1646  000DDE  C099  F04E         	movff	??_get_pwm,_pwm0+1
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;servos.c: 1158: pwm1 = buffer[2] | (((uint16_t)buffer[3]) << 8);
  1650  000DE2  5039               	movf	_buffer+3,w,c
  1651  000DE4  6F99               	movwf	??_get_pwm& (0+255),b
  1652  000DE6  5038               	movf	_buffer+2,w,c
  1653  000DE8  6E4B               	movwf	_pwm1,c
  1654  000DEA  C099  F04C         	movff	??_get_pwm,_pwm1+1
  1655                           
  1656                           ; BSR set to: 0
  1657                           ;servos.c: 1160: INTCONbits.GIE = 1;
  1658  000DEE  8EF2               	bsf	intcon,7,c	;volatile
  1659  000DF0  0012               	return	
  1660  000DF2                     __end_of_get_pwm:
  1661                           	opt stack 0
  1662                           tosu	equ	0xFFF
  1663                           tosh	equ	0xFFE
  1664                           tosl	equ	0xFFD
  1665                           pclath	equ	0xFFA
  1666                           tblptru	equ	0xFF8
  1667                           tblptrh	equ	0xFF7
  1668                           tblptrl	equ	0xFF6
  1669                           tablat	equ	0xFF5
  1670                           prodh	equ	0xFF4
  1671                           prodl	equ	0xFF3
  1672                           intcon	equ	0xFF2
  1673                           postinc0	equ	0xFEE
  1674                           wreg	equ	0xFE8
  1675                           indf1	equ	0xFE7
  1676                           postdec1	equ	0xFE5
  1677                           fsr1h	equ	0xFE2
  1678                           fsr1l	equ	0xFE1
  1679                           indf2	equ	0xFDF
  1680                           postinc2	equ	0xFDE
  1681                           fsr2h	equ	0xFDA
  1682                           fsr2l	equ	0xFD9
  1683                           status	equ	0xFD8
  1684                           
  1685 ;; *************** function _sync_code1 *****************
  1686 ;; Defined at:
  1687 ;;		line 1205 in file "servos.c"
  1688 ;; Parameters:    Size  Location     Type
  1689 ;;  c               1    wreg     unsigned char 
  1690 ;; Auto vars:     Size  Location     Type
  1691 ;;  c               1   21[BANK0 ] unsigned char 
  1692 ;; Return value:  Size  Location     Type
  1693 ;;                  1    wreg      void 
  1694 ;; Registers used:
  1695 ;;		wreg, status,2, status,0
  1696 ;; Tracked objects:
  1697 ;;		On entry : 0/0
  1698 ;;		On exit  : 0/0
  1699 ;;		Unchanged: 0/0
  1700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1701 ;;      Params:         0       0       0       0
  1702 ;;      Locals:         0       1       0       0
  1703 ;;      Temps:          0       0       0       0
  1704 ;;      Totals:         0       1       0       0
  1705 ;;Total ram usage:        1 bytes
  1706 ;; Hardware stack levels used:    1
  1707 ;; Hardware stack levels required when called:    9
  1708 ;; This function calls:
  1709 ;;		Nothing
  1710 ;; This function is called by:
  1711 ;;		_sync_code3
  1712 ;;		_sync_code2
  1713 ;;		_sync_code0
  1714 ;;		_main
  1715 ;; This function uses a non-reentrant model
  1716 ;;
  1717                           
  1718                           	psect	text3
  1719  000F52                     __ptext3:
  1720                           	opt stack 0
  1721  000F52                     _sync_code1:
  1722                           	opt stack 21
  1723                           
  1724                           ;incstack = 0
  1725                           ;sync_code1@c stored from wreg
  1726  000F52  0100               	movlb	0	; () banked
  1727  000F54  6F99               	movwf	sync_code1@c& (0+255),b
  1728                           
  1729                           ;servos.c: 1207: if(c == 0x2d)
  1730  000F56  0E2D               	movlw	45
  1731  000F58  0100               	movlb	0	; () banked
  1732  000F5A  1999               	xorwf	sync_code1@c& (0+255),w,b
  1733  000F5C  A4D8               	btfss	status,2,c
  1734  000F5E  D005               	goto	l367
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;servos.c: 1208: {
  1738                           ;servos.c: 1210: input_state = sync_code2;
  1739  000F60  0E20               	movlw	low _sync_code2
  1740  000F62  6FB0               	movwf	_input_state& (0+255),b
  1741  000F64  0E0F               	movlw	high _sync_code2
  1742  000F66  6FB1               	movwf	(_input_state+1)& (0+255),b
  1743                           
  1744                           ;servos.c: 1211: }
  1745  000F68  0012               	return	
  1746  000F6A                     l367:
  1747                           
  1748                           ; BSR set to: 0
  1749                           ;servos.c: 1212: else
  1750                           ;servos.c: 1213: if(c == 0xff)
  1751                           
  1752                           ; BSR set to: 0
  1753  000F6A  2999               	incf	sync_code1@c& (0+255),w,b
  1754  000F6C  A4D8               	btfss	status,2,c
  1755  000F6E  D005               	goto	l369
  1756                           
  1757                           ; BSR set to: 0
  1758                           ;servos.c: 1214: {
  1759                           ;servos.c: 1215: input_state = sync_code1;
  1760  000F70  0E52               	movlw	low _sync_code1
  1761  000F72  6FB0               	movwf	_input_state& (0+255),b
  1762  000F74  0E0F               	movlw	high _sync_code1
  1763  000F76  6FB1               	movwf	(_input_state+1)& (0+255),b
  1764                           
  1765                           ;servos.c: 1216: }
  1766  000F78  0012               	return	
  1767  000F7A                     l369:
  1768                           
  1769                           ; BSR set to: 0
  1770                           ;servos.c: 1217: else
  1771                           ;servos.c: 1218: {
  1772                           ;servos.c: 1219: input_state = sync_code0;
  1773                           
  1774                           ; BSR set to: 0
  1775  000F7A  0EBA               	movlw	low _sync_code0
  1776  000F7C  6FB0               	movwf	_input_state& (0+255),b
  1777  000F7E  0E10               	movlw	high _sync_code0
  1778  000F80  6FB1               	movwf	(_input_state+1)& (0+255),b
  1779                           
  1780                           ; BSR set to: 0
  1781  000F82  0012               	return	
  1782  000F84                     __end_of_sync_code1:
  1783                           	opt stack 0
  1784                           tosu	equ	0xFFF
  1785                           tosh	equ	0xFFE
  1786                           tosl	equ	0xFFD
  1787                           pclath	equ	0xFFA
  1788                           tblptru	equ	0xFF8
  1789                           tblptrh	equ	0xFF7
  1790                           tblptrl	equ	0xFF6
  1791                           tablat	equ	0xFF5
  1792                           prodh	equ	0xFF4
  1793                           prodl	equ	0xFF3
  1794                           intcon	equ	0xFF2
  1795                           postinc0	equ	0xFEE
  1796                           wreg	equ	0xFE8
  1797                           indf1	equ	0xFE7
  1798                           postdec1	equ	0xFE5
  1799                           fsr1h	equ	0xFE2
  1800                           fsr1l	equ	0xFE1
  1801                           indf2	equ	0xFDF
  1802                           postinc2	equ	0xFDE
  1803                           fsr2h	equ	0xFDA
  1804                           fsr2l	equ	0xFD9
  1805                           status	equ	0xFD8
  1806                           
  1807 ;; *************** function _sync_code0 *****************
  1808 ;; Defined at:
  1809 ;;		line 1223 in file "servos.c"
  1810 ;; Parameters:    Size  Location     Type
  1811 ;;  c               1    wreg     unsigned char 
  1812 ;; Auto vars:     Size  Location     Type
  1813 ;;  c               1   21[BANK0 ] unsigned char 
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  1    wreg      void 
  1816 ;; Registers used:
  1817 ;;		wreg, status,2, status,0
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1823 ;;      Params:         0       0       0       0
  1824 ;;      Locals:         0       1       0       0
  1825 ;;      Temps:          0       0       0       0
  1826 ;;      Totals:         0       1       0       0
  1827 ;;Total ram usage:        1 bytes
  1828 ;; Hardware stack levels used:    1
  1829 ;; Hardware stack levels required when called:    9
  1830 ;; This function calls:
  1831 ;;		Nothing
  1832 ;; This function is called by:
  1833 ;;		_get_pwm
  1834 ;;		_sync_code3
  1835 ;;		_sync_code2
  1836 ;;		_sync_code1
  1837 ;;		_main
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text4
  1842  0010BA                     __ptext4:
  1843                           	opt stack 0
  1844  0010BA                     _sync_code0:
  1845                           	opt stack 21
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;incstack = 0
  1849                           ;sync_code0@c stored from wreg
  1850  0010BA  0100               	movlb	0	; () banked
  1851  0010BC  6F99               	movwf	sync_code0@c& (0+255),b
  1852                           
  1853                           ;servos.c: 1225: if(c == 0xff)
  1854  0010BE  0100               	movlb	0	; () banked
  1855  0010C0  2999               	incf	sync_code0@c& (0+255),w,b
  1856  0010C2  A4D8               	btfss	status,2,c
  1857  0010C4  0012               	return	
  1858                           
  1859                           ; BSR set to: 0
  1860                           ;servos.c: 1226: {
  1861                           ;servos.c: 1228: input_state = sync_code1;
  1862  0010C6  0E52               	movlw	low _sync_code1
  1863  0010C8  6FB0               	movwf	_input_state& (0+255),b
  1864  0010CA  0E0F               	movlw	high _sync_code1
  1865  0010CC  6FB1               	movwf	(_input_state+1)& (0+255),b
  1866  0010CE  0012               	return	
  1867  0010D0                     __end_of_sync_code0:
  1868                           	opt stack 0
  1869                           tosu	equ	0xFFF
  1870                           tosh	equ	0xFFE
  1871                           tosl	equ	0xFFD
  1872                           pclath	equ	0xFFA
  1873                           tblptru	equ	0xFF8
  1874                           tblptrh	equ	0xFF7
  1875                           tblptrl	equ	0xFF6
  1876                           tablat	equ	0xFF5
  1877                           prodh	equ	0xFF4
  1878                           prodl	equ	0xFF3
  1879                           intcon	equ	0xFF2
  1880                           postinc0	equ	0xFEE
  1881                           wreg	equ	0xFE8
  1882                           indf1	equ	0xFE7
  1883                           postdec1	equ	0xFE5
  1884                           fsr1h	equ	0xFE2
  1885                           fsr1l	equ	0xFE1
  1886                           indf2	equ	0xFDF
  1887                           postinc2	equ	0xFDE
  1888                           fsr2h	equ	0xFDA
  1889                           fsr2l	equ	0xFD9
  1890                           status	equ	0xFD8
  1891                           
  1892 ;; *************** function _sync_code3 *****************
  1893 ;; Defined at:
  1894 ;;		line 1168 in file "servos.c"
  1895 ;; Parameters:    Size  Location     Type
  1896 ;;  c               1    wreg     unsigned char 
  1897 ;; Auto vars:     Size  Location     Type
  1898 ;;  c               1   21[BANK0 ] unsigned char 
  1899 ;; Return value:  Size  Location     Type
  1900 ;;                  1    wreg      void 
  1901 ;; Registers used:
  1902 ;;		wreg, status,2, status,0
  1903 ;; Tracked objects:
  1904 ;;		On entry : 0/0
  1905 ;;		On exit  : 0/0
  1906 ;;		Unchanged: 0/0
  1907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1908 ;;      Params:         0       0       0       0
  1909 ;;      Locals:         0       1       0       0
  1910 ;;      Temps:          0       0       0       0
  1911 ;;      Totals:         0       1       0       0
  1912 ;;Total ram usage:        1 bytes
  1913 ;; Hardware stack levels used:    1
  1914 ;; Hardware stack levels required when called:    9
  1915 ;; This function calls:
  1916 ;;		Nothing
  1917 ;; This function is called by:
  1918 ;;		_sync_code2
  1919 ;;		_main
  1920 ;; This function uses a non-reentrant model
  1921 ;;
  1922                           
  1923                           	psect	text5
  1924  000EB4                     __ptext5:
  1925                           	opt stack 0
  1926  000EB4                     _sync_code3:
  1927                           	opt stack 21
  1928                           
  1929                           ; BSR set to: 0
  1930                           ;incstack = 0
  1931                           ;sync_code3@c stored from wreg
  1932  000EB4  0100               	movlb	0	; () banked
  1933  000EB6  6F99               	movwf	sync_code3@c& (0+255),b
  1934                           
  1935                           ;servos.c: 1170: if(c == 0xe5)
  1936  000EB8  0EE5               	movlw	229
  1937  000EBA  0100               	movlb	0	; () banked
  1938  000EBC  1999               	xorwf	sync_code3@c& (0+255),w,b
  1939  000EBE  A4D8               	btfss	status,2,c
  1940  000EC0  D007               	goto	l353
  1941                           
  1942                           ; BSR set to: 0
  1943                           ;servos.c: 1171: {
  1944                           ;servos.c: 1173: input_state = get_pwm;
  1945  000EC2  0EAA               	movlw	low _get_pwm
  1946  000EC4  6FB0               	movwf	_input_state& (0+255),b
  1947  000EC6  0E0D               	movlw	high _get_pwm
  1948  000EC8  6FB1               	movwf	(_input_state+1)& (0+255),b
  1949                           
  1950                           ; BSR set to: 0
  1951                           ;servos.c: 1174: counter = 0;
  1952  000ECA  0E00               	movlw	0
  1953  000ECC  6E52               	movwf	_counter,c
  1954                           
  1955                           ;servos.c: 1175: }
  1956  000ECE  0012               	return	
  1957  000ED0                     l353:
  1958                           
  1959                           ; BSR set to: 0
  1960                           ;servos.c: 1176: else
  1961                           ;servos.c: 1177: if(c == 0xff)
  1962                           
  1963                           ; BSR set to: 0
  1964  000ED0  2999               	incf	sync_code3@c& (0+255),w,b
  1965  000ED2  A4D8               	btfss	status,2,c
  1966  000ED4  D005               	goto	l355
  1967                           
  1968                           ; BSR set to: 0
  1969                           ;servos.c: 1178: {
  1970                           ;servos.c: 1179: input_state = sync_code1;
  1971  000ED6  0E52               	movlw	low _sync_code1
  1972  000ED8  6FB0               	movwf	_input_state& (0+255),b
  1973  000EDA  0E0F               	movlw	high _sync_code1
  1974  000EDC  6FB1               	movwf	(_input_state+1)& (0+255),b
  1975                           
  1976                           ;servos.c: 1180: }
  1977  000EDE  0012               	return	
  1978  000EE0                     l355:
  1979                           
  1980                           ; BSR set to: 0
  1981                           ;servos.c: 1181: else
  1982                           ;servos.c: 1182: {
  1983                           ;servos.c: 1183: input_state = sync_code0;
  1984                           
  1985                           ; BSR set to: 0
  1986  000EE0  0EBA               	movlw	low _sync_code0
  1987  000EE2  6FB0               	movwf	_input_state& (0+255),b
  1988  000EE4  0E10               	movlw	high _sync_code0
  1989  000EE6  6FB1               	movwf	(_input_state+1)& (0+255),b
  1990                           
  1991                           ; BSR set to: 0
  1992  000EE8  0012               	return	
  1993  000EEA                     __end_of_sync_code3:
  1994                           	opt stack 0
  1995                           tosu	equ	0xFFF
  1996                           tosh	equ	0xFFE
  1997                           tosl	equ	0xFFD
  1998                           pclath	equ	0xFFA
  1999                           tblptru	equ	0xFF8
  2000                           tblptrh	equ	0xFF7
  2001                           tblptrl	equ	0xFF6
  2002                           tablat	equ	0xFF5
  2003                           prodh	equ	0xFF4
  2004                           prodl	equ	0xFF3
  2005                           intcon	equ	0xFF2
  2006                           postinc0	equ	0xFEE
  2007                           wreg	equ	0xFE8
  2008                           indf1	equ	0xFE7
  2009                           postdec1	equ	0xFE5
  2010                           fsr1h	equ	0xFE2
  2011                           fsr1l	equ	0xFE1
  2012                           indf2	equ	0xFDF
  2013                           postinc2	equ	0xFDE
  2014                           fsr2h	equ	0xFDA
  2015                           fsr2l	equ	0xFD9
  2016                           status	equ	0xFD8
  2017                           
  2018 ;; *************** function _print_text *****************
  2019 ;; Defined at:
  2020 ;;		line 250 in file "servos.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;  s               2   22[BANK0 ] PTR const unsigned char 
  2023 ;;		 -> STR_8(36), STR_7(15), STR_6(2), STR_5(10), 
  2024 ;;		 -> STR_4(2), STR_3(17), STR_2(2), STR_1(26), 
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;		None
  2027 ;; Return value:  Size  Location     Type
  2028 ;;                  1    wreg      void 
  2029 ;; Registers used:
  2030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2031 ;; Tracked objects:
  2032 ;;		On entry : 0/0
  2033 ;;		On exit  : 0/0
  2034 ;;		Unchanged: 0/0
  2035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2036 ;;      Params:         0       2       0       0
  2037 ;;      Locals:         0       0       0       0
  2038 ;;      Temps:          0       0       0       0
  2039 ;;      Totals:         0       2       0       0
  2040 ;;Total ram usage:        2 bytes
  2041 ;; Hardware stack levels used:    1
  2042 ;; Hardware stack levels required when called:   10
  2043 ;; This function calls:
  2044 ;;		_print_byte
  2045 ;; This function is called by:
  2046 ;;		_main
  2047 ;; This function uses a non-reentrant model
  2048 ;;
  2049                           
  2050                           	psect	text6
  2051  000FE8                     __ptext6:
  2052                           	opt stack 0
  2053  000FE8                     _print_text:
  2054                           	opt stack 20
  2055                           
  2056                           ;servos.c: 252: while(*s != 0)
  2057                           
  2058                           ; BSR set to: 0
  2059                           ;incstack = 0
  2060  000FE8  D00C               	goto	l146
  2061  000FEA                     
  2062                           ;servos.c: 253: {
  2063                           ;servos.c: 254: print_byte(*s);
  2064  000FEA  C09A  FFF6         	movff	print_text@s,tblptrl
  2065  000FEE  C09B  FFF7         	movff	print_text@s+1,tblptrh
  2066  000FF2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2067  000FF2  6AF8               	clrf	tblptru,c
  2068  000FF4                     	endif
  2069  000FF4                     	if	0	;tblptru may be non-zero
  2070  000FF4                     	endif
  2071  000FF4  0008               	tblrd		*
  2072  000FF6  50F5               	movf	tablat,w,c
  2073  000FF8  ECC2  F007         	call	_print_byte
  2074                           
  2075                           ;servos.c: 255: s++;
  2076  000FFC  0100               	movlb	0	; () banked
  2077  000FFE  4B9A               	infsnz	print_text@s& (0+255),f,b
  2078  001000  2B9B               	incf	(print_text@s+1)& (0+255),f,b
  2079  001002                     l146:
  2080                           
  2081                           ; BSR set to: 0
  2082  001002  C09A  FFF6         	movff	print_text@s,tblptrl
  2083  001006  C09B  FFF7         	movff	print_text@s+1,tblptrh
  2084  00100A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2085  00100A  6AF8               	clrf	tblptru,c
  2086  00100C                     	endif
  2087  00100C                     	if	0	;tblptru may be non-zero
  2088  00100C                     	endif
  2089  00100C  0008               	tblrd		*
  2090  00100E  50F5               	movf	tablat,w,c
  2091  001010  0900               	iorlw	0
  2092  001012  B4D8               	btfsc	status,2,c
  2093  001014  0012               	return	
  2094  001016  D7E9               	goto	l147
  2095  001018                     __end_of_print_text:
  2096                           	opt stack 0
  2097                           tosu	equ	0xFFF
  2098                           tosh	equ	0xFFE
  2099                           tosl	equ	0xFFD
  2100                           pclath	equ	0xFFA
  2101                           tblptru	equ	0xFF8
  2102                           tblptrh	equ	0xFF7
  2103                           tblptrl	equ	0xFF6
  2104                           tablat	equ	0xFF5
  2105                           prodh	equ	0xFF4
  2106                           prodl	equ	0xFF3
  2107                           intcon	equ	0xFF2
  2108                           postinc0	equ	0xFEE
  2109                           wreg	equ	0xFE8
  2110                           indf1	equ	0xFE7
  2111                           postdec1	equ	0xFE5
  2112                           fsr1h	equ	0xFE2
  2113                           fsr1l	equ	0xFE1
  2114                           indf2	equ	0xFDF
  2115                           postinc2	equ	0xFDE
  2116                           fsr2h	equ	0xFDA
  2117                           fsr2l	equ	0xFD9
  2118                           status	equ	0xFD8
  2119                           
  2120 ;; *************** function _print_byte *****************
  2121 ;; Defined at:
  2122 ;;		line 237 in file "servos.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;  c               1    wreg     unsigned char 
  2125 ;; Auto vars:     Size  Location     Type
  2126 ;;  c               1   21[BANK0 ] unsigned char 
  2127 ;; Return value:  Size  Location     Type
  2128 ;;                  1    wreg      void 
  2129 ;; Registers used:
  2130 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2131 ;; Tracked objects:
  2132 ;;		On entry : 0/0
  2133 ;;		On exit  : 0/0
  2134 ;;		Unchanged: 0/0
  2135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2136 ;;      Params:         0       0       0       0
  2137 ;;      Locals:         0       1       0       0
  2138 ;;      Temps:          0       0       0       0
  2139 ;;      Totals:         0       1       0       0
  2140 ;;Total ram usage:        1 bytes
  2141 ;; Hardware stack levels used:    1
  2142 ;; Hardware stack levels required when called:    9
  2143 ;; This function calls:
  2144 ;;		Nothing
  2145 ;; This function is called by:
  2146 ;;		_print_text
  2147 ;;		_main
  2148 ;;		_print_bin
  2149 ;; This function uses a non-reentrant model
  2150 ;;
  2151                           
  2152                           	psect	text7
  2153  000F84                     __ptext7:
  2154                           	opt stack 0
  2155  000F84                     _print_byte:
  2156                           	opt stack 20
  2157                           
  2158                           ;incstack = 0
  2159                           ;print_byte@c stored from wreg
  2160  000F84  0100               	movlb	0	; () banked
  2161  000F86  6F99               	movwf	print_byte@c& (0+255),b
  2162                           
  2163                           ;servos.c: 239: if(serial_out_count < 256)
  2164  000F88  044A               	decf	_serial_out_count+1,w,c
  2165  000F8A  B0D8               	btfsc	status,0,c
  2166  000F8C  0012               	return	
  2167                           
  2168                           ;servos.c: 240: {
  2169                           ;servos.c: 241: serial_out_buffer[serial_out_ptr++] = c;
  2170  000F8E  0E00               	movlw	low _serial_out_buffer
  2171  000F90  2447               	addwf	_serial_out_ptr,w,c
  2172  000F92  6ED9               	movwf	fsr2l,c
  2173  000F94  0E01               	movlw	high _serial_out_buffer
  2174  000F96  2048               	addwfc	_serial_out_ptr+1,w,c
  2175  000F98  6EDA               	movwf	fsr2h,c
  2176  000F9A  C099  FFDF         	movff	print_byte@c,indf2
  2177  000F9E  4A47               	infsnz	_serial_out_ptr,f,c
  2178  000FA0  2A48               	incf	_serial_out_ptr+1,f,c
  2179                           
  2180                           ;servos.c: 242: serial_out_count++;
  2181  000FA2  4A49               	infsnz	_serial_out_count,f,c
  2182  000FA4  2A4A               	incf	_serial_out_count+1,f,c
  2183                           
  2184                           ;servos.c: 243: if(serial_out_ptr >= 256)
  2185  000FA6  0448               	decf	_serial_out_ptr+1,w,c
  2186  000FA8  A0D8               	btfss	status,0,c
  2187  000FAA  0012               	return	
  2188                           
  2189                           ;servos.c: 244: {
  2190                           ;servos.c: 245: serial_out_ptr = 0;
  2191  000FAC  0E00               	movlw	0
  2192  000FAE  6E48               	movwf	_serial_out_ptr+1,c
  2193  000FB0  0E00               	movlw	0
  2194  000FB2  6E47               	movwf	_serial_out_ptr,c
  2195  000FB4  0012               	return	
  2196  000FB6                     __end_of_print_byte:
  2197                           	opt stack 0
  2198                           tosu	equ	0xFFF
  2199                           tosh	equ	0xFFE
  2200                           tosl	equ	0xFFD
  2201                           pclath	equ	0xFFA
  2202                           tblptru	equ	0xFF8
  2203                           tblptrh	equ	0xFF7
  2204                           tblptrl	equ	0xFF6
  2205                           tablat	equ	0xFF5
  2206                           prodh	equ	0xFF4
  2207                           prodl	equ	0xFF3
  2208                           intcon	equ	0xFF2
  2209                           postinc0	equ	0xFEE
  2210                           wreg	equ	0xFE8
  2211                           indf1	equ	0xFE7
  2212                           postdec1	equ	0xFE5
  2213                           fsr1h	equ	0xFE2
  2214                           fsr1l	equ	0xFE1
  2215                           indf2	equ	0xFDF
  2216                           postinc2	equ	0xFDE
  2217                           fsr2h	equ	0xFDA
  2218                           fsr2l	equ	0xFD9
  2219                           status	equ	0xFD8
  2220                           
  2221 ;; *************** function _init_usb *****************
  2222 ;; Defined at:
  2223 ;;		line 591 in file "servos.c"
  2224 ;; Parameters:    Size  Location     Type
  2225 ;;		None
  2226 ;; Auto vars:     Size  Location     Type
  2227 ;;  i               1   21[BANK0 ] unsigned char 
  2228 ;; Return value:  Size  Location     Type
  2229 ;;                  1    wreg      void 
  2230 ;; Registers used:
  2231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2232 ;; Tracked objects:
  2233 ;;		On entry : 0/0
  2234 ;;		On exit  : 0/0
  2235 ;;		Unchanged: 0/0
  2236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2237 ;;      Params:         0       0       0       0
  2238 ;;      Locals:         0       1       0       0
  2239 ;;      Temps:          0       0       0       0
  2240 ;;      Totals:         0       1       0       0
  2241 ;;Total ram usage:        1 bytes
  2242 ;; Hardware stack levels used:    1
  2243 ;; Hardware stack levels required when called:    9
  2244 ;; This function calls:
  2245 ;;		Nothing
  2246 ;; This function is called by:
  2247 ;;		_main
  2248 ;; This function uses a non-reentrant model
  2249 ;;
  2250                           
  2251                           	psect	text8
  2252  000D5E                     __ptext8:
  2253                           	opt stack 0
  2254  000D5E                     _init_usb:
  2255                           	opt stack 21
  2256                           
  2257                           ;servos.c: 593: uint8_t i;
  2258                           ;servos.c: 594: for(i = 0; i < 8; i++)
  2259                           
  2260                           ;incstack = 0
  2261  000D5E  0E00               	movlw	0
  2262  000D60  0100               	movlb	0	; () banked
  2263  000D62  6F99               	movwf	init_usb@i& (0+255),b
  2264  000D64                     l2371:
  2265                           
  2266                           ; BSR set to: 0
  2267  000D64  0E07               	movlw	7
  2268  000D66  6599               	cpfsgt	init_usb@i& (0+255),b
  2269  000D68  D001               	goto	l246
  2270  000D6A  D00C               	goto	u1600
  2271  000D6C                     l246:
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;servos.c: 595: {
  2275                           ;servos.c: 596: EP0_OUT[i] = 0;
  2276                           
  2277                           ; BSR set to: 0
  2278  000D6C  5199               	movf	init_usb@i& (0+255),w,b
  2279  000D6E  0D01               	mullw	1
  2280  000D70  50F3               	movf	prodl,w,c
  2281  000D72  25AE               	addwf	_EP0_OUT& (0+255),w,b
  2282  000D74  6ED9               	movwf	fsr2l,c
  2283  000D76  50F4               	movf	prodh,w,c
  2284  000D78  21AF               	addwfc	(_EP0_OUT+1)& (0+255),w,b
  2285  000D7A  6EDA               	movwf	fsr2h,c
  2286  000D7C  0E00               	movlw	0
  2287  000D7E  6EDF               	movwf	indf2,c
  2288                           
  2289                           ; BSR set to: 0
  2290  000D80  2B99               	incf	init_usb@i& (0+255),f,b
  2291  000D82  D7F0               	goto	l2371
  2292  000D84                     u1600:
  2293                           
  2294                           ; BSR set to: 0
  2295                           ;servos.c: 597: }
  2296                           ;servos.c: 600: UCFG = 0b00010100;
  2297                           
  2298                           ; BSR set to: 0
  2299  000D84  0E14               	movlw	20
  2300  000D86  6E61               	movwf	3937,c	;volatile
  2301                           
  2302                           ;servos.c: 603: UCON = 0b00001000;
  2303  000D88  0E08               	movlw	8
  2304  000D8A  6E64               	movwf	3940,c	;volatile
  2305  000D8C                     l248:
  2306  000D8C  0004               	clrwdt		;# 
  2307                           
  2308                           ;servos.c: 613: if(!UCONbits.SE0)
  2309  000D8E  BA64               	btfsc	3940,5,c	;volatile
  2310  000D90  D7FD               	goto	l248
  2311                           
  2312                           ;servos.c: 616: }
  2313                           ;servos.c: 617: }
  2314                           ;servos.c: 620: UIR = 0;
  2315                           
  2316                           ;servos.c: 614: {
  2317                           ;servos.c: 615: break;
  2318  000D92  0E00               	movlw	0
  2319  000D94  6E62               	movwf	3938,c	;volatile
  2320                           
  2321                           ;servos.c: 621: UIE = 0;
  2322  000D96  0E00               	movlw	0
  2323  000D98  6E60               	movwf	3936,c	;volatile
  2324                           
  2325                           ;servos.c: 622: PIR2bits.USBIF = 0;
  2326  000D9A  94A1               	bcf	4001,2,c	;volatile
  2327                           
  2328                           ;servos.c: 623: UIEbits.URSTIE = 1;
  2329  000D9C  8060               	bsf	3936,0,c	;volatile
  2330                           
  2331                           ;servos.c: 624: UIEbits.STALLIE = 1;
  2332  000D9E  8A60               	bsf	3936,5,c	;volatile
  2333                           
  2334                           ;servos.c: 625: UIEbits.TRNIE = 1;
  2335  000DA0  8660               	bsf	3936,3,c	;volatile
  2336                           
  2337                           ;servos.c: 626: PIE2bits.USBIE = 1;
  2338  000DA2  84A0               	bsf	4000,2,c	;volatile
  2339                           
  2340                           ;servos.c: 627: usb_state = 2;
  2341  000DA4  0E02               	movlw	2
  2342  000DA6  6E51               	movwf	_usb_state,c
  2343  000DA8  0012               	return		;funcret
  2344  000DAA                     __end_of_init_usb:
  2345                           	opt stack 0
  2346                           tosu	equ	0xFFF
  2347                           tosh	equ	0xFFE
  2348                           tosl	equ	0xFFD
  2349                           pclath	equ	0xFFA
  2350                           tblptru	equ	0xFF8
  2351                           tblptrh	equ	0xFF7
  2352                           tblptrl	equ	0xFF6
  2353                           tablat	equ	0xFF5
  2354                           prodh	equ	0xFF4
  2355                           prodl	equ	0xFF3
  2356                           intcon	equ	0xFF2
  2357                           postinc0	equ	0xFEE
  2358                           wreg	equ	0xFE8
  2359                           indf1	equ	0xFE7
  2360                           postdec1	equ	0xFE5
  2361                           fsr1h	equ	0xFE2
  2362                           fsr1l	equ	0xFE1
  2363                           indf2	equ	0xFDF
  2364                           postinc2	equ	0xFDE
  2365                           fsr2h	equ	0xFDA
  2366                           fsr2l	equ	0xFD9
  2367                           status	equ	0xFD8
  2368                           
  2369 ;; *************** function _init_uart *****************
  2370 ;; Defined at:
  2371 ;;		line 160 in file "servos.c"
  2372 ;; Parameters:    Size  Location     Type
  2373 ;;		None
  2374 ;; Auto vars:     Size  Location     Type
  2375 ;;		None
  2376 ;; Return value:  Size  Location     Type
  2377 ;;                  1    wreg      void 
  2378 ;; Registers used:
  2379 ;;		wreg, status,2
  2380 ;; Tracked objects:
  2381 ;;		On entry : 0/0
  2382 ;;		On exit  : 0/0
  2383 ;;		Unchanged: 0/0
  2384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2385 ;;      Params:         0       0       0       0
  2386 ;;      Locals:         0       0       0       0
  2387 ;;      Temps:          0       0       0       0
  2388 ;;      Totals:         0       0       0       0
  2389 ;;Total ram usage:        0 bytes
  2390 ;; Hardware stack levels used:    1
  2391 ;; Hardware stack levels required when called:    9
  2392 ;; This function calls:
  2393 ;;		Nothing
  2394 ;; This function is called by:
  2395 ;;		_main
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           	psect	text9
  2400  0010A0                     __ptext9:
  2401                           	opt stack 0
  2402  0010A0                     _init_uart:
  2403                           	opt stack 21
  2404                           
  2405                           ;servos.c: 162: RCSTA = 0b10010000;
  2406                           
  2407                           ;incstack = 0
  2408  0010A0  0E90               	movlw	144
  2409  0010A2  6EAB               	movwf	4011,c	;volatile
  2410                           
  2411                           ;servos.c: 163: TXSTA = 0b00100100;
  2412  0010A4  0E24               	movlw	36
  2413  0010A6  6EAC               	movwf	4012,c	;volatile
  2414                           
  2415                           ;servos.c: 164: BAUDCTL = 0b00001000;
  2416  0010A8  0E08               	movlw	8
  2417  0010AA  6EB8               	movwf	4024,c	;volatile
  2418                           
  2419                           ;servos.c: 166: SPBRGH = (48000000 / 4 / 115200 - 1) >> 8;
  2420  0010AC  0E00               	movlw	0
  2421  0010AE  6EB0               	movwf	4016,c	;volatile
  2422                           
  2423                           ;servos.c: 167: SPBRG = (48000000 / 4 / 115200 - 1) & 0xff;
  2424  0010B0  0E67               	movlw	103
  2425  0010B2  6EAF               	movwf	4015,c	;volatile
  2426                           
  2427                           ;servos.c: 168: PIR1bits.RCIF = 0;
  2428  0010B4  9A9E               	bcf	3998,5,c	;volatile
  2429                           
  2430                           ;servos.c: 169: PIE1bits.RCIE = 1;
  2431  0010B6  8A9D               	bsf	3997,5,c	;volatile
  2432  0010B8  0012               	return		;funcret
  2433  0010BA                     __end_of_init_uart:
  2434                           	opt stack 0
  2435                           tosu	equ	0xFFF
  2436                           tosh	equ	0xFFE
  2437                           tosl	equ	0xFFD
  2438                           pclath	equ	0xFFA
  2439                           tblptru	equ	0xFF8
  2440                           tblptrh	equ	0xFF7
  2441                           tblptrl	equ	0xFF6
  2442                           tablat	equ	0xFF5
  2443                           prodh	equ	0xFF4
  2444                           prodl	equ	0xFF3
  2445                           intcon	equ	0xFF2
  2446                           postinc0	equ	0xFEE
  2447                           wreg	equ	0xFE8
  2448                           indf1	equ	0xFE7
  2449                           postdec1	equ	0xFE5
  2450                           fsr1h	equ	0xFE2
  2451                           fsr1l	equ	0xFE1
  2452                           indf2	equ	0xFDF
  2453                           postinc2	equ	0xFDE
  2454                           fsr2h	equ	0xFDA
  2455                           fsr2l	equ	0xFD9
  2456                           status	equ	0xFD8
  2457                           
  2458 ;; *************** function _flush_uart *****************
  2459 ;; Defined at:
  2460 ;;		line 228 in file "servos.c"
  2461 ;; Parameters:    Size  Location     Type
  2462 ;;		None
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;		None
  2465 ;; Return value:  Size  Location     Type
  2466 ;;                  1    wreg      void 
  2467 ;; Registers used:
  2468 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2469 ;; Tracked objects:
  2470 ;;		On entry : 0/0
  2471 ;;		On exit  : 0/0
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2474 ;;      Params:         0       0       0       0
  2475 ;;      Locals:         0       0       0       0
  2476 ;;      Temps:          0       0       0       0
  2477 ;;      Totals:         0       0       0       0
  2478 ;;Total ram usage:        0 bytes
  2479 ;; Hardware stack levels used:    1
  2480 ;; Hardware stack levels required when called:   10
  2481 ;; This function calls:
  2482 ;;		_handle_uart
  2483 ;; This function is called by:
  2484 ;;		_main
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           	psect	text10
  2489  0010F6                     __ptext10:
  2490                           	opt stack 0
  2491  0010F6                     _flush_uart:
  2492                           	opt stack 20
  2493                           
  2494                           ;servos.c: 230: while(serial_out_count)
  2495                           
  2496                           ;incstack = 0
  2497  0010F6  D002               	goto	l135
  2498  0010F8                     
  2499                           ;servos.c: 231: {
  2500                           ;servos.c: 232: handle_uart();
  2501  0010F8  EC1A  F007         	call	_handle_uart	;wreg free
  2502  0010FC                     l135:
  2503  0010FC  5049               	movf	_serial_out_count,w,c
  2504  0010FE  104A               	iorwf	_serial_out_count+1,w,c
  2505  001100  B4D8               	btfsc	status,2,c
  2506  001102  0012               	return	
  2507  001104  D7F9               	goto	l136
  2508  001106                     __end_of_flush_uart:
  2509                           	opt stack 0
  2510                           tosu	equ	0xFFF
  2511                           tosh	equ	0xFFE
  2512                           tosl	equ	0xFFD
  2513                           pclath	equ	0xFFA
  2514                           tblptru	equ	0xFF8
  2515                           tblptrh	equ	0xFF7
  2516                           tblptrl	equ	0xFF6
  2517                           tablat	equ	0xFF5
  2518                           prodh	equ	0xFF4
  2519                           prodl	equ	0xFF3
  2520                           intcon	equ	0xFF2
  2521                           postinc0	equ	0xFEE
  2522                           wreg	equ	0xFE8
  2523                           indf1	equ	0xFE7
  2524                           postdec1	equ	0xFE5
  2525                           fsr1h	equ	0xFE2
  2526                           fsr1l	equ	0xFE1
  2527                           indf2	equ	0xFDF
  2528                           postinc2	equ	0xFDE
  2529                           fsr2h	equ	0xFDA
  2530                           fsr2l	equ	0xFD9
  2531                           status	equ	0xFD8
  2532                           
  2533 ;; *************** function _handle_uart *****************
  2534 ;; Defined at:
  2535 ;;		line 203 in file "servos.c"
  2536 ;; Parameters:    Size  Location     Type
  2537 ;;		None
  2538 ;; Auto vars:     Size  Location     Type
  2539 ;;		None
  2540 ;; Return value:  Size  Location     Type
  2541 ;;                  1    wreg      void 
  2542 ;; Registers used:
  2543 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2544 ;; Tracked objects:
  2545 ;;		On entry : 0/0
  2546 ;;		On exit  : 0/0
  2547 ;;		Unchanged: 0/0
  2548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2549 ;;      Params:         0       0       0       0
  2550 ;;      Locals:         0       0       0       0
  2551 ;;      Temps:          0       0       0       0
  2552 ;;      Totals:         0       0       0       0
  2553 ;;Total ram usage:        0 bytes
  2554 ;; Hardware stack levels used:    1
  2555 ;; Hardware stack levels required when called:    9
  2556 ;; This function calls:
  2557 ;;		Nothing
  2558 ;; This function is called by:
  2559 ;;		_flush_uart
  2560 ;;		_main
  2561 ;; This function uses a non-reentrant model
  2562 ;;
  2563                           
  2564                           	psect	text11
  2565  000E34                     __ptext11:
  2566                           	opt stack 0
  2567  000E34                     _handle_uart:
  2568                           	opt stack 21
  2569                           
  2570                           ;servos.c: 206: if(RCSTAbits.OERR)
  2571                           
  2572                           ;incstack = 0
  2573  000E34  A2AB               	btfss	4011,1,c	;volatile
  2574  000E36  D003               	goto	l128
  2575                           
  2576                           ;servos.c: 207: {
  2577                           ;servos.c: 208: RCSTAbits.OERR = 0;
  2578  000E38  92AB               	bcf	4011,1,c	;volatile
  2579                           
  2580                           ;servos.c: 209: RCSTAbits.CREN = 0;
  2581  000E3A  98AB               	bcf	4011,4,c	;volatile
  2582                           
  2583                           ;servos.c: 210: RCSTAbits.CREN = 1;
  2584  000E3C  88AB               	bsf	4011,4,c	;volatile
  2585  000E3E                     l128:
  2586                           
  2587                           ;servos.c: 211: }
  2588                           ;servos.c: 213: if(PIR1bits.TXIF)
  2589  000E3E  A89E               	btfss	3998,4,c	;volatile
  2590  000E40  0012               	return	
  2591                           
  2592                           ;servos.c: 214: {
  2593                           ;servos.c: 215: if(serial_out_count > 0)
  2594  000E42  5049               	movf	_serial_out_count,w,c
  2595  000E44  104A               	iorwf	_serial_out_count+1,w,c
  2596  000E46  B4D8               	btfsc	status,2,c
  2597  000E48  0012               	return	
  2598                           
  2599                           ;servos.c: 216: {
  2600                           ;servos.c: 217: TXREG = serial_out_buffer[serial_out_ptr2++];
  2601  000E4A  0E00               	movlw	low _serial_out_buffer
  2602  000E4C  2445               	addwf	_serial_out_ptr2,w,c
  2603  000E4E  6ED9               	movwf	fsr2l,c
  2604  000E50  0E01               	movlw	high _serial_out_buffer
  2605  000E52  2046               	addwfc	_serial_out_ptr2+1,w,c
  2606  000E54  6EDA               	movwf	fsr2h,c
  2607  000E56  50DF               	movf	indf2,w,c
  2608  000E58  6EAD               	movwf	4013,c	;volatile
  2609  000E5A  4A45               	infsnz	_serial_out_ptr2,f,c
  2610  000E5C  2A46               	incf	_serial_out_ptr2+1,f,c
  2611                           
  2612                           ;servos.c: 218: if(serial_out_ptr2 >= 256)
  2613  000E5E  0446               	decf	_serial_out_ptr2+1,w,c
  2614  000E60  A0D8               	btfss	status,0,c
  2615  000E62  D004               	goto	l131
  2616                           
  2617                           ;servos.c: 219: {
  2618                           ;servos.c: 220: serial_out_ptr2 = 0;
  2619  000E64  0E00               	movlw	0
  2620  000E66  6E46               	movwf	_serial_out_ptr2+1,c
  2621  000E68  0E00               	movlw	0
  2622  000E6A  6E45               	movwf	_serial_out_ptr2,c
  2623  000E6C                     l131:
  2624                           
  2625                           ;servos.c: 221: }
  2626                           ;servos.c: 222: serial_out_count--;
  2627  000E6C  0649               	decf	_serial_out_count,f,c
  2628  000E6E  A0D8               	btfss	status,0,c
  2629  000E70  064A               	decf	_serial_out_count+1,f,c
  2630  000E72  0012               	return	
  2631  000E74                     __end_of_handle_uart:
  2632                           	opt stack 0
  2633                           tosu	equ	0xFFF
  2634                           tosh	equ	0xFFE
  2635                           tosl	equ	0xFFD
  2636                           pclath	equ	0xFFA
  2637                           tblptru	equ	0xFF8
  2638                           tblptrh	equ	0xFF7
  2639                           tblptrl	equ	0xFF6
  2640                           tablat	equ	0xFF5
  2641                           prodh	equ	0xFF4
  2642                           prodl	equ	0xFF3
  2643                           intcon	equ	0xFF2
  2644                           postinc0	equ	0xFEE
  2645                           wreg	equ	0xFE8
  2646                           indf1	equ	0xFE7
  2647                           postdec1	equ	0xFE5
  2648                           fsr1h	equ	0xFE2
  2649                           fsr1l	equ	0xFE1
  2650                           indf2	equ	0xFDF
  2651                           postinc2	equ	0xFDE
  2652                           fsr2h	equ	0xFDA
  2653                           fsr2l	equ	0xFD9
  2654                           status	equ	0xFD8
  2655                           
  2656 ;; *************** function _delayMicroseconds *****************
  2657 ;; Defined at:
  2658 ;;		line 193 in file "servos.c"
  2659 ;; Parameters:    Size  Location     Type
  2660 ;;  x               2   21[BANK0 ] unsigned int 
  2661 ;; Auto vars:     Size  Location     Type
  2662 ;;  i               2   23[BANK0 ] unsigned int 
  2663 ;; Return value:  Size  Location     Type
  2664 ;;                  1    wreg      void 
  2665 ;; Registers used:
  2666 ;;		wreg, status,2, status,0
  2667 ;; Tracked objects:
  2668 ;;		On entry : 0/0
  2669 ;;		On exit  : 0/0
  2670 ;;		Unchanged: 0/0
  2671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2672 ;;      Params:         0       2       0       0
  2673 ;;      Locals:         0       2       0       0
  2674 ;;      Temps:          0       0       0       0
  2675 ;;      Totals:         0       4       0       0
  2676 ;;Total ram usage:        4 bytes
  2677 ;; Hardware stack levels used:    1
  2678 ;; Hardware stack levels required when called:    9
  2679 ;; This function calls:
  2680 ;;		Nothing
  2681 ;; This function is called by:
  2682 ;;		_main
  2683 ;; This function uses a non-reentrant model
  2684 ;;
  2685                           
  2686                           	psect	text12
  2687  001076                     __ptext12:
  2688                           	opt stack 0
  2689  001076                     _delayMicroseconds:
  2690                           	opt stack 21
  2691                           
  2692                           ;servos.c: 195: uint16_t i;
  2693                           ;servos.c: 196: x -= 3;
  2694                           
  2695                           ;incstack = 0
  2696  001076  0E03               	movlw	3
  2697  001078  0100               	movlb	0	; () banked
  2698  00107A  5F99               	subwf	delayMicroseconds@x& (0+255),f,b
  2699  00107C  0E00               	movlw	0
  2700  00107E  5B9A               	subwfb	(delayMicroseconds@x+1)& (0+255),f,b
  2701                           
  2702                           ; BSR set to: 0
  2703                           ;servos.c: 197: for(i = 0; i < x; i++)
  2704  001080  0E00               	movlw	0
  2705  001082  6F9C               	movwf	(delayMicroseconds@i+1)& (0+255),b
  2706  001084  0E00               	movlw	0
  2707  001086  6F9B               	movwf	delayMicroseconds@i& (0+255),b
  2708  001088  D004               	goto	l122
  2709  00108A                     l123:
  2710                           
  2711                           ; BSR set to: 0
  2712  00108A  F000               	nop		;# 
  2713  00108C  0100               	movlb	0	; () banked
  2714  00108E  4B9B               	infsnz	delayMicroseconds@i& (0+255),f,b
  2715  001090  2B9C               	incf	(delayMicroseconds@i+1)& (0+255),f,b
  2716  001092                     l122:
  2717                           
  2718                           ; BSR set to: 0
  2719                           
  2720                           ; BSR set to: 0
  2721  001092  5199               	movf	delayMicroseconds@x& (0+255),w,b
  2722  001094  5D9B               	subwf	delayMicroseconds@i& (0+255),w,b
  2723  001096  519A               	movf	(delayMicroseconds@x+1)& (0+255),w,b
  2724  001098  599C               	subwfb	(delayMicroseconds@i+1)& (0+255),w,b
  2725  00109A  B0D8               	btfsc	status,0,c
  2726  00109C  0012               	return	
  2727  00109E  D7F5               	goto	l123
  2728  0010A0                     __end_of_delayMicroseconds:
  2729                           	opt stack 0
  2730                           tosu	equ	0xFFF
  2731                           tosh	equ	0xFFE
  2732                           tosl	equ	0xFFD
  2733                           pclath	equ	0xFFA
  2734                           tblptru	equ	0xFF8
  2735                           tblptrh	equ	0xFF7
  2736                           tblptrl	equ	0xFF6
  2737                           tablat	equ	0xFF5
  2738                           prodh	equ	0xFF4
  2739                           prodl	equ	0xFF3
  2740                           intcon	equ	0xFF2
  2741                           postinc0	equ	0xFEE
  2742                           wreg	equ	0xFE8
  2743                           indf1	equ	0xFE7
  2744                           postdec1	equ	0xFE5
  2745                           fsr1h	equ	0xFE2
  2746                           fsr1l	equ	0xFE1
  2747                           indf2	equ	0xFDF
  2748                           postinc2	equ	0xFDE
  2749                           fsr2h	equ	0xFDA
  2750                           fsr2l	equ	0xFD9
  2751                           status	equ	0xFD8
  2752                           
  2753 ;; *************** function _isr1 *****************
  2754 ;; Defined at:
  2755 ;;		line 1363 in file "servos.c"
  2756 ;; Parameters:    Size  Location     Type
  2757 ;;		None
  2758 ;; Auto vars:     Size  Location     Type
  2759 ;;		None
  2760 ;; Return value:  Size  Location     Type
  2761 ;;                  1    wreg      void 
  2762 ;; Registers used:
  2763 ;;		None
  2764 ;; Tracked objects:
  2765 ;;		On entry : 0/0
  2766 ;;		On exit  : 0/0
  2767 ;;		Unchanged: 0/0
  2768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2769 ;;      Params:         0       0       0       0
  2770 ;;      Locals:         0       0       0       0
  2771 ;;      Temps:          0      21       0       0
  2772 ;;      Totals:         0      21       0       0
  2773 ;;Total ram usage:       21 bytes
  2774 ;; Hardware stack levels used:    1
  2775 ;; Hardware stack levels required when called:    8
  2776 ;; This function calls:
  2777 ;;		Nothing
  2778 ;; This function is called by:
  2779 ;;		Interrupt level 1
  2780 ;; This function uses a non-reentrant model
  2781 ;;
  2782                           
  2783                           	psect	intcodelo
  2784  000018                     __pintcodelo:
  2785                           	opt stack 0
  2786  000018                     _isr1:
  2787                           	opt stack 20
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;incstack = 0
  2791  000018  805F               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  2792  00001A  CFD8 F084          	movff	status,??_isr1
  2793  00001E  CFE8 F085          	movff	wreg,??_isr1+1
  2794  000022  CFE0 F086          	movff	bsr,??_isr1+2
  2795  000026  CFFA F087          	movff	pclath,??_isr1+3
  2796  00002A  CFFB F088          	movff	pclatu,??_isr1+4
  2797  00002E  CFE9 F089          	movff	fsr0l,??_isr1+5
  2798  000032  CFEA F08A          	movff	fsr0h,??_isr1+6
  2799  000036  CFE1 F08B          	movff	fsr1l,??_isr1+7
  2800  00003A  CFE2 F08C          	movff	fsr1h,??_isr1+8
  2801  00003E  CFD9 F08D          	movff	fsr2l,??_isr1+9
  2802  000042  CFDA F08E          	movff	fsr2h,??_isr1+10
  2803  000046  CFF3 F08F          	movff	prodl,??_isr1+11
  2804  00004A  CFF4 F090          	movff	prodh,??_isr1+12
  2805  00004E  CFF6 F091          	movff	tblptrl,??_isr1+13
  2806  000052  CFF7 F092          	movff	tblptrh,??_isr1+14
  2807  000056  CFF8 F093          	movff	tblptru,??_isr1+15
  2808  00005A  CFF5 F094          	movff	tablat,??_isr1+16
  2809  00005E  C05F  F095         	movff	btemp,??_isr1+17
  2810  000062  C060  F096         	movff	btemp+1,??_isr1+18
  2811  000066  C061  F097         	movff	btemp+2,??_isr1+19
  2812  00006A  C062  F098         	movff	btemp+3,??_isr1+20
  2813  00006E  C098  F062         	movff	??_isr1+20,btemp+3
  2814  000072  C097  F061         	movff	??_isr1+19,btemp+2
  2815  000076  C096  F060         	movff	??_isr1+18,btemp+1
  2816  00007A  C095  F05F         	movff	??_isr1+17,btemp
  2817  00007E  C094  FFF5         	movff	??_isr1+16,tablat
  2818  000082  C093  FFF8         	movff	??_isr1+15,tblptru
  2819  000086  C092  FFF7         	movff	??_isr1+14,tblptrh
  2820  00008A  C091  FFF6         	movff	??_isr1+13,tblptrl
  2821  00008E  C090  FFF4         	movff	??_isr1+12,prodh
  2822  000092  C08F  FFF3         	movff	??_isr1+11,prodl
  2823  000096  C08E  FFDA         	movff	??_isr1+10,fsr2h
  2824  00009A  C08D  FFD9         	movff	??_isr1+9,fsr2l
  2825  00009E  C08C  FFE2         	movff	??_isr1+8,fsr1h
  2826  0000A2  C08B  FFE1         	movff	??_isr1+7,fsr1l
  2827  0000A6  C08A  FFEA         	movff	??_isr1+6,fsr0h
  2828  0000AA  C089  FFE9         	movff	??_isr1+5,fsr0l
  2829  0000AE  C088  FFFB         	movff	??_isr1+4,pclatu
  2830  0000B2  C087  FFFA         	movff	??_isr1+3,pclath
  2831  0000B6  C086  FFE0         	movff	??_isr1+2,bsr
  2832  0000BA  C085  FFE8         	movff	??_isr1+1,wreg
  2833  0000BE  C084  FFD8         	movff	??_isr1,status
  2834  0000C2  905F               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  2835  0000C4  0010               	retfie	
  2836  0000C6                     __end_of_isr1:
  2837                           	opt stack 0
  2838                           tosu	equ	0xFFF
  2839                           tosh	equ	0xFFE
  2840                           tosl	equ	0xFFD
  2841                           pclatu	equ	0xFFB
  2842                           pclath	equ	0xFFA
  2843                           tblptru	equ	0xFF8
  2844                           tblptrh	equ	0xFF7
  2845                           tblptrl	equ	0xFF6
  2846                           tablat	equ	0xFF5
  2847                           prodh	equ	0xFF4
  2848                           prodl	equ	0xFF3
  2849                           intcon	equ	0xFF2
  2850                           postinc0	equ	0xFEE
  2851                           fsr0h	equ	0xFEA
  2852                           fsr0l	equ	0xFE9
  2853                           wreg	equ	0xFE8
  2854                           indf1	equ	0xFE7
  2855                           postdec1	equ	0xFE5
  2856                           fsr1h	equ	0xFE2
  2857                           fsr1l	equ	0xFE1
  2858                           bsr	equ	0xFE0
  2859                           indf2	equ	0xFDF
  2860                           postinc2	equ	0xFDE
  2861                           fsr2h	equ	0xFDA
  2862                           fsr2l	equ	0xFD9
  2863                           status	equ	0xFD8
  2864                           
  2865 ;; *************** function _isr *****************
  2866 ;; Defined at:
  2867 ;;		line 1367 in file "servos.c"
  2868 ;; Parameters:    Size  Location     Type
  2869 ;;		None
  2870 ;; Auto vars:     Size  Location     Type
  2871 ;;		None
  2872 ;; Return value:  Size  Location     Type
  2873 ;;                  1    wreg      void 
  2874 ;; Registers used:
  2875 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2876 ;; Tracked objects:
  2877 ;;		On entry : 0/0
  2878 ;;		On exit  : 0/0
  2879 ;;		Unchanged: 0/0
  2880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2881 ;;      Params:         0       0       0       0
  2882 ;;      Locals:         0       0       0       0
  2883 ;;      Temps:         20       0       0       0
  2884 ;;      Totals:        20       0       0       0
  2885 ;;Total ram usage:       20 bytes
  2886 ;; Hardware stack levels used:    1
  2887 ;; Hardware stack levels required when called:    7
  2888 ;; This function calls:
  2889 ;;		_handle_uart_rx
  2890 ;;		_handle_usb_reset
  2891 ;;		_handle_usb_stall
  2892 ;;		_handle_usb_transaction
  2893 ;; This function is called by:
  2894 ;;		Interrupt level 2
  2895 ;; This function uses a non-reentrant model
  2896 ;;
  2897                           
  2898                           	psect	intcode
  2899  000008                     __pintcode:
  2900                           	opt stack 0
  2901  000008                     _isr:
  2902                           	opt stack 20
  2903                           
  2904                           ;incstack = 0
  2905  000008  825F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2906  00000A  EF69  F003         	goto	int_func
  2907                           tosu	equ	0xFFF
  2908                           tosh	equ	0xFFE
  2909                           tosl	equ	0xFFD
  2910                           pclatu	equ	0xFFB
  2911                           pclath	equ	0xFFA
  2912                           tblptru	equ	0xFF8
  2913                           tblptrh	equ	0xFF7
  2914                           tblptrl	equ	0xFF6
  2915                           tablat	equ	0xFF5
  2916                           prodh	equ	0xFF4
  2917                           prodl	equ	0xFF3
  2918                           intcon	equ	0xFF2
  2919                           postinc0	equ	0xFEE
  2920                           fsr0h	equ	0xFEA
  2921                           fsr0l	equ	0xFE9
  2922                           wreg	equ	0xFE8
  2923                           indf1	equ	0xFE7
  2924                           postdec1	equ	0xFE5
  2925                           fsr1h	equ	0xFE2
  2926                           fsr1l	equ	0xFE1
  2927                           bsr	equ	0xFE0
  2928                           indf2	equ	0xFDF
  2929                           postinc2	equ	0xFDE
  2930                           fsr2h	equ	0xFDA
  2931                           fsr2l	equ	0xFD9
  2932                           status	equ	0xFD8
  2933                           
  2934                           	psect	intcode_body
  2935  0006D2                     __pintcode_body:
  2936                           	opt stack 20
  2937  0006D2                     int_func:
  2938                           	opt stack 20
  2939  0006D2  CFFA F024          	movff	pclath,??_isr+2
  2940  0006D6  CFFB F025          	movff	pclatu,??_isr+3
  2941  0006DA  CFE9 F026          	movff	fsr0l,??_isr+4
  2942  0006DE  CFEA F027          	movff	fsr0h,??_isr+5
  2943  0006E2  CFE1 F028          	movff	fsr1l,??_isr+6
  2944  0006E6  CFE2 F029          	movff	fsr1h,??_isr+7
  2945  0006EA  CFD9 F02A          	movff	fsr2l,??_isr+8
  2946  0006EE  CFDA F02B          	movff	fsr2h,??_isr+9
  2947  0006F2  CFF3 F02C          	movff	prodl,??_isr+10
  2948  0006F6  CFF4 F02D          	movff	prodh,??_isr+11
  2949  0006FA  CFF6 F02E          	movff	tblptrl,??_isr+12
  2950  0006FE  CFF7 F02F          	movff	tblptrh,??_isr+13
  2951  000702  CFF8 F030          	movff	tblptru,??_isr+14
  2952  000706  CFF5 F031          	movff	tablat,??_isr+15
  2953  00070A  C05F  F032         	movff	btemp,??_isr+16
  2954  00070E  C060  F033         	movff	btemp+1,??_isr+17
  2955  000712  C061  F034         	movff	btemp+2,??_isr+18
  2956  000716  C062  F035         	movff	btemp+3,??_isr+19
  2957                           
  2958                           ;servos.c: 1369: flags.interrupt_complete = 0;
  2959  00071A  9053               	bcf	_flags,0,c
  2960                           
  2961                           ;servos.c: 1370: while(!flags.interrupt_complete)
  2962  00071C  D049               	goto	i2l421
  2963  00071E                     i2l409:
  2964                           
  2965                           ;servos.c: 1371: {
  2966                           ;servos.c: 1372: flags.interrupt_complete = 1;
  2967  00071E  8053               	bsf	_flags,0,c
  2968                           
  2969                           ;servos.c: 1375: if(PIR2bits.USBIF)
  2970  000720  A4A1               	btfss	4001,2,c	;volatile
  2971  000722  D00B               	goto	i2l413
  2972                           
  2973                           ;servos.c: 1376: {
  2974                           ;servos.c: 1377: flags.interrupt_complete = 0;
  2975  000724  9053               	bcf	_flags,0,c
  2976                           
  2977                           ;servos.c: 1378: PIR2bits.USBIF = 0;
  2978  000726  94A1               	bcf	4001,2,c	;volatile
  2979                           
  2980                           ;servos.c: 1379: if(UIRbits.URSTIF)
  2981  000728  B062               	btfsc	3938,0,c	;volatile
  2982                           
  2983                           ;servos.c: 1380: {
  2984                           ;servos.c: 1381: handle_usb_reset();
  2985  00072A  EC75  F007         	call	_handle_usb_reset	;wreg free
  2986                           
  2987                           ;servos.c: 1382: }
  2988                           ;servos.c: 1384: if(UIRbits.STALLIF)
  2989  00072E  BA62               	btfsc	3938,5,c	;volatile
  2990                           
  2991                           ;servos.c: 1385: {
  2992                           ;servos.c: 1386: handle_usb_stall();
  2993  000730  EC72  F008         	call	_handle_usb_stall	;wreg free
  2994                           
  2995                           ;servos.c: 1387: }
  2996                           ;servos.c: 1389: if(UIRbits.TRNIF)
  2997  000734  B662               	btfsc	3938,3,c	;volatile
  2998                           
  2999                           ;servos.c: 1390: {
  3000                           ;servos.c: 1391: handle_usb_transaction();
  3001  000736  ECDB  F007         	call	_handle_usb_transaction	;wreg free
  3002  00073A                     i2l413:
  3003                           
  3004                           ;servos.c: 1392: }
  3005                           ;servos.c: 1393: }
  3006                           ;servos.c: 1396: if(INTCONbits.TMR0IF)
  3007  00073A  A4F2               	btfss	intcon,2,c	;volatile
  3008  00073C  D004               	goto	i2l415
  3009                           
  3010                           ;servos.c: 1397: {
  3011                           ;servos.c: 1398: INTCONbits.TMR0IF = 0;
  3012  00073E  94F2               	bcf	intcon,2,c	;volatile
  3013                           
  3014                           ;servos.c: 1399: flags.interrupt_complete = 0;
  3015  000740  9053               	bcf	_flags,0,c
  3016                           
  3017                           ;servos.c: 1400: if(LATCbits.LATC6)
  3018  000742  BC8B               	btfsc	3979,6,c	;volatile
  3019                           
  3020                           ;servos.c: 1401: {
  3021                           ;servos.c: 1402: LATCbits.LATC6 = 0;
  3022  000744  9C8B               	bcf	3979,6,c	;volatile
  3023  000746                     i2l415:
  3024                           
  3025                           ;servos.c: 1403: }
  3026                           ;servos.c: 1404: }
  3027                           ;servos.c: 1406: if(PIR1bits.TMR1IF)
  3028  000746  A09E               	btfss	3998,0,c	;volatile
  3029  000748  D004               	goto	i2l417
  3030                           
  3031                           ;servos.c: 1407: {
  3032                           ;servos.c: 1408: PIR1bits.TMR1IF = 0;
  3033  00074A  909E               	bcf	3998,0,c	;volatile
  3034                           
  3035                           ;servos.c: 1409: flags.interrupt_complete = 0;
  3036  00074C  9053               	bcf	_flags,0,c
  3037                           
  3038                           ;servos.c: 1410: if(LATCbits.LATC7)
  3039  00074E  BE8B               	btfsc	3979,7,c	;volatile
  3040                           
  3041                           ;servos.c: 1411: {
  3042                           ;servos.c: 1412: LATCbits.LATC7 = 0;
  3043  000750  9E8B               	bcf	3979,7,c	;volatile
  3044  000752                     i2l417:
  3045                           
  3046                           ;servos.c: 1413: }
  3047                           ;servos.c: 1414: }
  3048                           ;servos.c: 1416: if(PIR2bits.TMR3IF)
  3049  000752  A2A1               	btfss	4001,1,c	;volatile
  3050  000754  D02A               	goto	i2l420
  3051                           
  3052                           ;servos.c: 1417: {
  3053                           ;servos.c: 1418: PIR2bits.TMR3IF = 0;
  3054  000756  92A1               	bcf	4001,1,c	;volatile
  3055                           
  3056                           ;servos.c: 1419: TMR3 = -(48000000 / 4 / 8 / 50);
  3057  000758  0E8A               	movlw	138
  3058  00075A  6EB3               	movwf	4019,c	;volatile
  3059  00075C  0ED0               	movlw	208
  3060  00075E  6EB2               	movwf	4018,c	;volatile
  3061                           
  3062                           ;servos.c: 1420: flags.interrupt_complete = 0;
  3063  000760  9053               	bcf	_flags,0,c
  3064                           
  3065                           ;servos.c: 1422: if(pwm0 > 0)
  3066  000762  504D               	movf	_pwm0,w,c
  3067  000764  104E               	iorwf	_pwm0+1,w,c
  3068  000766  B4D8               	btfsc	status,2,c
  3069  000768  D00E               	goto	i2l419
  3070                           
  3071                           ;servos.c: 1423: {
  3072                           ;servos.c: 1424: LATCbits.LATC6 = 1;
  3073  00076A  8C8B               	bsf	3979,6,c	;volatile
  3074                           
  3075                           ;servos.c: 1425: TMR0 = -pwm0;
  3076  00076C  C04D  F022         	movff	_pwm0,??_isr
  3077  000770  C04E  F023         	movff	_pwm0+1,??_isr+1
  3078  000774  1E22               	comf	??_isr,f,c
  3079  000776  1E23               	comf	??_isr+1,f,c
  3080  000778  4A22               	infsnz	??_isr,f,c
  3081  00077A  2A23               	incf	??_isr+1,f,c
  3082  00077C  C022  FFD6         	movff	??_isr,4054	;volatile
  3083  000780  C023  FFD7         	movff	??_isr+1,4055	;volatile
  3084                           
  3085                           ;servos.c: 1426: INTCONbits.TMR0IF = 0;
  3086  000784  94F2               	bcf	intcon,2,c	;volatile
  3087  000786                     i2l419:
  3088                           
  3089                           ;servos.c: 1427: }
  3090                           ;servos.c: 1429: if(pwm1 > 0)
  3091  000786  504B               	movf	_pwm1,w,c
  3092  000788  104C               	iorwf	_pwm1+1,w,c
  3093  00078A  B4D8               	btfsc	status,2,c
  3094  00078C  D00E               	goto	i2l420
  3095                           
  3096                           ;servos.c: 1430: {
  3097                           ;servos.c: 1431: LATCbits.LATC7 = 1;
  3098  00078E  8E8B               	bsf	3979,7,c	;volatile
  3099                           
  3100                           ;servos.c: 1432: TMR1 = -pwm1;
  3101  000790  C04B  F022         	movff	_pwm1,??_isr
  3102  000794  C04C  F023         	movff	_pwm1+1,??_isr+1
  3103  000798  1E22               	comf	??_isr,f,c
  3104  00079A  1E23               	comf	??_isr+1,f,c
  3105  00079C  4A22               	infsnz	??_isr,f,c
  3106  00079E  2A23               	incf	??_isr+1,f,c
  3107  0007A0  C022  FFCE         	movff	??_isr,4046	;volatile
  3108  0007A4  C023  FFCF         	movff	??_isr+1,4047	;volatile
  3109                           
  3110                           ;servos.c: 1433: PIR1bits.TMR1IF = 0;
  3111  0007A8  909E               	bcf	3998,0,c	;volatile
  3112  0007AA                     i2l420:
  3113                           
  3114                           ;servos.c: 1434: }
  3115                           ;servos.c: 1435: }
  3116                           ;servos.c: 1437: if(PIR1bits.RCIF)
  3117  0007AA  BA9E               	btfsc	3998,5,c	;volatile
  3118                           
  3119                           ;servos.c: 1438: {
  3120                           ;servos.c: 1440: handle_uart_rx();
  3121  0007AC  EC96  F008         	call	_handle_uart_rx	;wreg free
  3122  0007B0                     i2l421:
  3123  0007B0  A053               	btfss	_flags,0,c
  3124  0007B2  D7B5               	goto	i2l409
  3125  0007B4  C035  F062         	movff	??_isr+19,btemp+3
  3126  0007B8  C034  F061         	movff	??_isr+18,btemp+2
  3127  0007BC  C033  F060         	movff	??_isr+17,btemp+1
  3128  0007C0  C032  F05F         	movff	??_isr+16,btemp
  3129  0007C4  C031  FFF5         	movff	??_isr+15,tablat
  3130  0007C8  C030  FFF8         	movff	??_isr+14,tblptru
  3131  0007CC  C02F  FFF7         	movff	??_isr+13,tblptrh
  3132  0007D0  C02E  FFF6         	movff	??_isr+12,tblptrl
  3133  0007D4  C02D  FFF4         	movff	??_isr+11,prodh
  3134  0007D8  C02C  FFF3         	movff	??_isr+10,prodl
  3135  0007DC  C02B  FFDA         	movff	??_isr+9,fsr2h
  3136  0007E0  C02A  FFD9         	movff	??_isr+8,fsr2l
  3137  0007E4  C029  FFE2         	movff	??_isr+7,fsr1h
  3138  0007E8  C028  FFE1         	movff	??_isr+6,fsr1l
  3139  0007EC  C027  FFEA         	movff	??_isr+5,fsr0h
  3140  0007F0  C026  FFE9         	movff	??_isr+4,fsr0l
  3141  0007F4  C025  FFFB         	movff	??_isr+3,pclatu
  3142  0007F8  C024  FFFA         	movff	??_isr+2,pclath
  3143  0007FC  925F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3144  0007FE  0011               	retfie		f
  3145  000800                     __end_of_isr:
  3146                           	opt stack 0
  3147                           tosu	equ	0xFFF
  3148                           tosh	equ	0xFFE
  3149                           tosl	equ	0xFFD
  3150                           pclatu	equ	0xFFB
  3151                           pclath	equ	0xFFA
  3152                           tblptru	equ	0xFF8
  3153                           tblptrh	equ	0xFF7
  3154                           tblptrl	equ	0xFF6
  3155                           tablat	equ	0xFF5
  3156                           prodh	equ	0xFF4
  3157                           prodl	equ	0xFF3
  3158                           intcon	equ	0xFF2
  3159                           postinc0	equ	0xFEE
  3160                           fsr0h	equ	0xFEA
  3161                           fsr0l	equ	0xFE9
  3162                           wreg	equ	0xFE8
  3163                           indf1	equ	0xFE7
  3164                           postdec1	equ	0xFE5
  3165                           fsr1h	equ	0xFE2
  3166                           fsr1l	equ	0xFE1
  3167                           bsr	equ	0xFE0
  3168                           indf2	equ	0xFDF
  3169                           postinc2	equ	0xFDE
  3170                           fsr2h	equ	0xFDA
  3171                           fsr2l	equ	0xFD9
  3172                           status	equ	0xFD8
  3173                           
  3174 ;; *************** function _handle_usb_transaction *****************
  3175 ;; Defined at:
  3176 ;;		line 1119 in file "servos.c"
  3177 ;; Parameters:    Size  Location     Type
  3178 ;;		None
  3179 ;; Auto vars:     Size  Location     Type
  3180 ;;		None
  3181 ;; Return value:  Size  Location     Type
  3182 ;;                  1    wreg      void 
  3183 ;; Registers used:
  3184 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3185 ;; Tracked objects:
  3186 ;;		On entry : 0/0
  3187 ;;		On exit  : 0/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3190 ;;      Params:         0       0       0       0
  3191 ;;      Locals:         0       0       0       0
  3192 ;;      Temps:          2       0       0       0
  3193 ;;      Totals:         2       0       0       0
  3194 ;;Total ram usage:        2 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; Hardware stack levels required when called:    6
  3197 ;; This function calls:
  3198 ;;		_handle_usb_ctrl_input
  3199 ;;		_handle_usb_ctrl_output
  3200 ;; This function is called by:
  3201 ;;		_isr
  3202 ;; This function uses a non-reentrant model
  3203 ;;
  3204                           
  3205                           	psect	text15
  3206  000FB6                     __ptext15:
  3207                           	opt stack 0
  3208  000FB6                     _handle_usb_transaction:
  3209                           	opt stack 20
  3210                           
  3211                           ;servos.c: 1123: if(USTAT == (0x00 << 3) | (0 << 2))
  3212                           
  3213                           ;incstack = 0
  3214  000FB6  5063               	movf	3939,w,c	;volatile
  3215  000FB8  A4D8               	btfss	status,2,c
  3216  000FBA  D003               	goto	i2l343
  3217                           
  3218                           ;servos.c: 1124: {
  3219                           ;servos.c: 1125: handle_usb_ctrl_output();
  3220  000FBC  ECD5  F005         	call	_handle_usb_ctrl_output	;wreg free
  3221                           
  3222                           ;servos.c: 1126: }
  3223  000FC0  D011               	goto	i2l345
  3224  000FC2                     i2l343:
  3225                           
  3226                           ;servos.c: 1127: else
  3227                           ;servos.c: 1128: if(USTAT == (0x00 << 3) | (1 << 2))
  3228  000FC2  5063               	movf	3939,w,c	;volatile
  3229  000FC4  A4D8               	btfss	status,2,c
  3230  000FC6  D002               	goto	i2u165_40
  3231  000FC8  0E01               	movlw	1
  3232  000FCA  D001               	goto	i2u166_40
  3233  000FCC                     i2u165_40:
  3234  000FCC  0E00               	movlw	0
  3235  000FCE                     i2u166_40:
  3236  000FCE  6E20               	movwf	??_handle_usb_transaction& (0+255),c
  3237  000FD0  6A21               	clrf	(??_handle_usb_transaction+1)& (0+255),c
  3238  000FD2  0E04               	movlw	4
  3239  000FD4  1220               	iorwf	??_handle_usb_transaction,f,c
  3240  000FD6  0E00               	movlw	0
  3241  000FD8  1221               	iorwf	??_handle_usb_transaction+1,f,c
  3242  000FDA  5020               	movf	??_handle_usb_transaction,w,c
  3243  000FDC  1021               	iorwf	??_handle_usb_transaction+1,w,c
  3244  000FDE  A4D8               	btfss	status,2,c
  3245                           
  3246                           ;servos.c: 1129: {
  3247                           ;servos.c: 1130: handle_usb_ctrl_input();
  3248  000FE0  EC07  F006         	call	_handle_usb_ctrl_input	;wreg free
  3249  000FE4                     i2l345:
  3250                           
  3251                           ;servos.c: 1131: }
  3252                           ;servos.c: 1137: UIRbits.TRNIF = 0;
  3253  000FE4  9662               	bcf	3938,3,c	;volatile
  3254  000FE6  0012               	return		;funcret
  3255  000FE8                     __end_of_handle_usb_transaction:
  3256                           	opt stack 0
  3257                           tosu	equ	0xFFF
  3258                           tosh	equ	0xFFE
  3259                           tosl	equ	0xFFD
  3260                           pclatu	equ	0xFFB
  3261                           pclath	equ	0xFFA
  3262                           tblptru	equ	0xFF8
  3263                           tblptrh	equ	0xFF7
  3264                           tblptrl	equ	0xFF6
  3265                           tablat	equ	0xFF5
  3266                           prodh	equ	0xFF4
  3267                           prodl	equ	0xFF3
  3268                           intcon	equ	0xFF2
  3269                           postinc0	equ	0xFEE
  3270                           fsr0h	equ	0xFEA
  3271                           fsr0l	equ	0xFE9
  3272                           wreg	equ	0xFE8
  3273                           indf1	equ	0xFE7
  3274                           postdec1	equ	0xFE5
  3275                           fsr1h	equ	0xFE2
  3276                           fsr1l	equ	0xFE1
  3277                           bsr	equ	0xFE0
  3278                           indf2	equ	0xFDF
  3279                           postinc2	equ	0xFDE
  3280                           fsr2h	equ	0xFDA
  3281                           fsr2l	equ	0xFD9
  3282                           status	equ	0xFD8
  3283                           
  3284 ;; *************** function _handle_usb_ctrl_output *****************
  3285 ;; Defined at:
  3286 ;;		line 1024 in file "servos.c"
  3287 ;; Parameters:    Size  Location     Type
  3288 ;;		None
  3289 ;; Auto vars:     Size  Location     Type
  3290 ;;  temp            1   30[COMRAM] unsigned char 
  3291 ;; Return value:  Size  Location     Type
  3292 ;;                  1    wreg      void 
  3293 ;; Registers used:
  3294 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3295 ;; Tracked objects:
  3296 ;;		On entry : 0/0
  3297 ;;		On exit  : 0/0
  3298 ;;		Unchanged: 0/0
  3299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3300 ;;      Params:         0       0       0       0
  3301 ;;      Locals:         1       0       0       0
  3302 ;;      Temps:          0       0       0       0
  3303 ;;      Totals:         1       0       0       0
  3304 ;;Total ram usage:        1 bytes
  3305 ;; Hardware stack levels used:    1
  3306 ;; Hardware stack levels required when called:    5
  3307 ;; This function calls:
  3308 ;;		_handle_usb_ctrl_out
  3309 ;;		_handle_usb_ctrl_setup
  3310 ;;		_usb_prepare_setup
  3311 ;;		i2_print_text
  3312 ;; This function is called by:
  3313 ;;		_handle_usb_transaction
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           	psect	text16
  3318  000BAA                     __ptext16:
  3319                           	opt stack 0
  3320  000BAA                     _handle_usb_ctrl_output:
  3321                           	opt stack 20
  3322                           
  3323                           ;servos.c: 1026: uint8_t temp;
  3324                           ;servos.c: 1027: temp = *(EP0_OUT);
  3325                           
  3326                           ;incstack = 0
  3327  000BAA  C0AE  FFD9         	movff	_EP0_OUT,fsr2l
  3328  000BAE  C0AF  FFDA         	movff	_EP0_OUT+1,fsr2h
  3329  000BB2  50DF               	movf	indf2,w,c
  3330  000BB4  6E1F               	movwf	handle_usb_ctrl_output@temp,c
  3331                           
  3332                           ;servos.c: 1028: temp &= 0b00111100;
  3333  000BB6  0E3C               	movlw	60
  3334  000BB8  161F               	andwf	handle_usb_ctrl_output@temp,f,c
  3335                           
  3336                           ;servos.c: 1038: if(temp == (0b00001101 << 2))
  3337  000BBA  0E34               	movlw	52
  3338  000BBC  181F               	xorwf	handle_usb_ctrl_output@temp,w,c
  3339  000BBE  A4D8               	btfss	status,2,c
  3340  000BC0  D003               	goto	i2l325
  3341                           
  3342                           ;servos.c: 1039: {
  3343                           ;servos.c: 1041: handle_usb_ctrl_setup();
  3344  000BC2  EC81  F001         	call	_handle_usb_ctrl_setup	;wreg free
  3345                           
  3346                           ;servos.c: 1042: }
  3347  000BC6  0012               	return	
  3348  000BC8                     i2l325:
  3349                           
  3350                           ;servos.c: 1043: else
  3351                           ;servos.c: 1044: {
  3352                           ;servos.c: 1047: if(ctrl_trf_state == 2)
  3353  000BC8  0E02               	movlw	2
  3354  000BCA  1850               	xorwf	_ctrl_trf_state,w,c
  3355  000BCC  A4D8               	btfss	status,2,c
  3356  000BCE  D01C               	goto	i2l327
  3357                           
  3358                           ;servos.c: 1048: {
  3359                           ;servos.c: 1049: print_text("ctrl_output 3\n");
  3360  000BD0  0EE6               	movlw	low STR_7
  3361  000BD2  6E02               	movwf	i2print_text@s,c
  3362  000BD4  0E3F               	movlw	high STR_7
  3363  000BD6  6E03               	movwf	i2print_text@s+1,c
  3364  000BD8  EC24  F008         	call	i2_print_text	;wreg free
  3365                           
  3366                           ;servos.c: 1050: handle_usb_ctrl_out();
  3367  000BDC  ECE6  F004         	call	_handle_usb_ctrl_out	;wreg free
  3368                           
  3369                           ;servos.c: 1052: if(*(EP0_OUT) & (1 << 6))
  3370  000BE0  C0AE  FFD9         	movff	_EP0_OUT,fsr2l
  3371  000BE4  C0AF  FFDA         	movff	_EP0_OUT+1,fsr2h
  3372  000BE8  0100               	movlb	0	; () banked
  3373  000BEA  ACDF               	btfss	indf2,6,c
  3374  000BEC  D006               	goto	i2l328
  3375                           
  3376                           ; BSR set to: 0
  3377                           ;servos.c: 1053: {
  3378                           ;servos.c: 1055: *(EP0_OUT) = (0x80 | 0x00 | 0x08);
  3379  000BEE  C0AE  FFD9         	movff	_EP0_OUT,fsr2l
  3380  000BF2  C0AF  FFDA         	movff	_EP0_OUT+1,fsr2h
  3381  000BF6  0E88               	movlw	136
  3382  000BF8  6EDF               	movwf	indf2,c
  3383  000BFA                     i2l328:
  3384                           
  3385                           ; BSR set to: 0
  3386                           ;servos.c: 1056: }
  3387                           ;servos.c: 1058: {
  3388                           ;servos.c: 1059: *(EP0_OUT) = (0x80 | 0x40 | 0x08);
  3389  000BFA  C0AE  FFD9         	movff	_EP0_OUT,fsr2l
  3390  000BFE  C0AF  FFDA         	movff	_EP0_OUT+1,fsr2h
  3391  000C02  0EC8               	movlw	200
  3392  000C04  6EDF               	movwf	indf2,c
  3393                           
  3394                           ;servos.c: 1060: }
  3395                           ;servos.c: 1061: }
  3396  000C06  0012               	return	
  3397  000C08                     i2l327:
  3398                           
  3399                           ;servos.c: 1062: else
  3400                           ;servos.c: 1063: {
  3401                           ;servos.c: 1065: usb_prepare_setup();
  3402                           
  3403                           ; BSR set to: 0
  3404  000C08  EC60  F006         	call	_usb_prepare_setup	;wreg free
  3405  000C0C  0012               	return	
  3406  000C0E                     __end_of_handle_usb_ctrl_output:
  3407                           	opt stack 0
  3408                           tosu	equ	0xFFF
  3409                           tosh	equ	0xFFE
  3410                           tosl	equ	0xFFD
  3411                           pclatu	equ	0xFFB
  3412                           pclath	equ	0xFFA
  3413                           tblptru	equ	0xFF8
  3414                           tblptrh	equ	0xFF7
  3415                           tblptrl	equ	0xFF6
  3416                           tablat	equ	0xFF5
  3417                           prodh	equ	0xFF4
  3418                           prodl	equ	0xFF3
  3419                           intcon	equ	0xFF2
  3420                           postinc0	equ	0xFEE
  3421                           fsr0h	equ	0xFEA
  3422                           fsr0l	equ	0xFE9
  3423                           wreg	equ	0xFE8
  3424                           indf1	equ	0xFE7
  3425                           postdec1	equ	0xFE5
  3426                           fsr1h	equ	0xFE2
  3427                           fsr1l	equ	0xFE1
  3428                           bsr	equ	0xFE0
  3429                           indf2	equ	0xFDF
  3430                           postinc2	equ	0xFDE
  3431                           fsr2h	equ	0xFDA
  3432                           fsr2l	equ	0xFD9
  3433                           status	equ	0xFD8
  3434                           
  3435 ;; *************** function _handle_usb_ctrl_setup *****************
  3436 ;; Defined at:
  3437 ;;		line 871 in file "servos.c"
  3438 ;; Parameters:    Size  Location     Type
  3439 ;;		None
  3440 ;; Auto vars:     Size  Location     Type
  3441 ;;  length          2   27[COMRAM] unsigned int 
  3442 ;;  command         1   26[COMRAM] unsigned char 
  3443 ;;  length          2   24[COMRAM] unsigned int 
  3444 ;;  type            1   29[COMRAM] unsigned char 
  3445 ;; Return value:  Size  Location     Type
  3446 ;;                  1    wreg      void 
  3447 ;; Registers used:
  3448 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3449 ;; Tracked objects:
  3450 ;;		On entry : 0/0
  3451 ;;		On exit  : 0/0
  3452 ;;		Unchanged: 0/0
  3453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3454 ;;      Params:         0       0       0       0
  3455 ;;      Locals:         6       0       0       0
  3456 ;;      Temps:          5       0       0       0
  3457 ;;      Totals:        11       0       0       0
  3458 ;;Total ram usage:       11 bytes
  3459 ;; Hardware stack levels used:    1
  3460 ;; Hardware stack levels required when called:    4
  3461 ;; This function calls:
  3462 ;;		_handle_usb_ctrl_in
  3463 ;;		_usb_check_std_request
  3464 ;; This function is called by:
  3465 ;;		_handle_usb_ctrl_output
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           	psect	text17
  3470  000302                     __ptext17:
  3471                           	opt stack 0
  3472  000302                     _handle_usb_ctrl_setup:
  3473                           	opt stack 20
  3474                           
  3475                           ;servos.c: 873: ctrl_trf_state = 0;
  3476                           
  3477                           ;incstack = 0
  3478  000302  0E00               	movlw	0
  3479  000304  6E50               	movwf	_ctrl_trf_state,c
  3480                           
  3481                           ;servos.c: 874: ctrl_trf_session_owner = 0;
  3482  000306  0E00               	movlw	0
  3483  000308  6E4F               	movwf	_ctrl_trf_session_owner,c
  3484                           
  3485                           ;servos.c: 875: data_count = 0;
  3486  00030A  0E00               	movlw	0
  3487  00030C  6E42               	movwf	_data_count+1,c
  3488  00030E  0E00               	movlw	0
  3489  000310  6E41               	movwf	_data_count,c
  3490                           
  3491                           ;servos.c: 891: uint8_t type = setup_out_packet[0];
  3492  000312  C059  FFD9         	movff	_setup_out_packet,fsr2l
  3493  000316  C05A  FFDA         	movff	_setup_out_packet+1,fsr2h
  3494  00031A  50DF               	movf	indf2,w,c
  3495  00031C  6E1E               	movwf	handle_usb_ctrl_setup@type,c
  3496                           
  3497                           ;servos.c: 892: type &= 0b01100000;
  3498  00031E  0E60               	movlw	96
  3499  000320  161E               	andwf	handle_usb_ctrl_setup@type,f,c
  3500                           
  3501                           ;servos.c: 898: if(type == 0x00)
  3502  000322  501E               	movf	handle_usb_ctrl_setup@type,w,c
  3503  000324  A4D8               	btfss	status,2,c
  3504  000326  D003               	goto	i2l303
  3505                           
  3506                           ;servos.c: 899: {
  3507                           ;servos.c: 900: usb_check_std_request();
  3508  000328  EC83  F002         	call	_usb_check_std_request	;wreg free
  3509                           
  3510                           ;servos.c: 901: }
  3511  00032C  D034               	goto	i2l310
  3512  00032E                     i2l303:
  3513                           
  3514                           ;servos.c: 902: else
  3515                           ;servos.c: 903: if(type == 0x20)
  3516  00032E  0E20               	movlw	32
  3517  000330  181E               	xorwf	handle_usb_ctrl_setup@type,w,c
  3518  000332  A4D8               	btfss	status,2,c
  3519  000334  D030               	goto	i2l310
  3520                           
  3521                           ;servos.c: 904: {
  3522                           ;servos.c: 906: uint16_t length = setup_out_packet[6] |
  3523                           ;servos.c: 907: (setup_out_packet[7] << 8);
  3524  000336  EE20 F007          	lfsr	2,7
  3525  00033A  5059               	movf	_setup_out_packet,w,c
  3526  00033C  26D9               	addwf	fsr2l,f,c
  3527  00033E  505A               	movf	_setup_out_packet+1,w,c
  3528  000340  22DA               	addwfc	fsr2h,f,c
  3529  000342  50DF               	movf	indf2,w,c
  3530  000344  6E14               	movwf	??_handle_usb_ctrl_setup& (0+255),c
  3531  000346  5014               	movf	??_handle_usb_ctrl_setup,w,c
  3532  000348  6E16               	movwf	(??_handle_usb_ctrl_setup+2)& (0+255),c
  3533  00034A  6A15               	clrf	(??_handle_usb_ctrl_setup+1)& (0+255),c
  3534  00034C  EE20 F006          	lfsr	2,6
  3535  000350  5059               	movf	_setup_out_packet,w,c
  3536  000352  26D9               	addwf	fsr2l,f,c
  3537  000354  505A               	movf	_setup_out_packet+1,w,c
  3538  000356  22DA               	addwfc	fsr2h,f,c
  3539  000358  50DF               	movf	indf2,w,c
  3540  00035A  6E17               	movwf	(??_handle_usb_ctrl_setup+3)& (0+255),c
  3541  00035C  6A18               	clrf	(??_handle_usb_ctrl_setup+4)& (0+255),c
  3542  00035E  5015               	movf	??_handle_usb_ctrl_setup+1,w,c
  3543  000360  1017               	iorwf	??_handle_usb_ctrl_setup+3,w,c
  3544  000362  6E19               	movwf	handle_usb_ctrl_setup@length,c
  3545  000364  5016               	movf	??_handle_usb_ctrl_setup+2,w,c
  3546  000366  1018               	iorwf	??_handle_usb_ctrl_setup+4,w,c
  3547  000368  6E1A               	movwf	handle_usb_ctrl_setup@length+1,c
  3548                           
  3549                           ;servos.c: 908: if(length > 0)
  3550  00036A  5019               	movf	handle_usb_ctrl_setup@length,w,c
  3551  00036C  101A               	iorwf	handle_usb_ctrl_setup@length+1,w,c
  3552  00036E  A4D8               	btfss	status,2,c
  3553  000370  D012               	goto	i2l310
  3554                           
  3555                           ;servos.c: 913: else
  3556                           ;servos.c: 914: {
  3557                           ;servos.c: 915: uint8_t command = setup_out_packet[1];
  3558                           
  3559                           ;servos.c: 909: {
  3560                           ;servos.c: 912: }
  3561  000372  EE20 F001          	lfsr	2,1
  3562  000376  5059               	movf	_setup_out_packet,w,c
  3563  000378  26D9               	addwf	fsr2l,f,c
  3564  00037A  505A               	movf	_setup_out_packet+1,w,c
  3565  00037C  22DA               	addwfc	fsr2h,f,c
  3566  00037E  50DF               	movf	indf2,w,c
  3567  000380  6E1B               	movwf	handle_usb_ctrl_setup@command,c
  3568                           
  3569                           ;servos.c: 936: }
  3570                           
  3571                           ;servos.c: 935: break;
  3572                           
  3573                           ;servos.c: 933: case 0x23U:
  3574                           
  3575                           ;servos.c: 932: break;
  3576                           
  3577                           ;servos.c: 930: case 0x22U:
  3578                           
  3579                           ;servos.c: 929: break;
  3580                           
  3581                           ;servos.c: 927: case 0x21U:
  3582                           
  3583                           ;servos.c: 926: break;
  3584                           
  3585                           ;servos.c: 923: {
  3586                           ;servos.c: 924: case 0x20U:
  3587                           
  3588                           ;servos.c: 922: switch(command)
  3589  000382  501B               	movf	handle_usb_ctrl_setup@command,w,c
  3590                           
  3591                           ; Switch size 1, requested type "space"
  3592                           ; Number of cases is 4, Range of values is 32 to 35
  3593                           ; switch strategies available:
  3594                           ; Name         Instructions Cycles
  3595                           ; simple_byte           13     7 (average)
  3596                           ;	Chosen strategy is simple_byte
  3597  000384  0A20               	xorlw	32	; case 32
  3598  000386  B4D8               	btfsc	status,2,c
  3599  000388  D006               	goto	i2l310
  3600  00038A  0A01               	xorlw	1	; case 33
  3601  00038C  B4D8               	btfsc	status,2,c
  3602  00038E  D003               	goto	i2l310
  3603  000390  0A03               	xorlw	3	; case 34
  3604  000392  A4D8               	btfss	status,2,c
  3605  000394  0A01               	xorlw	1	; case 35
  3606  000396                     i2l310:
  3607                           
  3608                           ;servos.c: 946: }
  3609                           ;servos.c: 947: }
  3610                           ;servos.c: 950: UCONbits.PKTDIS = 0;
  3611  000396  9864               	bcf	3940,4,c	;volatile
  3612                           
  3613                           ;servos.c: 952: if(ctrl_trf_session_owner == 0)
  3614  000398  504F               	movf	_ctrl_trf_session_owner,w,c
  3615  00039A  A4D8               	btfss	status,2,c
  3616  00039C  D026               	goto	i2l314
  3617                           
  3618                           ;servos.c: 953: {
  3619                           ;servos.c: 957: *(EP0_OUT + 1) = (8); *(EP0_OUT + 2) = ((uint16_t)(setup_out_packet) & 0
      +                          xff); *(EP0_OUT + 3) = ((uint16_t)(setup_out_packet) >> 8); *(EP0_OUT) = (0x80 | 0x04);;
  3620  00039E  0100               	movlb	0	; () banked
  3621  0003A0  EE20 F001          	lfsr	2,1
  3622  0003A4  51AE               	movf	_EP0_OUT& (0+255),w,b
  3623  0003A6  26D9               	addwf	fsr2l,f,c
  3624  0003A8  51AF               	movf	(_EP0_OUT+1)& (0+255),w,b
  3625  0003AA  22DA               	addwfc	fsr2h,f,c
  3626  0003AC  0E08               	movlw	8
  3627  0003AE  6EDF               	movwf	indf2,c
  3628  0003B0  EE20 F002          	lfsr	2,2
  3629  0003B4  51AE               	movf	_EP0_OUT& (0+255),w,b
  3630  0003B6  26D9               	addwf	fsr2l,f,c
  3631  0003B8  51AF               	movf	(_EP0_OUT+1)& (0+255),w,b
  3632  0003BA  22DA               	addwfc	fsr2h,f,c
  3633  0003BC  C059  FFDF         	movff	_setup_out_packet,indf2
  3634  0003C0  EE20 F003          	lfsr	2,3
  3635  0003C4  51AE               	movf	_EP0_OUT& (0+255),w,b
  3636  0003C6  26D9               	addwf	fsr2l,f,c
  3637  0003C8  51AF               	movf	(_EP0_OUT+1)& (0+255),w,b
  3638  0003CA  22DA               	addwfc	fsr2h,f,c
  3639  0003CC  505A               	movf	_setup_out_packet+1,w,c
  3640  0003CE  6EDF               	movwf	indf2,c
  3641                           
  3642                           ; BSR set to: 0
  3643  0003D0  C0AE  FFD9         	movff	_EP0_OUT,fsr2l
  3644  0003D4  C0AF  FFDA         	movff	_EP0_OUT+1,fsr2h
  3645  0003D8  0E84               	movlw	132
  3646  0003DA  6EDF               	movwf	indf2,c
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;servos.c: 958: *(EP0_IN) = (0x80 | 0x04);;
  3650  0003DC  C05D  FFD9         	movff	_EP0_IN,fsr2l
  3651  0003E0  C05E  FFDA         	movff	_EP0_IN+1,fsr2h
  3652  0003E4  0E84               	movlw	132
  3653  0003E6  6EDF               	movwf	indf2,c
  3654                           
  3655                           ; BSR set to: 0
  3656                           ;servos.c: 960: }
  3657                           
  3658                           ; BSR set to: 0
  3659                           ;servos.c: 959: return;
  3660  0003E8  0012               	return	
  3661  0003EA                     i2l314:
  3662                           
  3663                           ;servos.c: 961: else
  3664                           ;servos.c: 962: {
  3665                           ;servos.c: 965: if(setup_out_packet[0] & (1 << 7))
  3666                           
  3667                           ; BSR set to: 0
  3668  0003EA  C059  FFD9         	movff	_setup_out_packet,fsr2l
  3669  0003EE  C05A  FFDA         	movff	_setup_out_packet+1,fsr2h
  3670  0003F2  AEDF               	btfss	indf2,7,c
  3671  0003F4  D058               	goto	i2l317
  3672                           
  3673                           ;servos.c: 966: {
  3674                           ;servos.c: 970: uint16_t length = setup_out_packet[6] |
  3675                           ;servos.c: 971: (((uint16_t)setup_out_packet[7]) << 8);
  3676  0003F6  EE20 F006          	lfsr	2,6
  3677  0003FA  5059               	movf	_setup_out_packet,w,c
  3678  0003FC  26D9               	addwf	fsr2l,f,c
  3679  0003FE  505A               	movf	_setup_out_packet+1,w,c
  3680  000400  22DA               	addwfc	fsr2h,f,c
  3681  000402  50DF               	movf	indf2,w,c
  3682  000404  6E14               	movwf	??_handle_usb_ctrl_setup& (0+255),c
  3683  000406  EE20 F007          	lfsr	2,7
  3684  00040A  5059               	movf	_setup_out_packet,w,c
  3685  00040C  26D9               	addwf	fsr2l,f,c
  3686  00040E  505A               	movf	_setup_out_packet+1,w,c
  3687  000410  22DA               	addwfc	fsr2h,f,c
  3688  000412  50DF               	movf	indf2,w,c
  3689  000414  6E15               	movwf	(??_handle_usb_ctrl_setup+1)& (0+255),c
  3690  000416  5014               	movf	??_handle_usb_ctrl_setup,w,c
  3691  000418  6E1C               	movwf	handle_usb_ctrl_setup@length_717,c
  3692  00041A  C015  F01D         	movff	??_handle_usb_ctrl_setup+1,handle_usb_ctrl_setup@length_717+1
  3693                           
  3694                           ;servos.c: 972: if(length < data_count)
  3695  00041E  5041               	movf	_data_count,w,c
  3696  000420  5C1C               	subwf	handle_usb_ctrl_setup@length_717,w,c
  3697  000422  5042               	movf	_data_count+1,w,c
  3698  000424  581D               	subwfb	handle_usb_ctrl_setup@length_717+1,w,c
  3699  000426  B0D8               	btfsc	status,0,c
  3700  000428  D004               	goto	i2l318
  3701                           
  3702                           ;servos.c: 973: {
  3703                           ;servos.c: 974: data_count = length;
  3704  00042A  C01C  F041         	movff	handle_usb_ctrl_setup@length_717,_data_count
  3705  00042E  C01D  F042         	movff	handle_usb_ctrl_setup@length_717+1,_data_count+1
  3706  000432                     i2l318:
  3707                           
  3708                           ;servos.c: 975: }
  3709                           ;servos.c: 977: handle_usb_ctrl_in();
  3710  000432  EC46  F005         	call	_handle_usb_ctrl_in	;wreg free
  3711                           
  3712                           ;servos.c: 978: ctrl_trf_state = 1;
  3713  000436  0E01               	movlw	1
  3714  000438  6E50               	movwf	_ctrl_trf_state,c
  3715                           
  3716                           ;servos.c: 980: *(EP0_OUT + 1) = (8); *(EP0_OUT + 2) = ((uint16_t)(setup_out_packet) & 0
      +                          xff); *(EP0_OUT + 3) = ((uint16_t)(setup_out_packet) >> 8); *(EP0_OUT) = (0x80);;
  3717  00043A  0100               	movlb	0	; () banked
  3718  00043C  EE20 F001          	lfsr	2,1
  3719  000440  51AE               	movf	_EP0_OUT& (0+255),w,b
  3720  000442  26D9               	addwf	fsr2l,f,c
  3721  000444  51AF               	movf	(_EP0_OUT+1)& (0+255),w,b
  3722  000446  22DA               	addwfc	fsr2h,f,c
  3723  000448  0E08               	movlw	8
  3724  00044A  6EDF               	movwf	indf2,c
  3725                           
  3726                           ; BSR set to: 0
  3727  00044C  EE20 F002          	lfsr	2,2
  3728  000450  51AE               	movf	_EP0_OUT& (0+255),w,b
  3729  000452  26D9               	addwf	fsr2l,f,c
  3730  000454  51AF               	movf	(_EP0_OUT+1)& (0+255),w,b
  3731  000456  22DA               	addwfc	fsr2h,f,c
  3732  000458  C059  FFDF         	movff	_setup_out_packet,indf2
  3733                           
  3734                           ; BSR set to: 0
  3735  00045C  EE20 F003          	lfsr	2,3
  3736  000460  51AE               	movf	_EP0_OUT& (0+255),w,b
  3737  000462  26D9               	addwf	fsr2l,f,c
  3738  000464  51AF               	movf	(_EP0_OUT+1)& (0+255),w,b
  3739  000466  22DA               	addwfc	fsr2h,f,c
  3740  000468  505A               	movf	_setup_out_packet+1,w,c
  3741  00046A  6EDF               	movwf	indf2,c
  3742                           
  3743                           ; BSR set to: 0
  3744  00046C  C0AE  FFD9         	movff	_EP0_OUT,fsr2l
  3745  000470  C0AF  FFDA         	movff	_EP0_OUT+1,fsr2h
  3746  000474  0E80               	movlw	128
  3747  000476  6EDF               	movwf	indf2,c
  3748                           
  3749                           ; BSR set to: 0
  3750                           ;servos.c: 982: *(EP0_IN + 2) = ((uint16_t)(setup_in_packet) & 0xff); *(EP0_IN + 3) = ((
      +                          uint16_t)(setup_in_packet) >> 8);;
  3751  000478  EE20 F002          	lfsr	2,2
  3752  00047C  505D               	movf	_EP0_IN,w,c
  3753  00047E  26D9               	addwf	fsr2l,f,c
  3754  000480  505E               	movf	_EP0_IN+1,w,c
  3755  000482  22DA               	addwfc	fsr2h,f,c
  3756  000484  C057  FFDF         	movff	_setup_in_packet,indf2
  3757                           
  3758                           ; BSR set to: 0
  3759  000488  EE20 F003          	lfsr	2,3
  3760  00048C  505D               	movf	_EP0_IN,w,c
  3761  00048E  26D9               	addwf	fsr2l,f,c
  3762  000490  505E               	movf	_EP0_IN+1,w,c
  3763  000492  22DA               	addwfc	fsr2h,f,c
  3764  000494  5058               	movf	_setup_in_packet+1,w,c
  3765  000496  6EDF               	movwf	indf2,c
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;servos.c: 983: *(EP0_IN) = (0x80 | 0x40 | 0x08);;
  3769  000498  C05D  FFD9         	movff	_EP0_IN,fsr2l
  3770  00049C  C05E  FFDA         	movff	_EP0_IN+1,fsr2h
  3771  0004A0  0EC8               	movlw	200
  3772  0004A2  6EDF               	movwf	indf2,c
  3773                           
  3774                           ; BSR set to: 0
  3775                           ;servos.c: 987: }
  3776                           
  3777                           ; BSR set to: 0
  3778                           ;servos.c: 984: return;
  3779  0004A4  0012               	return	
  3780  0004A6                     i2l317:
  3781                           
  3782                           ;servos.c: 988: else
  3783                           ;servos.c: 989: {
  3784                           ;servos.c: 991: ctrl_trf_state = 2;
  3785                           
  3786                           ; BSR set to: 0
  3787  0004A6  0E02               	movlw	2
  3788  0004A8  6E50               	movwf	_ctrl_trf_state,c
  3789                           
  3790                           ;servos.c: 992: *(EP0_IN + 1) = (0);;
  3791  0004AA  EE20 F001          	lfsr	2,1
  3792  0004AE  505D               	movf	_EP0_IN,w,c
  3793  0004B0  26D9               	addwf	fsr2l,f,c
  3794  0004B2  505E               	movf	_EP0_IN+1,w,c
  3795  0004B4  22DA               	addwfc	fsr2h,f,c
  3796  0004B6  0E00               	movlw	0
  3797  0004B8  6EDF               	movwf	indf2,c
  3798                           
  3799                           ;servos.c: 993: *(EP0_IN) = (0x80 | 0x40 | 0x08);;
  3800  0004BA  C05D  FFD9         	movff	_EP0_IN,fsr2l
  3801  0004BE  C05E  FFDA         	movff	_EP0_IN+1,fsr2h
  3802  0004C2  0EC8               	movlw	200
  3803  0004C4  6EDF               	movwf	indf2,c
  3804                           
  3805                           ;servos.c: 995: *(EP0_OUT + 1) = (8); *(EP0_OUT + 2) = ((uint16_t)(setup_in_packet) & 0x
      +                          ff); *(EP0_OUT + 3) = ((uint16_t)(setup_in_packet) >> 8); *(EP0_OUT) = (0x80 | 0x40 | 0x
      +                          08);;
  3806  0004C6  0100               	movlb	0	; () banked
  3807  0004C8  EE20 F001          	lfsr	2,1
  3808  0004CC  51AE               	movf	_EP0_OUT& (0+255),w,b
  3809  0004CE  26D9               	addwf	fsr2l,f,c
  3810  0004D0  51AF               	movf	(_EP0_OUT+1)& (0+255),w,b
  3811  0004D2  22DA               	addwfc	fsr2h,f,c
  3812  0004D4  0E08               	movlw	8
  3813  0004D6  6EDF               	movwf	indf2,c
  3814                           
  3815                           ; BSR set to: 0
  3816  0004D8  EE20 F002          	lfsr	2,2
  3817  0004DC  51AE               	movf	_EP0_OUT& (0+255),w,b
  3818  0004DE  26D9               	addwf	fsr2l,f,c
  3819  0004E0  51AF               	movf	(_EP0_OUT+1)& (0+255),w,b
  3820  0004E2  22DA               	addwfc	fsr2h,f,c
  3821  0004E4  C057  FFDF         	movff	_setup_in_packet,indf2
  3822                           
  3823                           ; BSR set to: 0
  3824  0004E8  EE20 F003          	lfsr	2,3
  3825  0004EC  51AE               	movf	_EP0_OUT& (0+255),w,b
  3826  0004EE  26D9               	addwf	fsr2l,f,c
  3827  0004F0  51AF               	movf	(_EP0_OUT+1)& (0+255),w,b
  3828  0004F2  22DA               	addwfc	fsr2h,f,c
  3829  0004F4  5058               	movf	_setup_in_packet+1,w,c
  3830  0004F6  6EDF               	movwf	indf2,c
  3831                           
  3832                           ; BSR set to: 0
  3833  0004F8  C0AE  FFD9         	movff	_EP0_OUT,fsr2l
  3834  0004FC  C0AF  FFDA         	movff	_EP0_OUT+1,fsr2h
  3835  000500  0EC8               	movlw	200
  3836  000502  6EDF               	movwf	indf2,c
  3837                           
  3838                           ; BSR set to: 0
  3839                           
  3840                           ; BSR set to: 0
  3841                           ;servos.c: 996: return;
  3842  000504  0012               	return	
  3843  000506                     __end_of_handle_usb_ctrl_setup:
  3844                           	opt stack 0
  3845                           tosu	equ	0xFFF
  3846                           tosh	equ	0xFFE
  3847                           tosl	equ	0xFFD
  3848                           pclatu	equ	0xFFB
  3849                           pclath	equ	0xFFA
  3850                           tblptru	equ	0xFF8
  3851                           tblptrh	equ	0xFF7
  3852                           tblptrl	equ	0xFF6
  3853                           tablat	equ	0xFF5
  3854                           prodh	equ	0xFF4
  3855                           prodl	equ	0xFF3
  3856                           intcon	equ	0xFF2
  3857                           postinc0	equ	0xFEE
  3858                           fsr0h	equ	0xFEA
  3859                           fsr0l	equ	0xFE9
  3860                           wreg	equ	0xFE8
  3861                           indf1	equ	0xFE7
  3862                           postdec1	equ	0xFE5
  3863                           fsr1h	equ	0xFE2
  3864                           fsr1l	equ	0xFE1
  3865                           bsr	equ	0xFE0
  3866                           indf2	equ	0xFDF
  3867                           postinc2	equ	0xFDE
  3868                           fsr2h	equ	0xFDA
  3869                           fsr2l	equ	0xFD9
  3870                           status	equ	0xFD8
  3871                           
  3872 ;; *************** function _usb_check_std_request *****************
  3873 ;; Defined at:
  3874 ;;		line 711 in file "servos.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;		None
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;  index           1   16[COMRAM] unsigned char 
  3879 ;;  type            1   18[COMRAM] unsigned char 
  3880 ;;  request         1   17[COMRAM] unsigned char 
  3881 ;; Return value:  Size  Location     Type
  3882 ;;                  1    wreg      void 
  3883 ;; Registers used:
  3884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3885 ;; Tracked objects:
  3886 ;;		On entry : 0/0
  3887 ;;		On exit  : 0/0
  3888 ;;		Unchanged: 0/0
  3889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3890 ;;      Params:         0       0       0       0
  3891 ;;      Locals:         3       0       0       0
  3892 ;;      Temps:          0       0       0       0
  3893 ;;      Totals:         3       0       0       0
  3894 ;;Total ram usage:        3 bytes
  3895 ;; Hardware stack levels used:    1
  3896 ;; Hardware stack levels required when called:    3
  3897 ;; This function calls:
  3898 ;;		_print_number
  3899 ;;		_user_endpoint_init
  3900 ;;		i2_flush_uart
  3901 ;;		i2_print_text
  3902 ;; This function is called by:
  3903 ;;		_handle_usb_ctrl_setup
  3904 ;; This function uses a non-reentrant model
  3905 ;;
  3906                           
  3907                           	psect	text18
  3908  000506                     __ptext18:
  3909                           	opt stack 0
  3910  000506                     _usb_check_std_request:
  3911                           	opt stack 20
  3912                           
  3913                           ;servos.c: 716: uint8_t request = setup_out_packet[1];
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;incstack = 0
  3917  000506  EE20 F001          	lfsr	2,1
  3918  00050A  5059               	movf	_setup_out_packet,w,c
  3919  00050C  26D9               	addwf	fsr2l,f,c
  3920  00050E  505A               	movf	_setup_out_packet+1,w,c
  3921  000510  22DA               	addwfc	fsr2h,f,c
  3922  000512  50DF               	movf	indf2,w,c
  3923  000514  6E12               	movwf	usb_check_std_request@request,c
  3924                           
  3925                           ;servos.c: 723: if(request == 0x05)
  3926  000516  0E05               	movlw	5
  3927  000518  1812               	xorwf	usb_check_std_request@request,w,c
  3928  00051A  A4D8               	btfss	status,2,c
  3929  00051C  D005               	goto	i2l271
  3930                           
  3931                           ;servos.c: 724: {
  3932                           ;servos.c: 725: ctrl_trf_session_owner = 1;
  3933  00051E  0E01               	movlw	1
  3934  000520  6E4F               	movwf	_ctrl_trf_session_owner,c
  3935                           
  3936                           ;servos.c: 726: usb_state = 4;
  3937  000522  0E04               	movlw	4
  3938  000524  6E51               	movwf	_usb_state,c
  3939                           
  3940                           ;servos.c: 728: }
  3941                           
  3942                           ;servos.c: 727: return;
  3943  000526  0012               	return	
  3944  000528                     i2l271:
  3945                           
  3946                           ;servos.c: 729: else
  3947                           ;servos.c: 730: if(request == 0x06)
  3948  000528  0E06               	movlw	6
  3949  00052A  1812               	xorwf	usb_check_std_request@request,w,c
  3950  00052C  A4D8               	btfss	status,2,c
  3951  00052E  D090               	goto	i2l274
  3952                           
  3953                           ;servos.c: 731: {
  3954                           ;servos.c: 732: ctrl_trf_session_owner = 1;
  3955  000530  0E01               	movlw	1
  3956  000532  6E4F               	movwf	_ctrl_trf_session_owner,c
  3957                           
  3958                           ;servos.c: 734: uint8_t type = setup_out_packet[3];
  3959  000534  EE20 F003          	lfsr	2,3
  3960  000538  5059               	movf	_setup_out_packet,w,c
  3961  00053A  26D9               	addwf	fsr2l,f,c
  3962  00053C  505A               	movf	_setup_out_packet+1,w,c
  3963  00053E  22DA               	addwfc	fsr2h,f,c
  3964  000540  50DF               	movf	indf2,w,c
  3965  000542  6E13               	movwf	usb_check_std_request@type,c
  3966                           
  3967                           ;servos.c: 736: if(type == 0x01)
  3968  000544  0413               	decf	usb_check_std_request@type,w,c
  3969  000546  A4D8               	btfss	status,2,c
  3970  000548  D00E               	goto	i2l275
  3971                           
  3972                           ;servos.c: 737: {
  3973                           ;servos.c: 738: data_ptr = usb_descriptor;
  3974  00054A  0E77               	movlw	low _usb_descriptor
  3975  00054C  6E3E               	movwf	_data_ptr,c
  3976  00054E  0E3F               	movlw	high _usb_descriptor
  3977  000550  6E3F               	movwf	_data_ptr+1,c
  3978  000552  503E               	movf	_data_ptr,w,c
  3979  000554  103F               	iorwf	_data_ptr+1,w,c
  3980  000556  A4D8               	btfss	status,2,c
  3981  000558  0E00               	movlw	low (__mediumconst shr (0+16))
  3982  00055A  6E40               	movwf	_data_ptr+2,c
  3983                           
  3984                           ;servos.c: 739: data_count = sizeof(usb_descriptor);
  3985  00055C  0E00               	movlw	0
  3986  00055E  6E42               	movwf	_data_count+1,c
  3987  000560  0E12               	movlw	18
  3988  000562  6E41               	movwf	_data_count,c
  3989                           
  3990                           ;servos.c: 741: }
  3991                           
  3992                           ;servos.c: 740: return;
  3993  000564  0012               	return	
  3994  000566                     i2l275:
  3995                           
  3996                           ;servos.c: 742: else
  3997                           ;servos.c: 743: if(type == 0x02)
  3998  000566  0E02               	movlw	2
  3999  000568  1813               	xorwf	usb_check_std_request@type,w,c
  4000  00056A  A4D8               	btfss	status,2,c
  4001  00056C  D00E               	goto	i2l277
  4002                           
  4003                           ;servos.c: 744: {
  4004                           ;servos.c: 745: data_ptr = usb_config1;
  4005  00056E  0E09               	movlw	low _usb_config1
  4006  000570  6E3E               	movwf	_data_ptr,c
  4007  000572  0E3F               	movlw	high _usb_config1
  4008  000574  6E3F               	movwf	_data_ptr+1,c
  4009  000576  503E               	movf	_data_ptr,w,c
  4010  000578  103F               	iorwf	_data_ptr+1,w,c
  4011  00057A  A4D8               	btfss	status,2,c
  4012  00057C  0E00               	movlw	low (__mediumconst shr (0+16))
  4013  00057E  6E40               	movwf	_data_ptr+2,c
  4014                           
  4015                           ;servos.c: 746: data_count = sizeof(usb_config1);
  4016  000580  0E00               	movlw	0
  4017  000582  6E42               	movwf	_data_count+1,c
  4018  000584  0E46               	movlw	70
  4019  000586  6E41               	movwf	_data_count,c
  4020                           
  4021                           ;servos.c: 748: }
  4022                           
  4023                           ;servos.c: 747: return;
  4024  000588  0012               	return	
  4025  00058A                     i2l277:
  4026                           
  4027                           ;servos.c: 749: else
  4028                           ;servos.c: 750: if(type == 0x03)
  4029  00058A  0E03               	movlw	3
  4030  00058C  1813               	xorwf	usb_check_std_request@type,w,c
  4031  00058E  A4D8               	btfss	status,2,c
  4032  000590  D039               	goto	i2l279
  4033                           
  4034                           ;servos.c: 751: {
  4035                           ;servos.c: 754: uint8_t index = setup_out_packet[2];
  4036  000592  EE20 F002          	lfsr	2,2
  4037  000596  5059               	movf	_setup_out_packet,w,c
  4038  000598  26D9               	addwf	fsr2l,f,c
  4039  00059A  505A               	movf	_setup_out_packet+1,w,c
  4040  00059C  22DA               	addwfc	fsr2h,f,c
  4041  00059E  50DF               	movf	indf2,w,c
  4042  0005A0  6E11               	movwf	usb_check_std_request@index,c
  4043                           
  4044                           ;servos.c: 759: if(index == 2)
  4045  0005A2  0E02               	movlw	2
  4046  0005A4  1811               	xorwf	usb_check_std_request@index,w,c
  4047  0005A6  A4D8               	btfss	status,2,c
  4048  0005A8  D00E               	goto	i2l280
  4049                           
  4050                           ;servos.c: 760: {
  4051                           ;servos.c: 762: data_ptr = sd002;
  4052  0005AA  0E65               	movlw	low _sd002
  4053  0005AC  6E3E               	movwf	_data_ptr,c
  4054  0005AE  0E3F               	movlw	high _sd002
  4055  0005B0  6E3F               	movwf	_data_ptr+1,c
  4056  0005B2  503E               	movf	_data_ptr,w,c
  4057  0005B4  103F               	iorwf	_data_ptr+1,w,c
  4058  0005B6  A4D8               	btfss	status,2,c
  4059  0005B8  0E00               	movlw	low (__mediumconst shr (0+16))
  4060  0005BA  6E40               	movwf	_data_ptr+2,c
  4061                           
  4062                           ;servos.c: 763: data_count = sizeof(sd002);
  4063  0005BC  0E00               	movlw	0
  4064  0005BE  6E42               	movwf	_data_count+1,c
  4065  0005C0  0E12               	movlw	18
  4066  0005C2  6E41               	movwf	_data_count,c
  4067                           
  4068                           ;servos.c: 765: }
  4069                           
  4070                           ;servos.c: 764: return;
  4071  0005C4  0012               	return	
  4072  0005C6                     i2l280:
  4073                           
  4074                           ;servos.c: 766: else
  4075                           ;servos.c: 767: if(index == 1)
  4076  0005C6  0411               	decf	usb_check_std_request@index,w,c
  4077  0005C8  A4D8               	btfss	status,2,c
  4078  0005CA  D00E               	goto	i2l282
  4079                           
  4080                           ;servos.c: 768: {
  4081                           ;servos.c: 770: data_ptr = sd001;
  4082  0005CC  0E4F               	movlw	low _sd001
  4083  0005CE  6E3E               	movwf	_data_ptr,c
  4084  0005D0  0E3F               	movlw	high _sd001
  4085  0005D2  6E3F               	movwf	_data_ptr+1,c
  4086  0005D4  503E               	movf	_data_ptr,w,c
  4087  0005D6  103F               	iorwf	_data_ptr+1,w,c
  4088  0005D8  A4D8               	btfss	status,2,c
  4089  0005DA  0E00               	movlw	low (__mediumconst shr (0+16))
  4090  0005DC  6E40               	movwf	_data_ptr+2,c
  4091                           
  4092                           ;servos.c: 771: data_count = sizeof(sd001);
  4093  0005DE  0E00               	movlw	0
  4094  0005E0  6E42               	movwf	_data_count+1,c
  4095  0005E2  0E16               	movlw	22
  4096  0005E4  6E41               	movwf	_data_count,c
  4097                           
  4098                           ;servos.c: 773: }
  4099                           
  4100                           ;servos.c: 772: return;
  4101  0005E6  0012               	return	
  4102  0005E8                     i2l282:
  4103                           
  4104                           ;servos.c: 774: else
  4105                           ;servos.c: 775: {
  4106                           ;servos.c: 777: data_ptr = sd000;
  4107  0005E8  0E93               	movlw	low _sd000
  4108  0005EA  6E3E               	movwf	_data_ptr,c
  4109  0005EC  0E3F               	movlw	high _sd000
  4110  0005EE  6E3F               	movwf	_data_ptr+1,c
  4111  0005F0  503E               	movf	_data_ptr,w,c
  4112  0005F2  103F               	iorwf	_data_ptr+1,w,c
  4113  0005F4  A4D8               	btfss	status,2,c
  4114  0005F6  0E00               	movlw	low (__mediumconst shr (0+16))
  4115  0005F8  6E40               	movwf	_data_ptr+2,c
  4116                           
  4117                           ;servos.c: 778: data_count = sizeof(sd000);
  4118  0005FA  0E00               	movlw	0
  4119  0005FC  6E42               	movwf	_data_count+1,c
  4120  0005FE  0E04               	movlw	4
  4121  000600  6E41               	movwf	_data_count,c
  4122                           
  4123                           ;servos.c: 780: }
  4124                           ;servos.c: 781: }
  4125                           
  4126                           ;servos.c: 779: return;
  4127  000602  0012               	return	
  4128  000604                     i2l279:
  4129                           
  4130                           ;servos.c: 782: else
  4131                           ;servos.c: 783: if(type == 0x06)
  4132  000604  0E06               	movlw	6
  4133  000606  1813               	xorwf	usb_check_std_request@type,w,c
  4134  000608  A4D8               	btfss	status,2,c
  4135  00060A  D00E               	goto	i2l285
  4136                           
  4137                           ;servos.c: 784: {
  4138                           ;servos.c: 785: data_ptr = qual_descriptor;
  4139  00060C  0E89               	movlw	low _qual_descriptor
  4140  00060E  6E3E               	movwf	_data_ptr,c
  4141  000610  0E3F               	movlw	high _qual_descriptor
  4142  000612  6E3F               	movwf	_data_ptr+1,c
  4143  000614  503E               	movf	_data_ptr,w,c
  4144  000616  103F               	iorwf	_data_ptr+1,w,c
  4145  000618  A4D8               	btfss	status,2,c
  4146  00061A  0E00               	movlw	low (__mediumconst shr (0+16))
  4147  00061C  6E40               	movwf	_data_ptr+2,c
  4148                           
  4149                           ;servos.c: 786: data_count = sizeof(qual_descriptor);
  4150  00061E  0E00               	movlw	0
  4151  000620  6E42               	movwf	_data_count+1,c
  4152  000622  0E0A               	movlw	10
  4153  000624  6E41               	movwf	_data_count,c
  4154                           
  4155                           ;servos.c: 788: }
  4156                           
  4157                           ;servos.c: 787: return;
  4158  000626  0012               	return	
  4159  000628                     i2l285:
  4160                           
  4161                           ;servos.c: 789: else
  4162                           ;servos.c: 790: {
  4163                           ;servos.c: 792: print_text("unknown descriptor type: ");
  4164  000628  0EBB               	movlw	low STR_1
  4165  00062A  6E02               	movwf	i2print_text@s,c
  4166  00062C  0E3F               	movlw	high STR_1
  4167  00062E  6E03               	movwf	i2print_text@s+1,c
  4168  000630  EC24  F008         	call	i2_print_text	;wreg free
  4169                           
  4170                           ;servos.c: 793: print_number(type);
  4171  000634  C013  F00F         	movff	usb_check_std_request@type,print_number@number
  4172  000638  6A10               	clrf	print_number@number+1,c
  4173  00063A  EC68  F008         	call	_print_number	;wreg free
  4174                           
  4175                           ;servos.c: 794: print_text("\n");
  4176  00063E  0EF3               	movlw	low (STR_7+13)
  4177  000640  6E02               	movwf	i2print_text@s,c
  4178  000642  0E3F               	movlw	high (STR_7+13)
  4179  000644  6E03               	movwf	i2print_text@s+1,c
  4180  000646  EC24  F008         	call	i2_print_text	;wreg free
  4181                           
  4182                           ;servos.c: 795: ctrl_trf_session_owner = 0;
  4183  00064A  0E00               	movlw	0
  4184  00064C  6E4F               	movwf	_ctrl_trf_session_owner,c
  4185                           
  4186                           ;servos.c: 797: }
  4187                           ;servos.c: 798: }
  4188                           
  4189                           ;servos.c: 796: return;
  4190  00064E  0012               	return	
  4191  000650                     i2l274:
  4192                           
  4193                           ;servos.c: 799: else
  4194                           ;servos.c: 800: if(request == 0x09)
  4195  000650  0E09               	movlw	9
  4196  000652  1812               	xorwf	usb_check_std_request@request,w,c
  4197  000654  A4D8               	btfss	status,2,c
  4198  000656  D015               	goto	i2l288
  4199                           
  4200                           ;servos.c: 801: {
  4201                           ;servos.c: 806: ctrl_trf_session_owner = 1;
  4202  000658  0E01               	movlw	1
  4203  00065A  6E4F               	movwf	_ctrl_trf_session_owner,c
  4204                           
  4205                           ;servos.c: 808: usb_config = setup_out_packet[2];
  4206  00065C  EE20 F002          	lfsr	2,2
  4207  000660  5059               	movf	_setup_out_packet,w,c
  4208  000662  26D9               	addwf	fsr2l,f,c
  4209  000664  505A               	movf	_setup_out_packet+1,w,c
  4210  000666  22DA               	addwfc	fsr2h,f,c
  4211  000668  50DF               	movf	indf2,w,c
  4212  00066A  6E54               	movwf	_usb_config,c
  4213                           
  4214                           ;servos.c: 809: if(usb_config == 0)
  4215  00066C  5054               	movf	_usb_config,w,c
  4216  00066E  A4D8               	btfss	status,2,c
  4217  000670  D003               	goto	i2l289
  4218                           
  4219                           ;servos.c: 810: {
  4220                           ;servos.c: 811: usb_state = 5;
  4221  000672  0E05               	movlw	5
  4222  000674  6E51               	movwf	_usb_state,c
  4223                           
  4224                           ;servos.c: 813: }
  4225                           
  4226                           ;servos.c: 812: return;
  4227  000676  0012               	return	
  4228  000678                     i2l289:
  4229                           
  4230                           ;servos.c: 814: else
  4231                           ;servos.c: 815: {
  4232                           ;servos.c: 816: usb_state = 6;
  4233  000678  0E06               	movlw	6
  4234  00067A  6E51               	movwf	_usb_state,c
  4235                           
  4236                           ;servos.c: 819: user_endpoint_init();
  4237  00067C  EC7D  F004         	call	_user_endpoint_init	;wreg free
  4238                           
  4239                           ;servos.c: 823: }
  4240                           ;servos.c: 824: }
  4241                           
  4242                           ;servos.c: 822: return;
  4243  000680  0012               	return	
  4244  000682                     i2l288:
  4245                           
  4246                           ;servos.c: 825: else
  4247                           ;servos.c: 826: if(request == 0x08)
  4248  000682  0E08               	movlw	8
  4249  000684  1812               	xorwf	usb_check_std_request@request,w,c
  4250  000686  A4D8               	btfss	status,2,c
  4251  000688  D010               	goto	i2l292
  4252                           
  4253                           ;servos.c: 827: {
  4254                           ;servos.c: 828: ctrl_trf_session_owner = 1;
  4255  00068A  0E01               	movlw	1
  4256  00068C  6E4F               	movwf	_ctrl_trf_session_owner,c
  4257                           
  4258                           ;servos.c: 829: data_ptr = &usb_config;
  4259  00068E  0E54               	movlw	low _usb_config
  4260  000690  6E3E               	movwf	_data_ptr,c
  4261  000692  0E00               	movlw	high _usb_config
  4262  000694  6E3F               	movwf	_data_ptr+1,c
  4263  000696  503E               	movf	_data_ptr,w,c
  4264  000698  103F               	iorwf	_data_ptr+1,w,c
  4265  00069A  A4D8               	btfss	status,2,c
  4266  00069C  0E20               	movlw	32
  4267  00069E  6E40               	movwf	_data_ptr+2,c
  4268                           
  4269                           ;servos.c: 830: data_count = 1;
  4270  0006A0  0E00               	movlw	0
  4271  0006A2  6E42               	movwf	_data_count+1,c
  4272  0006A4  0E01               	movlw	1
  4273  0006A6  6E41               	movwf	_data_count,c
  4274                           
  4275                           ;servos.c: 832: }
  4276                           
  4277                           ;servos.c: 831: return;
  4278  0006A8  0012               	return	
  4279  0006AA                     i2l292:
  4280                           
  4281                           ;servos.c: 833: else
  4282                           ;servos.c: 834: {
  4283                           ;servos.c: 835: print_text("unknown request ");
  4284  0006AA  0ED5               	movlw	low STR_3
  4285  0006AC  6E02               	movwf	i2print_text@s,c
  4286  0006AE  0E3F               	movlw	high STR_3
  4287  0006B0  6E03               	movwf	i2print_text@s+1,c
  4288  0006B2  EC24  F008         	call	i2_print_text	;wreg free
  4289                           
  4290                           ;servos.c: 836: print_number(request);
  4291  0006B6  C012  F00F         	movff	usb_check_std_request@request,print_number@number
  4292  0006BA  6A10               	clrf	print_number@number+1,c
  4293  0006BC  EC68  F008         	call	_print_number	;wreg free
  4294                           
  4295                           ;servos.c: 837: print_text("\n");
  4296  0006C0  0EF3               	movlw	low (STR_7+13)
  4297  0006C2  6E02               	movwf	i2print_text@s,c
  4298  0006C4  0E3F               	movlw	high (STR_7+13)
  4299  0006C6  6E03               	movwf	i2print_text@s+1,c
  4300  0006C8  EC24  F008         	call	i2_print_text	;wreg free
  4301                           
  4302                           ;servos.c: 838: flush_uart();
  4303  0006CC  EC83  F008         	call	i2_flush_uart	;wreg free
  4304  0006D0  0012               	return	
  4305  0006D2                     __end_of_usb_check_std_request:
  4306                           	opt stack 0
  4307                           tosu	equ	0xFFF
  4308                           tosh	equ	0xFFE
  4309                           tosl	equ	0xFFD
  4310                           pclatu	equ	0xFFB
  4311                           pclath	equ	0xFFA
  4312                           tblptru	equ	0xFF8
  4313                           tblptrh	equ	0xFF7
  4314                           tblptrl	equ	0xFF6
  4315                           tablat	equ	0xFF5
  4316                           prodh	equ	0xFF4
  4317                           prodl	equ	0xFF3
  4318                           intcon	equ	0xFF2
  4319                           postinc0	equ	0xFEE
  4320                           fsr0h	equ	0xFEA
  4321                           fsr0l	equ	0xFE9
  4322                           wreg	equ	0xFE8
  4323                           indf1	equ	0xFE7
  4324                           postdec1	equ	0xFE5
  4325                           fsr1h	equ	0xFE2
  4326                           fsr1l	equ	0xFE1
  4327                           bsr	equ	0xFE0
  4328                           indf2	equ	0xFDF
  4329                           postinc2	equ	0xFDE
  4330                           fsr2h	equ	0xFDA
  4331                           fsr2l	equ	0xFD9
  4332                           status	equ	0xFD8
  4333                           
  4334 ;; *************** function i2_flush_uart *****************
  4335 ;; Defined at:
  4336 ;;		line 228 in file "servos.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;		None
  4339 ;; Auto vars:     Size  Location     Type
  4340 ;;		None
  4341 ;; Return value:  Size  Location     Type
  4342 ;;                  1    wreg      void 
  4343 ;; Registers used:
  4344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4345 ;; Tracked objects:
  4346 ;;		On entry : 0/0
  4347 ;;		On exit  : 0/0
  4348 ;;		Unchanged: 0/0
  4349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4350 ;;      Params:         0       0       0       0
  4351 ;;      Locals:         0       0       0       0
  4352 ;;      Temps:          0       0       0       0
  4353 ;;      Totals:         0       0       0       0
  4354 ;;Total ram usage:        0 bytes
  4355 ;; Hardware stack levels used:    1
  4356 ;; Hardware stack levels required when called:    1
  4357 ;; This function calls:
  4358 ;;		i2_handle_uart
  4359 ;; This function is called by:
  4360 ;;		_usb_check_std_request
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           	psect	text19
  4365  001106                     __ptext19:
  4366                           	opt stack 0
  4367  001106                     i2_flush_uart:
  4368                           	opt stack 21
  4369                           
  4370                           ;servos.c: 230: while(serial_out_count)
  4371                           
  4372                           ;incstack = 0
  4373  001106  D002               	goto	i2l135
  4374  001108                     
  4375                           ;servos.c: 231: {
  4376                           ;servos.c: 232: handle_uart();
  4377  001108  EC3A  F007         	call	i2_handle_uart	;wreg free
  4378  00110C                     i2l135:
  4379  00110C  5049               	movf	_serial_out_count,w,c
  4380  00110E  104A               	iorwf	_serial_out_count+1,w,c
  4381  001110  B4D8               	btfsc	status,2,c
  4382  001112  0012               	return	
  4383  001114  D7F9               	goto	i2l136
  4384  001116                     __end_ofi2_flush_uart:
  4385                           	opt stack 0
  4386                           tosu	equ	0xFFF
  4387                           tosh	equ	0xFFE
  4388                           tosl	equ	0xFFD
  4389                           pclatu	equ	0xFFB
  4390                           pclath	equ	0xFFA
  4391                           tblptru	equ	0xFF8
  4392                           tblptrh	equ	0xFF7
  4393                           tblptrl	equ	0xFF6
  4394                           tablat	equ	0xFF5
  4395                           prodh	equ	0xFF4
  4396                           prodl	equ	0xFF3
  4397                           intcon	equ	0xFF2
  4398                           postinc0	equ	0xFEE
  4399                           fsr0h	equ	0xFEA
  4400                           fsr0l	equ	0xFE9
  4401                           wreg	equ	0xFE8
  4402                           indf1	equ	0xFE7
  4403                           postdec1	equ	0xFE5
  4404                           fsr1h	equ	0xFE2
  4405                           fsr1l	equ	0xFE1
  4406                           bsr	equ	0xFE0
  4407                           indf2	equ	0xFDF
  4408                           postinc2	equ	0xFDE
  4409                           fsr2h	equ	0xFDA
  4410                           fsr2l	equ	0xFD9
  4411                           status	equ	0xFD8
  4412                           
  4413 ;; *************** function i2_handle_uart *****************
  4414 ;; Defined at:
  4415 ;;		line 203 in file "servos.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;		None
  4418 ;; Auto vars:     Size  Location     Type
  4419 ;;		None
  4420 ;; Return value:  Size  Location     Type
  4421 ;;                  1    wreg      void 
  4422 ;; Registers used:
  4423 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4424 ;; Tracked objects:
  4425 ;;		On entry : 0/0
  4426 ;;		On exit  : 0/0
  4427 ;;		Unchanged: 0/0
  4428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4429 ;;      Params:         0       0       0       0
  4430 ;;      Locals:         0       0       0       0
  4431 ;;      Temps:          0       0       0       0
  4432 ;;      Totals:         0       0       0       0
  4433 ;;Total ram usage:        0 bytes
  4434 ;; Hardware stack levels used:    1
  4435 ;; This function calls:
  4436 ;;		Nothing
  4437 ;; This function is called by:
  4438 ;;		i2_flush_uart
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442                           	psect	text20
  4443  000E74                     __ptext20:
  4444                           	opt stack 0
  4445  000E74                     i2_handle_uart:
  4446                           	opt stack 21
  4447                           
  4448                           ;servos.c: 206: if(RCSTAbits.OERR)
  4449                           
  4450                           ;incstack = 0
  4451  000E74  A2AB               	btfss	4011,1,c	;volatile
  4452  000E76  D003               	goto	i2l128
  4453                           
  4454                           ;servos.c: 207: {
  4455                           ;servos.c: 208: RCSTAbits.OERR = 0;
  4456  000E78  92AB               	bcf	4011,1,c	;volatile
  4457                           
  4458                           ;servos.c: 209: RCSTAbits.CREN = 0;
  4459  000E7A  98AB               	bcf	4011,4,c	;volatile
  4460                           
  4461                           ;servos.c: 210: RCSTAbits.CREN = 1;
  4462  000E7C  88AB               	bsf	4011,4,c	;volatile
  4463  000E7E                     i2l128:
  4464                           
  4465                           ;servos.c: 211: }
  4466                           ;servos.c: 213: if(PIR1bits.TXIF)
  4467  000E7E  A89E               	btfss	3998,4,c	;volatile
  4468  000E80  0012               	return	
  4469                           
  4470                           ;servos.c: 214: {
  4471                           ;servos.c: 215: if(serial_out_count > 0)
  4472  000E82  5049               	movf	_serial_out_count,w,c
  4473  000E84  104A               	iorwf	_serial_out_count+1,w,c
  4474  000E86  B4D8               	btfsc	status,2,c
  4475  000E88  0012               	return	
  4476                           
  4477                           ;servos.c: 216: {
  4478                           ;servos.c: 217: TXREG = serial_out_buffer[serial_out_ptr2++];
  4479  000E8A  0E00               	movlw	low _serial_out_buffer
  4480  000E8C  2445               	addwf	_serial_out_ptr2,w,c
  4481  000E8E  6ED9               	movwf	fsr2l,c
  4482  000E90  0E01               	movlw	high _serial_out_buffer
  4483  000E92  2046               	addwfc	_serial_out_ptr2+1,w,c
  4484  000E94  6EDA               	movwf	fsr2h,c
  4485  000E96  50DF               	movf	indf2,w,c
  4486  000E98  6EAD               	movwf	4013,c	;volatile
  4487  000E9A  4A45               	infsnz	_serial_out_ptr2,f,c
  4488  000E9C  2A46               	incf	_serial_out_ptr2+1,f,c
  4489                           
  4490                           ;servos.c: 218: if(serial_out_ptr2 >= 256)
  4491  000E9E  0446               	decf	_serial_out_ptr2+1,w,c
  4492  000EA0  A0D8               	btfss	status,0,c
  4493  000EA2  D004               	goto	i2l131
  4494                           
  4495                           ;servos.c: 219: {
  4496                           ;servos.c: 220: serial_out_ptr2 = 0;
  4497  000EA4  0E00               	movlw	0
  4498  000EA6  6E46               	movwf	_serial_out_ptr2+1,c
  4499  000EA8  0E00               	movlw	0
  4500  000EAA  6E45               	movwf	_serial_out_ptr2,c
  4501  000EAC                     i2l131:
  4502                           
  4503                           ;servos.c: 221: }
  4504                           ;servos.c: 222: serial_out_count--;
  4505  000EAC  0649               	decf	_serial_out_count,f,c
  4506  000EAE  A0D8               	btfss	status,0,c
  4507  000EB0  064A               	decf	_serial_out_count+1,f,c
  4508  000EB2  0012               	return	
  4509  000EB4                     __end_ofi2_handle_uart:
  4510                           	opt stack 0
  4511                           tosu	equ	0xFFF
  4512                           tosh	equ	0xFFE
  4513                           tosl	equ	0xFFD
  4514                           pclatu	equ	0xFFB
  4515                           pclath	equ	0xFFA
  4516                           tblptru	equ	0xFF8
  4517                           tblptrh	equ	0xFF7
  4518                           tblptrl	equ	0xFF6
  4519                           tablat	equ	0xFF5
  4520                           prodh	equ	0xFF4
  4521                           prodl	equ	0xFF3
  4522                           intcon	equ	0xFF2
  4523                           postinc0	equ	0xFEE
  4524                           fsr0h	equ	0xFEA
  4525                           fsr0l	equ	0xFE9
  4526                           wreg	equ	0xFE8
  4527                           indf1	equ	0xFE7
  4528                           postdec1	equ	0xFE5
  4529                           fsr1h	equ	0xFE2
  4530                           fsr1l	equ	0xFE1
  4531                           bsr	equ	0xFE0
  4532                           indf2	equ	0xFDF
  4533                           postinc2	equ	0xFDE
  4534                           fsr2h	equ	0xFDA
  4535                           fsr2l	equ	0xFD9
  4536                           status	equ	0xFD8
  4537                           
  4538 ;; *************** function _user_endpoint_init *****************
  4539 ;; Defined at:
  4540 ;;		line 690 in file "servos.c"
  4541 ;; Parameters:    Size  Location     Type
  4542 ;;		None
  4543 ;; Auto vars:     Size  Location     Type
  4544 ;;		None
  4545 ;; Return value:  Size  Location     Type
  4546 ;;                  1    wreg      void 
  4547 ;; Registers used:
  4548 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4549 ;; Tracked objects:
  4550 ;;		On entry : 0/0
  4551 ;;		On exit  : 0/0
  4552 ;;		Unchanged: 0/0
  4553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4554 ;;      Params:         0       0       0       0
  4555 ;;      Locals:         0       0       0       0
  4556 ;;      Temps:          0       0       0       0
  4557 ;;      Totals:         0       0       0       0
  4558 ;;Total ram usage:        0 bytes
  4559 ;; Hardware stack levels used:    1
  4560 ;; This function calls:
  4561 ;;		Nothing
  4562 ;; This function is called by:
  4563 ;;		_usb_check_std_request
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           	psect	text21
  4568  0008FA                     __ptext21:
  4569                           	opt stack 0
  4570  0008FA                     _user_endpoint_init:
  4571                           	opt stack 22
  4572                           
  4573                           ;servos.c: 693: UEP1 = 0;
  4574                           
  4575                           ;incstack = 0
  4576  0008FA  0E00               	movlw	0
  4577  0008FC  010F               	movlb	15	; () banked
  4578  0008FE  6F54               	movwf	84,b	;volatile
  4579                           
  4580                           ; BSR set to: 15
  4581                           ;servos.c: 694: UEP1bits.EPCONDIS = 1;
  4582  000900  8754               	bsf	84,3,b	;volatile
  4583                           
  4584                           ; BSR set to: 15
  4585                           ;servos.c: 695: UEP1bits.EPOUTEN = 1;
  4586  000902  8554               	bsf	84,2,b	;volatile
  4587                           
  4588                           ; BSR set to: 15
  4589                           ;servos.c: 696: UEP1bits.EPINEN = 1;
  4590  000904  8354               	bsf	84,1,b	;volatile
  4591                           
  4592                           ; BSR set to: 15
  4593                           ;servos.c: 697: UEP1bits.EPHSHK = 1;
  4594  000906  8954               	bsf	84,4,b	;volatile
  4595                           
  4596                           ;servos.c: 699: UEP2 = 0;
  4597  000908  0E00               	movlw	0
  4598  00090A  6F55               	movwf	85,b	;volatile
  4599                           
  4600                           ; BSR set to: 15
  4601                           ;servos.c: 700: UEP2bits.EPCONDIS = 1;
  4602  00090C  8755               	bsf	85,3,b	;volatile
  4603                           
  4604                           ; BSR set to: 15
  4605                           ;servos.c: 701: UEP2bits.EPOUTEN = 1;
  4606  00090E  8555               	bsf	85,2,b	;volatile
  4607                           
  4608                           ; BSR set to: 15
  4609                           ;servos.c: 702: UEP2bits.EPINEN = 1;
  4610  000910  8355               	bsf	85,1,b	;volatile
  4611                           
  4612                           ; BSR set to: 15
  4613                           ;servos.c: 703: UEP2bits.EPHSHK = 1;
  4614  000912  8955               	bsf	85,4,b	;volatile
  4615                           
  4616                           ; BSR set to: 15
  4617                           ;servos.c: 705: *(EP1_IN + 1) = (0x10); *(EP1_IN + 2) = ((uint16_t)(cdc_in_packet) & 0xf
      +                          f); *(EP1_IN + 3) = ((uint16_t)(cdc_in_packet) >> 8); *(EP1_IN) = (0x80 | 0x40);
  4618  000914  EE20 F001          	lfsr	2,1
  4619  000918  505B               	movf	_EP1_IN,w,c
  4620  00091A  26D9               	addwf	fsr2l,f,c
  4621  00091C  505C               	movf	_EP1_IN+1,w,c
  4622  00091E  22DA               	addwfc	fsr2h,f,c
  4623  000920  0E10               	movlw	16
  4624  000922  6EDF               	movwf	indf2,c
  4625                           
  4626                           ; BSR set to: 15
  4627  000924  EE20 F002          	lfsr	2,2
  4628  000928  505B               	movf	_EP1_IN,w,c
  4629  00092A  26D9               	addwf	fsr2l,f,c
  4630  00092C  505C               	movf	_EP1_IN+1,w,c
  4631  00092E  22DA               	addwfc	fsr2h,f,c
  4632  000930  C055  FFDF         	movff	_cdc_in_packet,indf2
  4633                           
  4634                           ; BSR set to: 15
  4635  000934  EE20 F003          	lfsr	2,3
  4636  000938  505B               	movf	_EP1_IN,w,c
  4637  00093A  26D9               	addwf	fsr2l,f,c
  4638  00093C  505C               	movf	_EP1_IN+1,w,c
  4639  00093E  22DA               	addwfc	fsr2h,f,c
  4640  000940  5056               	movf	_cdc_in_packet+1,w,c
  4641  000942  6EDF               	movwf	indf2,c
  4642                           
  4643                           ; BSR set to: 15
  4644  000944  C05B  FFD9         	movff	_EP1_IN,fsr2l
  4645  000948  C05C  FFDA         	movff	_EP1_IN+1,fsr2h
  4646  00094C  0EC0               	movlw	192
  4647  00094E  6EDF               	movwf	indf2,c
  4648                           
  4649                           ; BSR set to: 15
  4650                           ;servos.c: 707: *(EP2_IN + 1) = (0x40); *(EP2_IN + 2) = ((uint16_t)(data_in_packet) & 0x
      +                          ff); *(EP2_IN + 3) = ((uint16_t)(data_in_packet) >> 8); *(EP2_IN) = (0x80 | 0x40);
  4651  000950  0100               	movlb	0	; () banked
  4652  000952  EE20 F001          	lfsr	2,1
  4653  000956  51AA               	movf	_EP2_IN& (0+255),w,b
  4654  000958  26D9               	addwf	fsr2l,f,c
  4655  00095A  51AB               	movf	(_EP2_IN+1)& (0+255),w,b
  4656  00095C  22DA               	addwfc	fsr2h,f,c
  4657  00095E  0E40               	movlw	64
  4658  000960  6EDF               	movwf	indf2,c
  4659                           
  4660                           ; BSR set to: 0
  4661  000962  EE20 F002          	lfsr	2,2
  4662  000966  51AA               	movf	_EP2_IN& (0+255),w,b
  4663  000968  26D9               	addwf	fsr2l,f,c
  4664  00096A  51AB               	movf	(_EP2_IN+1)& (0+255),w,b
  4665  00096C  22DA               	addwfc	fsr2h,f,c
  4666  00096E  C0A8  FFDF         	movff	_data_in_packet,indf2
  4667                           
  4668                           ; BSR set to: 0
  4669  000972  EE20 F003          	lfsr	2,3
  4670  000976  51AA               	movf	_EP2_IN& (0+255),w,b
  4671  000978  26D9               	addwf	fsr2l,f,c
  4672  00097A  51AB               	movf	(_EP2_IN+1)& (0+255),w,b
  4673  00097C  22DA               	addwfc	fsr2h,f,c
  4674  00097E  51A9               	movf	(_data_in_packet+1)& (0+255),w,b
  4675  000980  6EDF               	movwf	indf2,c
  4676                           
  4677                           ; BSR set to: 0
  4678  000982  C0AA  FFD9         	movff	_EP2_IN,fsr2l
  4679  000986  C0AB  FFDA         	movff	_EP2_IN+1,fsr2h
  4680  00098A  0EC0               	movlw	192
  4681  00098C  6EDF               	movwf	indf2,c
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;servos.c: 708: *(EP2_OUT + 1) = (0x40); *(EP2_OUT + 2) = ((uint16_t)(data_out_packet) &
      +                           0xff); *(EP2_OUT + 3) = ((uint16_t)(data_out_packet) >> 8); *(EP2_OUT) = (0x80 | 0x00 |
      +                           0x08);
  4685  00098E  EE20 F001          	lfsr	2,1
  4686  000992  51AC               	movf	_EP2_OUT& (0+255),w,b
  4687  000994  26D9               	addwf	fsr2l,f,c
  4688  000996  51AD               	movf	(_EP2_OUT+1)& (0+255),w,b
  4689  000998  22DA               	addwfc	fsr2h,f,c
  4690  00099A  0E40               	movlw	64
  4691  00099C  6EDF               	movwf	indf2,c
  4692                           
  4693                           ; BSR set to: 0
  4694  00099E  EE20 F002          	lfsr	2,2
  4695  0009A2  51AC               	movf	_EP2_OUT& (0+255),w,b
  4696  0009A4  26D9               	addwf	fsr2l,f,c
  4697  0009A6  51AD               	movf	(_EP2_OUT+1)& (0+255),w,b
  4698  0009A8  22DA               	addwfc	fsr2h,f,c
  4699  0009AA  C0A6  FFDF         	movff	_data_out_packet,indf2
  4700                           
  4701                           ; BSR set to: 0
  4702  0009AE  EE20 F003          	lfsr	2,3
  4703  0009B2  51AC               	movf	_EP2_OUT& (0+255),w,b
  4704  0009B4  26D9               	addwf	fsr2l,f,c
  4705  0009B6  51AD               	movf	(_EP2_OUT+1)& (0+255),w,b
  4706  0009B8  22DA               	addwfc	fsr2h,f,c
  4707  0009BA  51A7               	movf	(_data_out_packet+1)& (0+255),w,b
  4708  0009BC  6EDF               	movwf	indf2,c
  4709                           
  4710                           ; BSR set to: 0
  4711  0009BE  C0AC  FFD9         	movff	_EP2_OUT,fsr2l
  4712  0009C2  C0AD  FFDA         	movff	_EP2_OUT+1,fsr2h
  4713  0009C6  0E88               	movlw	136
  4714  0009C8  6EDF               	movwf	indf2,c
  4715                           
  4716                           ; BSR set to: 0
  4717  0009CA  0012               	return		;funcret
  4718  0009CC                     __end_of_user_endpoint_init:
  4719                           	opt stack 0
  4720                           tosu	equ	0xFFF
  4721                           tosh	equ	0xFFE
  4722                           tosl	equ	0xFFD
  4723                           pclatu	equ	0xFFB
  4724                           pclath	equ	0xFFA
  4725                           tblptru	equ	0xFF8
  4726                           tblptrh	equ	0xFF7
  4727                           tblptrl	equ	0xFF6
  4728                           tablat	equ	0xFF5
  4729                           prodh	equ	0xFF4
  4730                           prodl	equ	0xFF3
  4731                           intcon	equ	0xFF2
  4732                           postinc0	equ	0xFEE
  4733                           fsr0h	equ	0xFEA
  4734                           fsr0l	equ	0xFE9
  4735                           wreg	equ	0xFE8
  4736                           indf1	equ	0xFE7
  4737                           postdec1	equ	0xFE5
  4738                           fsr1h	equ	0xFE2
  4739                           fsr1l	equ	0xFE1
  4740                           bsr	equ	0xFE0
  4741                           indf2	equ	0xFDF
  4742                           postinc2	equ	0xFDE
  4743                           fsr2h	equ	0xFDA
  4744                           fsr2l	equ	0xFD9
  4745                           status	equ	0xFD8
  4746                           
  4747 ;; *************** function _print_number *****************
  4748 ;; Defined at:
  4749 ;;		line 268 in file "servos.c"
  4750 ;; Parameters:    Size  Location     Type
  4751 ;;  number          2   14[COMRAM] unsigned int 
  4752 ;; Auto vars:     Size  Location     Type
  4753 ;;		None
  4754 ;; Return value:  Size  Location     Type
  4755 ;;                  1    wreg      void 
  4756 ;; Registers used:
  4757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4758 ;; Tracked objects:
  4759 ;;		On entry : 0/0
  4760 ;;		On exit  : 0/0
  4761 ;;		Unchanged: 0/0
  4762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4763 ;;      Params:         2       0       0       0
  4764 ;;      Locals:         0       0       0       0
  4765 ;;      Temps:          0       0       0       0
  4766 ;;      Totals:         2       0       0       0
  4767 ;;Total ram usage:        2 bytes
  4768 ;; Hardware stack levels used:    1
  4769 ;; Hardware stack levels required when called:    2
  4770 ;; This function calls:
  4771 ;;		_print_number_nospace
  4772 ;;		i2_print_byte
  4773 ;; This function is called by:
  4774 ;;		_usb_check_std_request
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           	psect	text22
  4779  0010D0                     __ptext22:
  4780                           	opt stack 0
  4781  0010D0                     _print_number:
  4782                           	opt stack 20
  4783                           
  4784                           ;servos.c: 270: print_number_nospace(number);
  4785                           
  4786                           ; BSR set to: 0
  4787                           ;incstack = 0
  4788  0010D0  C00F  F00D         	movff	print_number@number,print_number_nospace@number
  4789  0010D4  C010  F00E         	movff	print_number@number+1,print_number_nospace@number+1
  4790  0010D8  EC00  F004         	call	_print_number_nospace	;wreg free
  4791                           
  4792                           ;servos.c: 271: print_byte(' ');
  4793  0010DC  0E20               	movlw	32
  4794  0010DE  EC0C  F008         	call	i2_print_byte
  4795  0010E2  0012               	return		;funcret
  4796  0010E4                     __end_of_print_number:
  4797                           	opt stack 0
  4798                           tosu	equ	0xFFF
  4799                           tosh	equ	0xFFE
  4800                           tosl	equ	0xFFD
  4801                           pclatu	equ	0xFFB
  4802                           pclath	equ	0xFFA
  4803                           tblptru	equ	0xFF8
  4804                           tblptrh	equ	0xFF7
  4805                           tblptrl	equ	0xFF6
  4806                           tablat	equ	0xFF5
  4807                           prodh	equ	0xFF4
  4808                           prodl	equ	0xFF3
  4809                           intcon	equ	0xFF2
  4810                           postinc0	equ	0xFEE
  4811                           fsr0h	equ	0xFEA
  4812                           fsr0l	equ	0xFE9
  4813                           wreg	equ	0xFE8
  4814                           indf1	equ	0xFE7
  4815                           postdec1	equ	0xFE5
  4816                           fsr1h	equ	0xFE2
  4817                           fsr1l	equ	0xFE1
  4818                           bsr	equ	0xFE0
  4819                           indf2	equ	0xFDF
  4820                           postinc2	equ	0xFDE
  4821                           fsr2h	equ	0xFDA
  4822                           fsr2l	equ	0xFD9
  4823                           status	equ	0xFD8
  4824                           
  4825 ;; *************** function _print_number_nospace *****************
  4826 ;; Defined at:
  4827 ;;		line 259 in file "servos.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;  number          2   12[COMRAM] unsigned int 
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;		None
  4832 ;; Return value:  Size  Location     Type
  4833 ;;                  1    wreg      void 
  4834 ;; Registers used:
  4835 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4836 ;; Tracked objects:
  4837 ;;		On entry : 0/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4841 ;;      Params:         2       0       0       0
  4842 ;;      Locals:         0       0       0       0
  4843 ;;      Temps:          0       0       0       0
  4844 ;;      Totals:         2       0       0       0
  4845 ;;Total ram usage:        2 bytes
  4846 ;; Hardware stack levels used:    1
  4847 ;; Hardware stack levels required when called:    1
  4848 ;; This function calls:
  4849 ;;		___lwdiv
  4850 ;;		___lwmod
  4851 ;;		i2_print_byte
  4852 ;; This function is called by:
  4853 ;;		_print_number
  4854 ;; This function uses a non-reentrant model
  4855 ;;
  4856                           
  4857                           	psect	text23
  4858  000800                     __ptext23:
  4859                           	opt stack 0
  4860  000800                     _print_number_nospace:
  4861                           	opt stack 20
  4862                           
  4863                           ;servos.c: 261: if(number >= 10000) print_byte('0' + (number / 10000));
  4864                           
  4865                           ;incstack = 0
  4866  000800  0E10               	movlw	16
  4867  000802  5C0D               	subwf	print_number_nospace@number,w,c
  4868  000804  0E27               	movlw	39
  4869  000806  580E               	subwfb	print_number_nospace@number+1,w,c
  4870  000808  A0D8               	btfss	status,0,c
  4871  00080A  D00E               	goto	i2l152
  4872  00080C  C00D  F001         	movff	print_number_nospace@number,___lwdiv@dividend
  4873  000810  C00E  F002         	movff	print_number_nospace@number+1,___lwdiv@dividend+1
  4874  000814  0E27               	movlw	39
  4875  000816  6E04               	movwf	___lwdiv@divisor+1,c
  4876  000818  0E10               	movlw	16
  4877  00081A  6E03               	movwf	___lwdiv@divisor,c
  4878  00081C  EC37  F006         	call	___lwdiv	;wreg free
  4879  000820  5001               	movf	?___lwdiv,w,c
  4880  000822  0F30               	addlw	48
  4881  000824  EC0C  F008         	call	i2_print_byte
  4882  000828                     i2l152:
  4883                           
  4884                           ;servos.c: 262: if(number >= 1000) print_byte('0' + ((number / 1000) % 10));
  4885  000828  0EE8               	movlw	232
  4886  00082A  5C0D               	subwf	print_number_nospace@number,w,c
  4887  00082C  0E03               	movlw	3
  4888  00082E  580E               	subwfb	print_number_nospace@number+1,w,c
  4889  000830  A0D8               	btfss	status,0,c
  4890  000832  D018               	goto	i2l153
  4891  000834  0E03               	movlw	3
  4892  000836  6E04               	movwf	___lwdiv@divisor+1,c
  4893  000838  0EE8               	movlw	232
  4894  00083A  6E03               	movwf	___lwdiv@divisor,c
  4895  00083C  C00D  F001         	movff	print_number_nospace@number,___lwdiv@dividend
  4896  000840  C00E  F002         	movff	print_number_nospace@number+1,___lwdiv@dividend+1
  4897  000844  EC37  F006         	call	___lwdiv	;wreg free
  4898  000848  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  4899  00084C  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  4900  000850  0E00               	movlw	0
  4901  000852  6E0B               	movwf	___lwmod@divisor+1,c
  4902  000854  0E0A               	movlw	10
  4903  000856  6E0A               	movwf	___lwmod@divisor,c
  4904  000858  ECF9  F006         	call	___lwmod	;wreg free
  4905  00085C  5008               	movf	?___lwmod,w,c
  4906  00085E  0F30               	addlw	48
  4907  000860  EC0C  F008         	call	i2_print_byte
  4908  000864                     i2l153:
  4909                           
  4910                           ;servos.c: 263: if(number >= 100) print_byte('0' + ((number / 100) % 10));
  4911  000864  500E               	movf	print_number_nospace@number+1,w,c
  4912  000866  E104               	bnz	i2u115_40
  4913  000868  0E64               	movlw	100
  4914  00086A  5C0D               	subwf	print_number_nospace@number,w,c
  4915  00086C  A0D8               	btfss	status,0,c
  4916  00086E  D018               	goto	i2l154
  4917  000870                     i2u115_40:
  4918  000870  0E00               	movlw	0
  4919  000872  6E04               	movwf	___lwdiv@divisor+1,c
  4920  000874  0E64               	movlw	100
  4921  000876  6E03               	movwf	___lwdiv@divisor,c
  4922  000878  C00D  F001         	movff	print_number_nospace@number,___lwdiv@dividend
  4923  00087C  C00E  F002         	movff	print_number_nospace@number+1,___lwdiv@dividend+1
  4924  000880  EC37  F006         	call	___lwdiv	;wreg free
  4925  000884  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  4926  000888  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  4927  00088C  0E00               	movlw	0
  4928  00088E  6E0B               	movwf	___lwmod@divisor+1,c
  4929  000890  0E0A               	movlw	10
  4930  000892  6E0A               	movwf	___lwmod@divisor,c
  4931  000894  ECF9  F006         	call	___lwmod	;wreg free
  4932  000898  5008               	movf	?___lwmod,w,c
  4933  00089A  0F30               	addlw	48
  4934  00089C  EC0C  F008         	call	i2_print_byte
  4935  0008A0                     i2l154:
  4936                           
  4937                           ;servos.c: 264: if(number >= 10) print_byte('0' + ((number / 10) % 10));
  4938  0008A0  500E               	movf	print_number_nospace@number+1,w,c
  4939  0008A2  E104               	bnz	i2u116_40
  4940  0008A4  0E0A               	movlw	10
  4941  0008A6  5C0D               	subwf	print_number_nospace@number,w,c
  4942  0008A8  A0D8               	btfss	status,0,c
  4943  0008AA  D018               	goto	i2l155
  4944  0008AC                     i2u116_40:
  4945  0008AC  0E00               	movlw	0
  4946  0008AE  6E04               	movwf	___lwdiv@divisor+1,c
  4947  0008B0  0E0A               	movlw	10
  4948  0008B2  6E03               	movwf	___lwdiv@divisor,c
  4949  0008B4  C00D  F001         	movff	print_number_nospace@number,___lwdiv@dividend
  4950  0008B8  C00E  F002         	movff	print_number_nospace@number+1,___lwdiv@dividend+1
  4951  0008BC  EC37  F006         	call	___lwdiv	;wreg free
  4952  0008C0  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  4953  0008C4  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  4954  0008C8  0E00               	movlw	0
  4955  0008CA  6E0B               	movwf	___lwmod@divisor+1,c
  4956  0008CC  0E0A               	movlw	10
  4957  0008CE  6E0A               	movwf	___lwmod@divisor,c
  4958  0008D0  ECF9  F006         	call	___lwmod	;wreg free
  4959  0008D4  5008               	movf	?___lwmod,w,c
  4960  0008D6  0F30               	addlw	48
  4961  0008D8  EC0C  F008         	call	i2_print_byte
  4962  0008DC                     i2l155:
  4963                           
  4964                           ;servos.c: 265: print_byte('0' + (number % 10));
  4965  0008DC  C00D  F008         	movff	print_number_nospace@number,___lwmod@dividend
  4966  0008E0  C00E  F009         	movff	print_number_nospace@number+1,___lwmod@dividend+1
  4967  0008E4  0E00               	movlw	0
  4968  0008E6  6E0B               	movwf	___lwmod@divisor+1,c
  4969  0008E8  0E0A               	movlw	10
  4970  0008EA  6E0A               	movwf	___lwmod@divisor,c
  4971  0008EC  ECF9  F006         	call	___lwmod	;wreg free
  4972  0008F0  5008               	movf	?___lwmod,w,c
  4973  0008F2  0F30               	addlw	48
  4974  0008F4  EC0C  F008         	call	i2_print_byte
  4975  0008F8  0012               	return		;funcret
  4976  0008FA                     __end_of_print_number_nospace:
  4977                           	opt stack 0
  4978                           tosu	equ	0xFFF
  4979                           tosh	equ	0xFFE
  4980                           tosl	equ	0xFFD
  4981                           pclatu	equ	0xFFB
  4982                           pclath	equ	0xFFA
  4983                           tblptru	equ	0xFF8
  4984                           tblptrh	equ	0xFF7
  4985                           tblptrl	equ	0xFF6
  4986                           tablat	equ	0xFF5
  4987                           prodh	equ	0xFF4
  4988                           prodl	equ	0xFF3
  4989                           intcon	equ	0xFF2
  4990                           postinc0	equ	0xFEE
  4991                           fsr0h	equ	0xFEA
  4992                           fsr0l	equ	0xFE9
  4993                           wreg	equ	0xFE8
  4994                           indf1	equ	0xFE7
  4995                           postdec1	equ	0xFE5
  4996                           fsr1h	equ	0xFE2
  4997                           fsr1l	equ	0xFE1
  4998                           bsr	equ	0xFE0
  4999                           indf2	equ	0xFDF
  5000                           postinc2	equ	0xFDE
  5001                           fsr2h	equ	0xFDA
  5002                           fsr2l	equ	0xFD9
  5003                           status	equ	0xFD8
  5004                           
  5005 ;; *************** function ___lwmod *****************
  5006 ;; Defined at:
  5007 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwmod.c"
  5008 ;; Parameters:    Size  Location     Type
  5009 ;;  dividend        2    7[COMRAM] unsigned int 
  5010 ;;  divisor         2    9[COMRAM] unsigned int 
  5011 ;; Auto vars:     Size  Location     Type
  5012 ;;  counter         1   11[COMRAM] unsigned char 
  5013 ;; Return value:  Size  Location     Type
  5014 ;;                  2    7[COMRAM] unsigned int 
  5015 ;; Registers used:
  5016 ;;		wreg, status,2, status,0
  5017 ;; Tracked objects:
  5018 ;;		On entry : 0/0
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5022 ;;      Params:         4       0       0       0
  5023 ;;      Locals:         1       0       0       0
  5024 ;;      Temps:          0       0       0       0
  5025 ;;      Totals:         5       0       0       0
  5026 ;;Total ram usage:        5 bytes
  5027 ;; Hardware stack levels used:    1
  5028 ;; This function calls:
  5029 ;;		Nothing
  5030 ;; This function is called by:
  5031 ;;		_print_number_nospace
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034                           
  5035                           	psect	text24
  5036  000DF2                     __ptext24:
  5037                           	opt stack 0
  5038  000DF2                     ___lwmod:
  5039                           	opt stack 20
  5040                           
  5041                           ;incstack = 0
  5042  000DF2  500A               	movf	___lwmod@divisor,w,c
  5043  000DF4  100B               	iorwf	___lwmod@divisor+1,w,c
  5044  000DF6  B4D8               	btfsc	status,2,c
  5045  000DF8  D018               	goto	i2l842
  5046  000DFA  0E01               	movlw	1
  5047  000DFC  6E0C               	movwf	___lwmod@counter,c
  5048  000DFE  D004               	goto	i2l837
  5049  000E00  90D8               	bcf	status,0,c
  5050  000E02  360A               	rlcf	___lwmod@divisor,f,c
  5051  000E04  360B               	rlcf	___lwmod@divisor+1,f,c
  5052  000E06  2A0C               	incf	___lwmod@counter,f,c
  5053  000E08                     i2l837:
  5054  000E08  AE0B               	btfss	___lwmod@divisor+1,7,c
  5055  000E0A  D7FA               	goto	i2l838
  5056  000E0C                     i2u109_40:
  5057  000E0C  500A               	movf	___lwmod@divisor,w,c
  5058  000E0E  5C08               	subwf	___lwmod@dividend,w,c
  5059  000E10  500B               	movf	___lwmod@divisor+1,w,c
  5060  000E12  5809               	subwfb	___lwmod@dividend+1,w,c
  5061  000E14  A0D8               	btfss	status,0,c
  5062  000E16  D004               	goto	i2l841
  5063  000E18  500A               	movf	___lwmod@divisor,w,c
  5064  000E1A  5E08               	subwf	___lwmod@dividend,f,c
  5065  000E1C  500B               	movf	___lwmod@divisor+1,w,c
  5066  000E1E  5A09               	subwfb	___lwmod@dividend+1,f,c
  5067  000E20                     i2l841:
  5068  000E20  90D8               	bcf	status,0,c
  5069  000E22  320B               	rrcf	___lwmod@divisor+1,f,c
  5070  000E24  320A               	rrcf	___lwmod@divisor,f,c
  5071  000E26  2E0C               	decfsz	___lwmod@counter,f,c
  5072  000E28  D7F1               	goto	i2u109_40
  5073  000E2A                     i2l842:
  5074  000E2A  C008  F008         	movff	___lwmod@dividend,?___lwmod
  5075  000E2E  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  5076  000E32  0012               	return		;funcret
  5077  000E34                     __end_of___lwmod:
  5078                           	opt stack 0
  5079                           tosu	equ	0xFFF
  5080                           tosh	equ	0xFFE
  5081                           tosl	equ	0xFFD
  5082                           pclatu	equ	0xFFB
  5083                           pclath	equ	0xFFA
  5084                           tblptru	equ	0xFF8
  5085                           tblptrh	equ	0xFF7
  5086                           tblptrl	equ	0xFF6
  5087                           tablat	equ	0xFF5
  5088                           prodh	equ	0xFF4
  5089                           prodl	equ	0xFF3
  5090                           intcon	equ	0xFF2
  5091                           postinc0	equ	0xFEE
  5092                           fsr0h	equ	0xFEA
  5093                           fsr0l	equ	0xFE9
  5094                           wreg	equ	0xFE8
  5095                           indf1	equ	0xFE7
  5096                           postdec1	equ	0xFE5
  5097                           fsr1h	equ	0xFE2
  5098                           fsr1l	equ	0xFE1
  5099                           bsr	equ	0xFE0
  5100                           indf2	equ	0xFDF
  5101                           postinc2	equ	0xFDE
  5102                           fsr2h	equ	0xFDA
  5103                           fsr2l	equ	0xFD9
  5104                           status	equ	0xFD8
  5105                           
  5106 ;; *************** function ___lwdiv *****************
  5107 ;; Defined at:
  5108 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwdiv.c"
  5109 ;; Parameters:    Size  Location     Type
  5110 ;;  dividend        2    0[COMRAM] unsigned int 
  5111 ;;  divisor         2    2[COMRAM] unsigned int 
  5112 ;; Auto vars:     Size  Location     Type
  5113 ;;  quotient        2    4[COMRAM] unsigned int 
  5114 ;;  counter         1    6[COMRAM] unsigned char 
  5115 ;; Return value:  Size  Location     Type
  5116 ;;                  2    0[COMRAM] unsigned int 
  5117 ;; Registers used:
  5118 ;;		wreg, status,2, status,0
  5119 ;; Tracked objects:
  5120 ;;		On entry : 0/0
  5121 ;;		On exit  : 0/0
  5122 ;;		Unchanged: 0/0
  5123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5124 ;;      Params:         4       0       0       0
  5125 ;;      Locals:         3       0       0       0
  5126 ;;      Temps:          0       0       0       0
  5127 ;;      Totals:         7       0       0       0
  5128 ;;Total ram usage:        7 bytes
  5129 ;; Hardware stack levels used:    1
  5130 ;; This function calls:
  5131 ;;		Nothing
  5132 ;; This function is called by:
  5133 ;;		_print_number_nospace
  5134 ;; This function uses a non-reentrant model
  5135 ;;
  5136                           
  5137                           	psect	text25
  5138  000C6E                     __ptext25:
  5139                           	opt stack 0
  5140  000C6E                     ___lwdiv:
  5141                           	opt stack 20
  5142                           
  5143                           ;incstack = 0
  5144  000C6E  0E00               	movlw	0
  5145  000C70  6E06               	movwf	___lwdiv@quotient+1,c
  5146  000C72  0E00               	movlw	0
  5147  000C74  6E05               	movwf	___lwdiv@quotient,c
  5148  000C76  5003               	movf	___lwdiv@divisor,w,c
  5149  000C78  1004               	iorwf	___lwdiv@divisor+1,w,c
  5150  000C7A  B4D8               	btfsc	status,2,c
  5151  000C7C  D01C               	goto	i2l832
  5152  000C7E  0E01               	movlw	1
  5153  000C80  6E07               	movwf	___lwdiv@counter,c
  5154  000C82  D004               	goto	i2l827
  5155  000C84  90D8               	bcf	status,0,c
  5156  000C86  3603               	rlcf	___lwdiv@divisor,f,c
  5157  000C88  3604               	rlcf	___lwdiv@divisor+1,f,c
  5158  000C8A  2A07               	incf	___lwdiv@counter,f,c
  5159  000C8C                     i2l827:
  5160  000C8C  AE04               	btfss	___lwdiv@divisor+1,7,c
  5161  000C8E  D7FA               	goto	i2l828
  5162  000C90                     i2u106_40:
  5163  000C90  90D8               	bcf	status,0,c
  5164  000C92  3605               	rlcf	___lwdiv@quotient,f,c
  5165  000C94  3606               	rlcf	___lwdiv@quotient+1,f,c
  5166  000C96  5003               	movf	___lwdiv@divisor,w,c
  5167  000C98  5C01               	subwf	___lwdiv@dividend,w,c
  5168  000C9A  5004               	movf	___lwdiv@divisor+1,w,c
  5169  000C9C  5802               	subwfb	___lwdiv@dividend+1,w,c
  5170  000C9E  A0D8               	btfss	status,0,c
  5171  000CA0  D005               	goto	i2l831
  5172  000CA2  5003               	movf	___lwdiv@divisor,w,c
  5173  000CA4  5E01               	subwf	___lwdiv@dividend,f,c
  5174  000CA6  5004               	movf	___lwdiv@divisor+1,w,c
  5175  000CA8  5A02               	subwfb	___lwdiv@dividend+1,f,c
  5176  000CAA  8005               	bsf	___lwdiv@quotient,0,c
  5177  000CAC                     i2l831:
  5178  000CAC  90D8               	bcf	status,0,c
  5179  000CAE  3204               	rrcf	___lwdiv@divisor+1,f,c
  5180  000CB0  3203               	rrcf	___lwdiv@divisor,f,c
  5181  000CB2  2E07               	decfsz	___lwdiv@counter,f,c
  5182  000CB4  D7ED               	goto	i2u106_40
  5183  000CB6                     i2l832:
  5184  000CB6  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  5185  000CBA  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5186  000CBE  0012               	return		;funcret
  5187  000CC0                     __end_of___lwdiv:
  5188                           	opt stack 0
  5189                           tosu	equ	0xFFF
  5190                           tosh	equ	0xFFE
  5191                           tosl	equ	0xFFD
  5192                           pclatu	equ	0xFFB
  5193                           pclath	equ	0xFFA
  5194                           tblptru	equ	0xFF8
  5195                           tblptrh	equ	0xFF7
  5196                           tblptrl	equ	0xFF6
  5197                           tablat	equ	0xFF5
  5198                           prodh	equ	0xFF4
  5199                           prodl	equ	0xFF3
  5200                           intcon	equ	0xFF2
  5201                           postinc0	equ	0xFEE
  5202                           fsr0h	equ	0xFEA
  5203                           fsr0l	equ	0xFE9
  5204                           wreg	equ	0xFE8
  5205                           indf1	equ	0xFE7
  5206                           postdec1	equ	0xFE5
  5207                           fsr1h	equ	0xFE2
  5208                           fsr1l	equ	0xFE1
  5209                           bsr	equ	0xFE0
  5210                           indf2	equ	0xFDF
  5211                           postinc2	equ	0xFDE
  5212                           fsr2h	equ	0xFDA
  5213                           fsr2l	equ	0xFD9
  5214                           status	equ	0xFD8
  5215                           
  5216 ;; *************** function _handle_usb_ctrl_out *****************
  5217 ;; Defined at:
  5218 ;;		line 1001 in file "servos.c"
  5219 ;; Parameters:    Size  Location     Type
  5220 ;;		None
  5221 ;; Auto vars:     Size  Location     Type
  5222 ;;  temp            1    4[COMRAM] unsigned char 
  5223 ;; Return value:  Size  Location     Type
  5224 ;;                  1    wreg      void 
  5225 ;; Registers used:
  5226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5227 ;; Tracked objects:
  5228 ;;		On entry : 0/0
  5229 ;;		On exit  : 0/0
  5230 ;;		Unchanged: 0/0
  5231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5232 ;;      Params:         0       0       0       0
  5233 ;;      Locals:         1       0       0       0
  5234 ;;      Temps:          0       0       0       0
  5235 ;;      Totals:         1       0       0       0
  5236 ;;Total ram usage:        1 bytes
  5237 ;; Hardware stack levels used:    1
  5238 ;; Hardware stack levels required when called:    2
  5239 ;; This function calls:
  5240 ;;		_print_hex2
  5241 ;;		i2_print_text
  5242 ;; This function is called by:
  5243 ;;		_handle_usb_ctrl_output
  5244 ;; This function uses a non-reentrant model
  5245 ;;
  5246                           
  5247                           	psect	text26
  5248  0009CC                     __ptext26:
  5249                           	opt stack 0
  5250  0009CC                     _handle_usb_ctrl_out:
  5251                           	opt stack 22
  5252                           
  5253                           ;servos.c: 1005: uint8_t temp;
  5254                           ;servos.c: 1006: temp = *(EP0_OUT + 1);
  5255                           
  5256                           ;incstack = 0
  5257  0009CC  0100               	movlb	0	; () banked
  5258  0009CE  EE20 F001          	lfsr	2,1
  5259  0009D2  51AE               	movf	_EP0_OUT& (0+255),w,b
  5260  0009D4  26D9               	addwf	fsr2l,f,c
  5261  0009D6  51AF               	movf	(_EP0_OUT+1)& (0+255),w,b
  5262  0009D8  22DA               	addwfc	fsr2h,f,c
  5263  0009DA  50DF               	movf	indf2,w,c
  5264  0009DC  6E05               	movwf	handle_usb_ctrl_out@temp,c
  5265                           
  5266                           ; BSR set to: 0
  5267                           ;servos.c: 1008: data_count += temp;
  5268  0009DE  5005               	movf	handle_usb_ctrl_out@temp,w,c
  5269  0009E0  2641               	addwf	_data_count,f,c
  5270  0009E2  0E00               	movlw	0
  5271  0009E4  2242               	addwfc	_data_count+1,f,c
  5272                           
  5273                           ; BSR set to: 0
  5274                           ;servos.c: 1011: print_text("ctrl_out ");
  5275  0009E6  0EF5               	movlw	low STR_5
  5276  0009E8  6E02               	movwf	i2print_text@s,c
  5277  0009EA  0E3F               	movlw	high STR_5
  5278  0009EC  6E03               	movwf	i2print_text@s+1,c
  5279  0009EE  EC24  F008         	call	i2_print_text	;wreg free
  5280                           
  5281                           ;servos.c: 1012: print_hex2(setup_out_packet[0]);
  5282  0009F2  C059  FFD9         	movff	_setup_out_packet,fsr2l
  5283  0009F6  C05A  FFDA         	movff	_setup_out_packet+1,fsr2h
  5284  0009FA  50DF               	movf	indf2,w,c
  5285  0009FC  EC88  F006         	call	_print_hex2
  5286                           
  5287                           ;servos.c: 1013: print_hex2(setup_out_packet[1]);
  5288  000A00  EE20 F001          	lfsr	2,1
  5289  000A04  5059               	movf	_setup_out_packet,w,c
  5290  000A06  26D9               	addwf	fsr2l,f,c
  5291  000A08  505A               	movf	_setup_out_packet+1,w,c
  5292  000A0A  22DA               	addwfc	fsr2h,f,c
  5293  000A0C  50DF               	movf	indf2,w,c
  5294  000A0E  EC88  F006         	call	_print_hex2
  5295                           
  5296                           ;servos.c: 1014: print_hex2(setup_out_packet[2]);
  5297  000A12  EE20 F002          	lfsr	2,2
  5298  000A16  5059               	movf	_setup_out_packet,w,c
  5299  000A18  26D9               	addwf	fsr2l,f,c
  5300  000A1A  505A               	movf	_setup_out_packet+1,w,c
  5301  000A1C  22DA               	addwfc	fsr2h,f,c
  5302  000A1E  50DF               	movf	indf2,w,c
  5303  000A20  EC88  F006         	call	_print_hex2
  5304                           
  5305                           ;servos.c: 1015: print_hex2(setup_out_packet[3]);
  5306  000A24  EE20 F003          	lfsr	2,3
  5307  000A28  5059               	movf	_setup_out_packet,w,c
  5308  000A2A  26D9               	addwf	fsr2l,f,c
  5309  000A2C  505A               	movf	_setup_out_packet+1,w,c
  5310  000A2E  22DA               	addwfc	fsr2h,f,c
  5311  000A30  50DF               	movf	indf2,w,c
  5312  000A32  EC88  F006         	call	_print_hex2
  5313                           
  5314                           ;servos.c: 1016: print_hex2(setup_out_packet[4]);
  5315  000A36  EE20 F004          	lfsr	2,4
  5316  000A3A  5059               	movf	_setup_out_packet,w,c
  5317  000A3C  26D9               	addwf	fsr2l,f,c
  5318  000A3E  505A               	movf	_setup_out_packet+1,w,c
  5319  000A40  22DA               	addwfc	fsr2h,f,c
  5320  000A42  50DF               	movf	indf2,w,c
  5321  000A44  EC88  F006         	call	_print_hex2
  5322                           
  5323                           ;servos.c: 1017: print_hex2(setup_out_packet[5]);
  5324  000A48  EE20 F005          	lfsr	2,5
  5325  000A4C  5059               	movf	_setup_out_packet,w,c
  5326  000A4E  26D9               	addwf	fsr2l,f,c
  5327  000A50  505A               	movf	_setup_out_packet+1,w,c
  5328  000A52  22DA               	addwfc	fsr2h,f,c
  5329  000A54  50DF               	movf	indf2,w,c
  5330  000A56  EC88  F006         	call	_print_hex2
  5331                           
  5332                           ;servos.c: 1018: print_hex2(setup_out_packet[6]);
  5333  000A5A  EE20 F006          	lfsr	2,6
  5334  000A5E  5059               	movf	_setup_out_packet,w,c
  5335  000A60  26D9               	addwf	fsr2l,f,c
  5336  000A62  505A               	movf	_setup_out_packet+1,w,c
  5337  000A64  22DA               	addwfc	fsr2h,f,c
  5338  000A66  50DF               	movf	indf2,w,c
  5339  000A68  EC88  F006         	call	_print_hex2
  5340                           
  5341                           ;servos.c: 1019: print_hex2(setup_out_packet[7]);
  5342  000A6C  EE20 F007          	lfsr	2,7
  5343  000A70  5059               	movf	_setup_out_packet,w,c
  5344  000A72  26D9               	addwf	fsr2l,f,c
  5345  000A74  505A               	movf	_setup_out_packet+1,w,c
  5346  000A76  22DA               	addwfc	fsr2h,f,c
  5347  000A78  50DF               	movf	indf2,w,c
  5348  000A7A  EC88  F006         	call	_print_hex2
  5349                           
  5350                           ;servos.c: 1020: print_text("\n");
  5351  000A7E  0EF3               	movlw	low (STR_7+13)
  5352  000A80  6E02               	movwf	i2print_text@s,c
  5353  000A82  0E3F               	movlw	high (STR_7+13)
  5354  000A84  6E03               	movwf	i2print_text@s+1,c
  5355  000A86  EC24  F008         	call	i2_print_text	;wreg free
  5356  000A8A  0012               	return		;funcret
  5357  000A8C                     __end_of_handle_usb_ctrl_out:
  5358                           	opt stack 0
  5359                           tosu	equ	0xFFF
  5360                           tosh	equ	0xFFE
  5361                           tosl	equ	0xFFD
  5362                           pclatu	equ	0xFFB
  5363                           pclath	equ	0xFFA
  5364                           tblptru	equ	0xFF8
  5365                           tblptrh	equ	0xFF7
  5366                           tblptrl	equ	0xFF6
  5367                           tablat	equ	0xFF5
  5368                           prodh	equ	0xFF4
  5369                           prodl	equ	0xFF3
  5370                           intcon	equ	0xFF2
  5371                           postinc0	equ	0xFEE
  5372                           fsr0h	equ	0xFEA
  5373                           fsr0l	equ	0xFE9
  5374                           wreg	equ	0xFE8
  5375                           indf1	equ	0xFE7
  5376                           postdec1	equ	0xFE5
  5377                           fsr1h	equ	0xFE2
  5378                           fsr1l	equ	0xFE1
  5379                           bsr	equ	0xFE0
  5380                           indf2	equ	0xFDF
  5381                           postinc2	equ	0xFDE
  5382                           fsr2h	equ	0xFDA
  5383                           fsr2l	equ	0xFD9
  5384                           status	equ	0xFD8
  5385                           
  5386 ;; *************** function i2_print_text *****************
  5387 ;; Defined at:
  5388 ;;		line 250 in file "servos.c"
  5389 ;; Parameters:    Size  Location     Type
  5390 ;;  s               2    1[COMRAM] PTR const unsigned char 
  5391 ;;		 -> STR_8(36), STR_7(15), STR_6(2), STR_5(10), 
  5392 ;;		 -> STR_4(2), STR_3(17), STR_2(2), STR_1(26), 
  5393 ;; Auto vars:     Size  Location     Type
  5394 ;;		None
  5395 ;; Return value:  Size  Location     Type
  5396 ;;                  1    wreg      void 
  5397 ;; Registers used:
  5398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5399 ;; Tracked objects:
  5400 ;;		On entry : 0/0
  5401 ;;		On exit  : 0/0
  5402 ;;		Unchanged: 0/0
  5403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5404 ;;      Params:         2       0       0       0
  5405 ;;      Locals:         0       0       0       0
  5406 ;;      Temps:          0       0       0       0
  5407 ;;      Totals:         2       0       0       0
  5408 ;;Total ram usage:        2 bytes
  5409 ;; Hardware stack levels used:    1
  5410 ;; Hardware stack levels required when called:    1
  5411 ;; This function calls:
  5412 ;;		i2_print_byte
  5413 ;; This function is called by:
  5414 ;;		_usb_check_std_request
  5415 ;;		_handle_usb_ctrl_out
  5416 ;;		_handle_usb_ctrl_output
  5417 ;; This function uses a non-reentrant model
  5418 ;;
  5419                           
  5420                           	psect	text27
  5421  001048                     __ptext27:
  5422                           	opt stack 0
  5423  001048                     i2_print_text:
  5424                           	opt stack 23
  5425                           
  5426                           ;servos.c: 252: while(*s != 0)
  5427                           
  5428                           ;incstack = 0
  5429  001048  D00B               	goto	i2l146
  5430  00104A                     
  5431                           ;servos.c: 253: {
  5432                           ;servos.c: 254: print_byte(*s);
  5433  00104A  C002  FFF6         	movff	i2print_text@s,tblptrl
  5434  00104E  C003  FFF7         	movff	i2print_text@s+1,tblptrh
  5435  001052                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5436  001052  6AF8               	clrf	tblptru,c
  5437  001054                     	endif
  5438  001054                     	if	0	;tblptru may be non-zero
  5439  001054                     	endif
  5440  001054  0008               	tblrd		*
  5441  001056  50F5               	movf	tablat,w,c
  5442  001058  EC0C  F008         	call	i2_print_byte
  5443                           
  5444                           ;servos.c: 255: s++;
  5445  00105C  4A02               	infsnz	i2print_text@s,f,c
  5446  00105E  2A03               	incf	i2print_text@s+1,f,c
  5447  001060                     i2l146:
  5448  001060  C002  FFF6         	movff	i2print_text@s,tblptrl
  5449  001064  C003  FFF7         	movff	i2print_text@s+1,tblptrh
  5450  001068                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5451  001068  6AF8               	clrf	tblptru,c
  5452  00106A                     	endif
  5453  00106A                     	if	0	;tblptru may be non-zero
  5454  00106A                     	endif
  5455  00106A  0008               	tblrd		*
  5456  00106C  50F5               	movf	tablat,w,c
  5457  00106E  0900               	iorlw	0
  5458  001070  B4D8               	btfsc	status,2,c
  5459  001072  0012               	return	
  5460  001074  D7EA               	goto	i2l147
  5461  001076                     __end_ofi2_print_text:
  5462                           	opt stack 0
  5463                           tosu	equ	0xFFF
  5464                           tosh	equ	0xFFE
  5465                           tosl	equ	0xFFD
  5466                           pclatu	equ	0xFFB
  5467                           pclath	equ	0xFFA
  5468                           tblptru	equ	0xFF8
  5469                           tblptrh	equ	0xFF7
  5470                           tblptrl	equ	0xFF6
  5471                           tablat	equ	0xFF5
  5472                           prodh	equ	0xFF4
  5473                           prodl	equ	0xFF3
  5474                           intcon	equ	0xFF2
  5475                           postinc0	equ	0xFEE
  5476                           fsr0h	equ	0xFEA
  5477                           fsr0l	equ	0xFE9
  5478                           wreg	equ	0xFE8
  5479                           indf1	equ	0xFE7
  5480                           postdec1	equ	0xFE5
  5481                           fsr1h	equ	0xFE2
  5482                           fsr1l	equ	0xFE1
  5483                           bsr	equ	0xFE0
  5484                           indf2	equ	0xFDF
  5485                           postinc2	equ	0xFDE
  5486                           fsr2h	equ	0xFDA
  5487                           fsr2l	equ	0xFD9
  5488                           status	equ	0xFD8
  5489                           
  5490 ;; *************** function _print_hex2 *****************
  5491 ;; Defined at:
  5492 ;;		line 279 in file "servos.c"
  5493 ;; Parameters:    Size  Location     Type
  5494 ;;  number          1    wreg     unsigned char 
  5495 ;; Auto vars:     Size  Location     Type
  5496 ;;  number          1    3[COMRAM] unsigned char 
  5497 ;; Return value:  Size  Location     Type
  5498 ;;                  1    wreg      void 
  5499 ;; Registers used:
  5500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5501 ;; Tracked objects:
  5502 ;;		On entry : 0/0
  5503 ;;		On exit  : 0/0
  5504 ;;		Unchanged: 0/0
  5505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5506 ;;      Params:         0       0       0       0
  5507 ;;      Locals:         1       0       0       0
  5508 ;;      Temps:          2       0       0       0
  5509 ;;      Totals:         3       0       0       0
  5510 ;;Total ram usage:        3 bytes
  5511 ;; Hardware stack levels used:    1
  5512 ;; Hardware stack levels required when called:    1
  5513 ;; This function calls:
  5514 ;;		i2_print_byte
  5515 ;; This function is called by:
  5516 ;;		_handle_usb_ctrl_out
  5517 ;; This function uses a non-reentrant model
  5518 ;;
  5519                           
  5520                           	psect	text28
  5521  000D10                     __ptext28:
  5522                           	opt stack 0
  5523  000D10                     _print_hex2:
  5524                           	opt stack 22
  5525                           
  5526                           ;incstack = 0
  5527                           ;print_hex2@number stored from wreg
  5528  000D10  6E04               	movwf	print_hex2@number,c
  5529                           
  5530                           ;servos.c: 281: print_byte(hex_table[number >> 4]);
  5531  000D12  3804               	swapf	print_hex2@number,w,c
  5532  000D14  0B0F               	andlw	15
  5533  000D16  6E02               	movwf	??_print_hex2& (0+255),c
  5534  000D18  6A03               	clrf	(??_print_hex2+1)& (0+255),c
  5535  000D1A  0EF9               	movlw	low _hex_table
  5536  000D1C  2402               	addwf	??_print_hex2,w,c
  5537  000D1E  6EF6               	movwf	tblptrl,c
  5538  000D20  0E3E               	movlw	high _hex_table
  5539  000D22  2003               	addwfc	??_print_hex2+1,w,c
  5540  000D24  6EF7               	movwf	tblptrh,c
  5541  000D26                     	if	1	;There are 3 active tblptr bytes
  5542  000D26  6AF8               	clrf	tblptru,c
  5543  000D28  0E00               	movlw	low (__mediumconst shr (0+16))
  5544  000D2A  22F8               	addwfc	tblptru,f,c
  5545  000D2C                     	endif
  5546  000D2C  0008               	tblrd		*
  5547  000D2E  50F5               	movf	tablat,w,c
  5548  000D30  EC0C  F008         	call	i2_print_byte
  5549                           
  5550                           ;servos.c: 282: print_byte(hex_table[number & 0xf]);
  5551  000D34  5004               	movf	print_hex2@number,w,c
  5552  000D36  0B0F               	andlw	15
  5553  000D38  6E02               	movwf	??_print_hex2& (0+255),c
  5554  000D3A  6A03               	clrf	(??_print_hex2+1)& (0+255),c
  5555  000D3C  0EF9               	movlw	low _hex_table
  5556  000D3E  2402               	addwf	??_print_hex2,w,c
  5557  000D40  6EF6               	movwf	tblptrl,c
  5558  000D42  0E3E               	movlw	high _hex_table
  5559  000D44  2003               	addwfc	??_print_hex2+1,w,c
  5560  000D46  6EF7               	movwf	tblptrh,c
  5561  000D48                     	if	1	;There are 3 active tblptr bytes
  5562  000D48  6AF8               	clrf	tblptru,c
  5563  000D4A  0E00               	movlw	low (__mediumconst shr (0+16))
  5564  000D4C  22F8               	addwfc	tblptru,f,c
  5565  000D4E                     	endif
  5566  000D4E  0008               	tblrd		*
  5567  000D50  50F5               	movf	tablat,w,c
  5568  000D52  EC0C  F008         	call	i2_print_byte
  5569                           
  5570                           ;servos.c: 283: print_byte(' ');
  5571  000D56  0E20               	movlw	32
  5572  000D58  EC0C  F008         	call	i2_print_byte
  5573  000D5C  0012               	return		;funcret
  5574  000D5E                     __end_of_print_hex2:
  5575                           	opt stack 0
  5576                           tosu	equ	0xFFF
  5577                           tosh	equ	0xFFE
  5578                           tosl	equ	0xFFD
  5579                           pclatu	equ	0xFFB
  5580                           pclath	equ	0xFFA
  5581                           tblptru	equ	0xFF8
  5582                           tblptrh	equ	0xFF7
  5583                           tblptrl	equ	0xFF6
  5584                           tablat	equ	0xFF5
  5585                           prodh	equ	0xFF4
  5586                           prodl	equ	0xFF3
  5587                           intcon	equ	0xFF2
  5588                           postinc0	equ	0xFEE
  5589                           fsr0h	equ	0xFEA
  5590                           fsr0l	equ	0xFE9
  5591                           wreg	equ	0xFE8
  5592                           indf1	equ	0xFE7
  5593                           postdec1	equ	0xFE5
  5594                           fsr1h	equ	0xFE2
  5595                           fsr1l	equ	0xFE1
  5596                           bsr	equ	0xFE0
  5597                           indf2	equ	0xFDF
  5598                           postinc2	equ	0xFDE
  5599                           fsr2h	equ	0xFDA
  5600                           fsr2l	equ	0xFD9
  5601                           status	equ	0xFD8
  5602                           
  5603 ;; *************** function i2_print_byte *****************
  5604 ;; Defined at:
  5605 ;;		line 237 in file "servos.c"
  5606 ;; Parameters:    Size  Location     Type
  5607 ;;  c               1    wreg     unsigned char 
  5608 ;; Auto vars:     Size  Location     Type
  5609 ;;  c               1    0[COMRAM] unsigned char 
  5610 ;; Return value:  Size  Location     Type
  5611 ;;                  1    wreg      void 
  5612 ;; Registers used:
  5613 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5614 ;; Tracked objects:
  5615 ;;		On entry : 0/0
  5616 ;;		On exit  : 0/0
  5617 ;;		Unchanged: 0/0
  5618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5619 ;;      Params:         0       0       0       0
  5620 ;;      Locals:         1       0       0       0
  5621 ;;      Temps:          0       0       0       0
  5622 ;;      Totals:         1       0       0       0
  5623 ;;Total ram usage:        1 bytes
  5624 ;; Hardware stack levels used:    1
  5625 ;; This function calls:
  5626 ;;		Nothing
  5627 ;; This function is called by:
  5628 ;;		_print_number_nospace
  5629 ;;		_print_number
  5630 ;;		_print_hex2
  5631 ;;		i2_print_text
  5632 ;; This function uses a non-reentrant model
  5633 ;;
  5634                           
  5635                           	psect	text29
  5636  001018                     __ptext29:
  5637                           	opt stack 0
  5638  001018                     i2_print_byte:
  5639                           	opt stack 23
  5640                           
  5641                           ;incstack = 0
  5642                           ;i2print_byte@c stored from wreg
  5643  001018  6E01               	movwf	i2print_byte@c,c
  5644                           
  5645                           ;servos.c: 239: if(serial_out_count < 256)
  5646  00101A  044A               	decf	_serial_out_count+1,w,c
  5647  00101C  B0D8               	btfsc	status,0,c
  5648  00101E  0012               	return	
  5649                           
  5650                           ;servos.c: 240: {
  5651                           ;servos.c: 241: serial_out_buffer[serial_out_ptr++] = c;
  5652  001020  0E00               	movlw	low _serial_out_buffer
  5653  001022  2447               	addwf	_serial_out_ptr,w,c
  5654  001024  6ED9               	movwf	fsr2l,c
  5655  001026  0E01               	movlw	high _serial_out_buffer
  5656  001028  2048               	addwfc	_serial_out_ptr+1,w,c
  5657  00102A  6EDA               	movwf	fsr2h,c
  5658  00102C  C001  FFDF         	movff	i2print_byte@c,indf2
  5659  001030  4A47               	infsnz	_serial_out_ptr,f,c
  5660  001032  2A48               	incf	_serial_out_ptr+1,f,c
  5661                           
  5662                           ;servos.c: 242: serial_out_count++;
  5663  001034  4A49               	infsnz	_serial_out_count,f,c
  5664  001036  2A4A               	incf	_serial_out_count+1,f,c
  5665                           
  5666                           ;servos.c: 243: if(serial_out_ptr >= 256)
  5667  001038  0448               	decf	_serial_out_ptr+1,w,c
  5668  00103A  A0D8               	btfss	status,0,c
  5669  00103C  0012               	return	
  5670                           
  5671                           ;servos.c: 244: {
  5672                           ;servos.c: 245: serial_out_ptr = 0;
  5673  00103E  0E00               	movlw	0
  5674  001040  6E48               	movwf	_serial_out_ptr+1,c
  5675  001042  0E00               	movlw	0
  5676  001044  6E47               	movwf	_serial_out_ptr,c
  5677  001046  0012               	return	
  5678  001048                     __end_ofi2_print_byte:
  5679                           	opt stack 0
  5680                           tosu	equ	0xFFF
  5681                           tosh	equ	0xFFE
  5682                           tosl	equ	0xFFD
  5683                           pclatu	equ	0xFFB
  5684                           pclath	equ	0xFFA
  5685                           tblptru	equ	0xFF8
  5686                           tblptrh	equ	0xFF7
  5687                           tblptrl	equ	0xFF6
  5688                           tablat	equ	0xFF5
  5689                           prodh	equ	0xFF4
  5690                           prodl	equ	0xFF3
  5691                           intcon	equ	0xFF2
  5692                           postinc0	equ	0xFEE
  5693                           fsr0h	equ	0xFEA
  5694                           fsr0l	equ	0xFE9
  5695                           wreg	equ	0xFE8
  5696                           indf1	equ	0xFE7
  5697                           postdec1	equ	0xFE5
  5698                           fsr1h	equ	0xFE2
  5699                           fsr1l	equ	0xFE1
  5700                           bsr	equ	0xFE0
  5701                           indf2	equ	0xFDF
  5702                           postinc2	equ	0xFDE
  5703                           fsr2h	equ	0xFDA
  5704                           fsr2l	equ	0xFD9
  5705                           status	equ	0xFD8
  5706                           
  5707 ;; *************** function _handle_usb_ctrl_input *****************
  5708 ;; Defined at:
  5709 ;;		line 1075 in file "servos.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;		None
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;		None
  5714 ;; Return value:  Size  Location     Type
  5715 ;;                  1    wreg      void 
  5716 ;; Registers used:
  5717 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5723 ;;      Params:         0       0       0       0
  5724 ;;      Locals:         0       0       0       0
  5725 ;;      Temps:          0       0       0       0
  5726 ;;      Totals:         0       0       0       0
  5727 ;;Total ram usage:        0 bytes
  5728 ;; Hardware stack levels used:    1
  5729 ;; Hardware stack levels required when called:    1
  5730 ;; This function calls:
  5731 ;;		_handle_usb_ctrl_in
  5732 ;;		_usb_prepare_setup
  5733 ;; This function is called by:
  5734 ;;		_handle_usb_transaction
  5735 ;; This function uses a non-reentrant model
  5736 ;;
  5737                           
  5738                           	psect	text30
  5739  000C0E                     __ptext30:
  5740                           	opt stack 0
  5741  000C0E                     _handle_usb_ctrl_input:
  5742                           	opt stack 24
  5743                           
  5744                           ;servos.c: 1079: if(usb_state == 4)
  5745                           
  5746                           ;incstack = 0
  5747  000C0E  0E04               	movlw	4
  5748  000C10  1851               	xorwf	_usb_state,w,c
  5749  000C12  A4D8               	btfss	status,2,c
  5750  000C14  D010               	goto	i2l335
  5751                           
  5752                           ;servos.c: 1080: {
  5753                           ;servos.c: 1082: UADDR = *(setup_out_packet + 2);
  5754  000C16  EE20 F002          	lfsr	2,2
  5755  000C1A  5059               	movf	_setup_out_packet,w,c
  5756  000C1C  26D9               	addwf	fsr2l,f,c
  5757  000C1E  505A               	movf	_setup_out_packet+1,w,c
  5758  000C20  22DA               	addwfc	fsr2h,f,c
  5759  000C22  50DF               	movf	indf2,w,c
  5760  000C24  010F               	movlb	15	; () banked
  5761  000C26  6F5C               	movwf	92,b	;volatile
  5762                           
  5763                           ; BSR set to: 15
  5764                           ;servos.c: 1084: if(!UADDR)
  5765  000C28  515C               	movf	92,w,b	;volatile
  5766  000C2A  A4D8               	btfss	status,2,c
  5767  000C2C  D002               	goto	i2l334
  5768                           
  5769                           ; BSR set to: 15
  5770                           ;servos.c: 1085: {
  5771                           ;servos.c: 1086: usb_state = 3;
  5772  000C2E  0E03               	movlw	3
  5773  000C30  D001               	goto	L3
  5774  000C32                     i2l334:
  5775                           
  5776                           ; BSR set to: 15
  5777                           ;servos.c: 1088: else
  5778                           ;servos.c: 1089: {
  5779                           ;servos.c: 1090: usb_state = 5;
  5780                           
  5781                           ; BSR set to: 15
  5782  000C32  0E05               	movlw	5
  5783  000C34                     L3:
  5784  000C34  6E51               	movwf	_usb_state,c
  5785  000C36                     i2l335:
  5786                           
  5787                           ;servos.c: 1091: }
  5788                           ;servos.c: 1092: }
  5789                           ;servos.c: 1095: if(ctrl_trf_state == 1)
  5790                           
  5791                           ; BSR set to: 15
  5792                           
  5793                           ; BSR set to: 15
  5794  000C36  0450               	decf	_ctrl_trf_state,w,c
  5795  000C38  A4D8               	btfss	status,2,c
  5796  000C3A  D016               	goto	i2l336
  5797                           
  5798                           ;servos.c: 1096: {
  5799                           ;servos.c: 1097: handle_usb_ctrl_in();
  5800  000C3C  EC46  F005         	call	_handle_usb_ctrl_in	;wreg free
  5801                           
  5802                           ;servos.c: 1100: if(*(EP0_IN) & (1 << 6))
  5803  000C40  C05D  FFD9         	movff	_EP0_IN,fsr2l
  5804  000C44  C05E  FFDA         	movff	_EP0_IN+1,fsr2h
  5805  000C48  ACDF               	btfss	indf2,6,c
  5806  000C4A  D007               	goto	i2l337
  5807                           
  5808                           ;servos.c: 1101: {
  5809                           ;servos.c: 1103: *(EP0_IN) = (0x80 | 0x00 | 0x08);
  5810  000C4C  C05D  FFD9         	movff	_EP0_IN,fsr2l
  5811  000C50  C05E  FFDA         	movff	_EP0_IN+1,fsr2h
  5812  000C54  0E88               	movlw	136
  5813  000C56  6EDF               	movwf	indf2,c
  5814                           
  5815                           ;servos.c: 1104: }
  5816  000C58  0012               	return	
  5817  000C5A                     i2l337:
  5818                           
  5819                           ;servos.c: 1105: else
  5820                           ;servos.c: 1106: {
  5821                           ;servos.c: 1108: *(EP0_IN) = (0x80 | 0x40 | 0x08);
  5822  000C5A  C05D  FFD9         	movff	_EP0_IN,fsr2l
  5823  000C5E  C05E  FFDA         	movff	_EP0_IN+1,fsr2h
  5824  000C62  0EC8               	movlw	200
  5825  000C64  6EDF               	movwf	indf2,c
  5826                           
  5827                           ;servos.c: 1109: }
  5828                           ;servos.c: 1110: }
  5829  000C66  0012               	return	
  5830  000C68                     i2l336:
  5831                           
  5832                           ;servos.c: 1111: else
  5833                           ;servos.c: 1112: {
  5834                           ;servos.c: 1113: usb_prepare_setup();
  5835  000C68  EC60  F006         	call	_usb_prepare_setup	;wreg free
  5836  000C6C  0012               	return	
  5837  000C6E                     __end_of_handle_usb_ctrl_input:
  5838                           	opt stack 0
  5839                           tosu	equ	0xFFF
  5840                           tosh	equ	0xFFE
  5841                           tosl	equ	0xFFD
  5842                           pclatu	equ	0xFFB
  5843                           pclath	equ	0xFFA
  5844                           tblptru	equ	0xFF8
  5845                           tblptrh	equ	0xFF7
  5846                           tblptrl	equ	0xFF6
  5847                           tablat	equ	0xFF5
  5848                           prodh	equ	0xFF4
  5849                           prodl	equ	0xFF3
  5850                           intcon	equ	0xFF2
  5851                           postinc0	equ	0xFEE
  5852                           fsr0h	equ	0xFEA
  5853                           fsr0l	equ	0xFE9
  5854                           wreg	equ	0xFE8
  5855                           indf1	equ	0xFE7
  5856                           postdec1	equ	0xFE5
  5857                           fsr1h	equ	0xFE2
  5858                           fsr1l	equ	0xFE1
  5859                           bsr	equ	0xFE0
  5860                           indf2	equ	0xFDF
  5861                           postinc2	equ	0xFDE
  5862                           fsr2h	equ	0xFDA
  5863                           fsr2l	equ	0xFD9
  5864                           status	equ	0xFD8
  5865                           
  5866 ;; *************** function _handle_usb_ctrl_in *****************
  5867 ;; Defined at:
  5868 ;;		line 845 in file "servos.c"
  5869 ;; Parameters:    Size  Location     Type
  5870 ;;		None
  5871 ;; Auto vars:     Size  Location     Type
  5872 ;;  fragment        2    4[COMRAM] unsigned int 
  5873 ;;  i               1    3[COMRAM] unsigned char 
  5874 ;; Return value:  Size  Location     Type
  5875 ;;                  1    wreg      void 
  5876 ;; Registers used:
  5877 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  5878 ;; Tracked objects:
  5879 ;;		On entry : 0/0
  5880 ;;		On exit  : 0/0
  5881 ;;		Unchanged: 0/0
  5882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5883 ;;      Params:         0       0       0       0
  5884 ;;      Locals:         3       0       0       0
  5885 ;;      Temps:          3       0       0       0
  5886 ;;      Totals:         6       0       0       0
  5887 ;;Total ram usage:        6 bytes
  5888 ;; Hardware stack levels used:    1
  5889 ;; This function calls:
  5890 ;;		Nothing
  5891 ;; This function is called by:
  5892 ;;		_handle_usb_ctrl_setup
  5893 ;;		_handle_usb_ctrl_input
  5894 ;; This function uses a non-reentrant model
  5895 ;;
  5896                           
  5897                           	psect	text31
  5898  000A8C                     __ptext31:
  5899                           	opt stack 0
  5900  000A8C                     _handle_usb_ctrl_in:
  5901                           	opt stack 23
  5902                           
  5903                           ;servos.c: 852: uint16_t fragment = data_count;
  5904                           
  5905                           ;incstack = 0
  5906  000A8C  C041  F005         	movff	_data_count,handle_usb_ctrl_in@fragment
  5907  000A90  C042  F006         	movff	_data_count+1,handle_usb_ctrl_in@fragment+1
  5908                           
  5909                           ;servos.c: 853: if(fragment > 8)
  5910  000A94  5006               	movf	handle_usb_ctrl_in@fragment+1,w,c
  5911  000A96  E104               	bnz	i2u134_40
  5912  000A98  0E09               	movlw	9
  5913  000A9A  5C05               	subwf	handle_usb_ctrl_in@fragment,w,c
  5914  000A9C  A0D8               	btfss	status,0,c
  5915  000A9E  D004               	goto	i2l296
  5916  000AA0                     i2u134_40:
  5917                           
  5918                           ;servos.c: 854: {
  5919                           ;servos.c: 855: fragment = 8;
  5920  000AA0  0E00               	movlw	0
  5921  000AA2  6E06               	movwf	handle_usb_ctrl_in@fragment+1,c
  5922  000AA4  0E08               	movlw	8
  5923  000AA6  6E05               	movwf	handle_usb_ctrl_in@fragment,c
  5924  000AA8                     i2l296:
  5925                           
  5926                           ;servos.c: 856: }
  5927                           ;servos.c: 858: *(EP0_IN + 1) = (fragment);
  5928  000AA8  EE20 F001          	lfsr	2,1
  5929  000AAC  505D               	movf	_EP0_IN,w,c
  5930  000AAE  26D9               	addwf	fsr2l,f,c
  5931  000AB0  505E               	movf	_EP0_IN+1,w,c
  5932  000AB2  22DA               	addwfc	fsr2h,f,c
  5933  000AB4  C005  FFDF         	movff	handle_usb_ctrl_in@fragment,indf2
  5934                           
  5935                           ;servos.c: 861: uint8_t i;
  5936                           ;servos.c: 862: for(i = 0; i < fragment; i++)
  5937  000AB8  0E00               	movlw	0
  5938  000ABA  6E04               	movwf	handle_usb_ctrl_in@i,c
  5939  000ABC  D025               	goto	i2l297
  5940  000ABE                     
  5941                           ;servos.c: 863: {
  5942                           ;servos.c: 864: setup_in_packet[i] = data_ptr[i];
  5943  000ABE  5004               	movf	handle_usb_ctrl_in@i,w,c
  5944  000AC0  0D01               	mullw	1
  5945  000AC2  50F3               	movf	prodl,w,c
  5946  000AC4  243E               	addwf	_data_ptr,w,c
  5947  000AC6  6E01               	movwf	??_handle_usb_ctrl_in& (0+255),c
  5948  000AC8  50F4               	movf	prodh,w,c
  5949  000ACA  203F               	addwfc	_data_ptr+1,w,c
  5950  000ACC  6E02               	movwf	(??_handle_usb_ctrl_in+1)& (0+255),c
  5951  000ACE  0E00               	movlw	0
  5952  000AD0  2040               	addwfc	_data_ptr+2,w,c
  5953  000AD2  6E03               	movwf	(??_handle_usb_ctrl_in+2)& (0+255),c
  5954  000AD4  C001  FFF6         	movff	??_handle_usb_ctrl_in,tblptrl
  5955  000AD8  C002  FFF7         	movff	??_handle_usb_ctrl_in+1,tblptrh
  5956  000ADC  C003  FFF8         	movff	??_handle_usb_ctrl_in+2,tblptru
  5957  000AE0  5004               	movf	handle_usb_ctrl_in@i,w,c
  5958  000AE2  0D01               	mullw	1
  5959  000AE4  50F3               	movf	prodl,w,c
  5960  000AE6  2457               	addwf	_setup_in_packet,w,c
  5961  000AE8  6ED9               	movwf	fsr2l,c
  5962  000AEA  50F4               	movf	prodh,w,c
  5963  000AEC  2058               	addwfc	_setup_in_packet+1,w,c
  5964  000AEE  6EDA               	movwf	fsr2h,c
  5965  000AF0  BAF8               	btfsc	tblptru,5,c
  5966  000AF2  D003               	bra	i2u135_47
  5967  000AF4  0008               	tblrd		*
  5968  000AF6  50F5               	movf	tablat,w,c
  5969  000AF8  D005               	bra	i2u135_40
  5970  000AFA                     i2u135_47:
  5971  000AFA  CFF6 FFE1          	movff	tblptrl,fsr1l
  5972  000AFE  CFF7 FFE2          	movff	tblptrh,fsr1h
  5973  000B02  50E7               	movf	indf1,w,c
  5974  000B04                     i2u135_40:
  5975  000B04  6EDF               	movwf	indf2,c
  5976  000B06  2A04               	incf	handle_usb_ctrl_in@i,f,c
  5977  000B08                     i2l297:
  5978  000B08  5004               	movf	handle_usb_ctrl_in@i,w,c
  5979  000B0A  6E01               	movwf	??_handle_usb_ctrl_in& (0+255),c
  5980  000B0C  6A02               	clrf	(??_handle_usb_ctrl_in+1)& (0+255),c
  5981  000B0E  5005               	movf	handle_usb_ctrl_in@fragment,w,c
  5982  000B10  5C01               	subwf	??_handle_usb_ctrl_in,w,c
  5983  000B12  5006               	movf	handle_usb_ctrl_in@fragment+1,w,c
  5984  000B14  5802               	subwfb	??_handle_usb_ctrl_in+1,w,c
  5985  000B16  A0D8               	btfss	status,0,c
  5986  000B18  D7D2               	goto	i2l298
  5987                           
  5988                           ;servos.c: 865: }
  5989                           ;servos.c: 866: data_ptr += fragment;
  5990  000B1A  C005  FFE8         	movff	handle_usb_ctrl_in@fragment,wreg
  5991  000B1E  263E               	addwf	_data_ptr,f,c
  5992  000B20  C006  FFE8         	movff	handle_usb_ctrl_in@fragment+1,wreg
  5993  000B24  223F               	addwfc	_data_ptr+1,f,c
  5994  000B26  0E00               	movlw	0
  5995  000B28  2240               	addwfc	_data_ptr+2,f,c
  5996                           
  5997                           ;servos.c: 867: data_count -= fragment;
  5998  000B2A  5005               	movf	handle_usb_ctrl_in@fragment,w,c
  5999  000B2C  5E41               	subwf	_data_count,f,c
  6000  000B2E  5006               	movf	handle_usb_ctrl_in@fragment+1,w,c
  6001  000B30  5A42               	subwfb	_data_count+1,f,c
  6002  000B32  0012               	return		;funcret
  6003  000B34                     __end_of_handle_usb_ctrl_in:
  6004                           	opt stack 0
  6005                           tosu	equ	0xFFF
  6006                           tosh	equ	0xFFE
  6007                           tosl	equ	0xFFD
  6008                           pclatu	equ	0xFFB
  6009                           pclath	equ	0xFFA
  6010                           tblptru	equ	0xFF8
  6011                           tblptrh	equ	0xFF7
  6012                           tblptrl	equ	0xFF6
  6013                           tablat	equ	0xFF5
  6014                           prodh	equ	0xFF4
  6015                           prodl	equ	0xFF3
  6016                           intcon	equ	0xFF2
  6017                           postinc0	equ	0xFEE
  6018                           fsr0h	equ	0xFEA
  6019                           fsr0l	equ	0xFE9
  6020                           wreg	equ	0xFE8
  6021                           indf1	equ	0xFE7
  6022                           postdec1	equ	0xFE5
  6023                           fsr1h	equ	0xFE2
  6024                           fsr1l	equ	0xFE1
  6025                           bsr	equ	0xFE0
  6026                           indf2	equ	0xFDF
  6027                           postinc2	equ	0xFDE
  6028                           fsr2h	equ	0xFDA
  6029                           fsr2l	equ	0xFD9
  6030                           status	equ	0xFD8
  6031                           
  6032 ;; *************** function _handle_usb_stall *****************
  6033 ;; Defined at:
  6034 ;;		line 677 in file "servos.c"
  6035 ;; Parameters:    Size  Location     Type
  6036 ;;		None
  6037 ;; Auto vars:     Size  Location     Type
  6038 ;;		None
  6039 ;; Return value:  Size  Location     Type
  6040 ;;                  1    wreg      void 
  6041 ;; Registers used:
  6042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6043 ;; Tracked objects:
  6044 ;;		On entry : 0/0
  6045 ;;		On exit  : 0/0
  6046 ;;		Unchanged: 0/0
  6047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6048 ;;      Params:         0       0       0       0
  6049 ;;      Locals:         0       0       0       0
  6050 ;;      Temps:          0       0       0       0
  6051 ;;      Totals:         0       0       0       0
  6052 ;;Total ram usage:        0 bytes
  6053 ;; Hardware stack levels used:    1
  6054 ;; Hardware stack levels required when called:    1
  6055 ;; This function calls:
  6056 ;;		_usb_prepare_setup
  6057 ;; This function is called by:
  6058 ;;		_isr
  6059 ;; This function uses a non-reentrant model
  6060 ;;
  6061                           
  6062                           	psect	text32
  6063  0010E4                     __ptext32:
  6064                           	opt stack 0
  6065  0010E4                     _handle_usb_stall:
  6066                           	opt stack 25
  6067                           
  6068                           ;servos.c: 679: if(UEP0bits.EPSTALL)
  6069                           
  6070                           ;incstack = 0
  6071  0010E4  010F               	movlb	15	; () banked
  6072  0010E6  A153               	btfss	83,0,b	;volatile
  6073  0010E8  D004               	goto	i2l264
  6074                           
  6075                           ; BSR set to: 15
  6076                           ;servos.c: 680: {
  6077                           ;servos.c: 681: usb_prepare_setup();
  6078  0010EA  EC60  F006         	call	_usb_prepare_setup	;wreg free
  6079                           
  6080                           ;servos.c: 682: UEP0bits.EPSTALL = 0;
  6081  0010EE  010F               	movlb	15	; () banked
  6082  0010F0  9153               	bcf	83,0,b	;volatile
  6083  0010F2                     i2l264:
  6084                           
  6085                           ; BSR set to: 15
  6086                           ;servos.c: 683: }
  6087                           ;servos.c: 685: UIRbits.STALLIF = 0;
  6088                           
  6089                           ; BSR set to: 15
  6090  0010F2  9A62               	bcf	3938,5,c	;volatile
  6091                           
  6092                           ; BSR set to: 15
  6093  0010F4  0012               	return		;funcret
  6094  0010F6                     __end_of_handle_usb_stall:
  6095                           	opt stack 0
  6096                           tosu	equ	0xFFF
  6097                           tosh	equ	0xFFE
  6098                           tosl	equ	0xFFD
  6099                           pclatu	equ	0xFFB
  6100                           pclath	equ	0xFFA
  6101                           tblptru	equ	0xFF8
  6102                           tblptrh	equ	0xFF7
  6103                           tblptrl	equ	0xFF6
  6104                           tablat	equ	0xFF5
  6105                           prodh	equ	0xFF4
  6106                           prodl	equ	0xFF3
  6107                           intcon	equ	0xFF2
  6108                           postinc0	equ	0xFEE
  6109                           fsr0h	equ	0xFEA
  6110                           fsr0l	equ	0xFE9
  6111                           wreg	equ	0xFE8
  6112                           indf1	equ	0xFE7
  6113                           postdec1	equ	0xFE5
  6114                           fsr1h	equ	0xFE2
  6115                           fsr1l	equ	0xFE1
  6116                           bsr	equ	0xFE0
  6117                           indf2	equ	0xFDF
  6118                           postinc2	equ	0xFDE
  6119                           fsr2h	equ	0xFDA
  6120                           fsr2l	equ	0xFD9
  6121                           status	equ	0xFD8
  6122                           
  6123 ;; *************** function _handle_usb_reset *****************
  6124 ;; Defined at:
  6125 ;;		line 646 in file "servos.c"
  6126 ;; Parameters:    Size  Location     Type
  6127 ;;		None
  6128 ;; Auto vars:     Size  Location     Type
  6129 ;;		None
  6130 ;; Return value:  Size  Location     Type
  6131 ;;                  1    wreg      void 
  6132 ;; Registers used:
  6133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6134 ;; Tracked objects:
  6135 ;;		On entry : 0/0
  6136 ;;		On exit  : 0/0
  6137 ;;		Unchanged: 0/0
  6138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6139 ;;      Params:         0       0       0       0
  6140 ;;      Locals:         0       0       0       0
  6141 ;;      Temps:          0       0       0       0
  6142 ;;      Totals:         0       0       0       0
  6143 ;;Total ram usage:        0 bytes
  6144 ;; Hardware stack levels used:    1
  6145 ;; Hardware stack levels required when called:    1
  6146 ;; This function calls:
  6147 ;;		_usb_prepare_setup
  6148 ;; This function is called by:
  6149 ;;		_isr
  6150 ;; This function uses a non-reentrant model
  6151 ;;
  6152                           
  6153                           	psect	text33
  6154  000EEA                     __ptext33:
  6155                           	opt stack 0
  6156  000EEA                     _handle_usb_reset:
  6157                           	opt stack 25
  6158                           
  6159                           ;servos.c: 651: UIR = 0;
  6160                           
  6161                           ; BSR set to: 15
  6162                           ;incstack = 0
  6163  000EEA  0E00               	movlw	0
  6164  000EEC  6E62               	movwf	3938,c	;volatile
  6165                           
  6166                           ;servos.c: 653: UADDR = 0;
  6167  000EEE  0E00               	movlw	0
  6168  000EF0  010F               	movlb	15	; () banked
  6169  000EF2  6F5C               	movwf	92,b	;volatile
  6170                           
  6171                           ;servos.c: 655: UEP0 = 0;
  6172  000EF4  0E00               	movlw	0
  6173  000EF6  6F53               	movwf	83,b	;volatile
  6174                           
  6175                           ; BSR set to: 15
  6176                           ;servos.c: 656: UEP0bits.EPOUTEN = 1;
  6177  000EF8  8553               	bsf	83,2,b	;volatile
  6178                           
  6179                           ; BSR set to: 15
  6180                           ;servos.c: 657: UEP0bits.EPINEN = 1;
  6181  000EFA  8353               	bsf	83,1,b	;volatile
  6182                           
  6183                           ; BSR set to: 15
  6184                           ;servos.c: 658: UEP0bits.EPHSHK = 1;
  6185  000EFC  8953               	bsf	83,4,b	;volatile
  6186                           
  6187                           ;servos.c: 660: while(UIRbits.TRNIF)
  6188  000EFE  D006               	goto	i2l258
  6189  000F00                     i2l259:
  6190                           
  6191                           ;servos.c: 661: {
  6192                           ;servos.c: 662: UIRbits.TRNIF = 0;
  6193  000F00  9662               	bcf	3938,3,c	;volatile
  6194  000F02  F000               	nop		;# 
  6195  000F04  F000               	nop		;# 
  6196  000F06  F000               	nop		;# 
  6197  000F08  F000               	nop		;# 
  6198  000F0A  F000               	nop		;# 
  6199  000F0C                     i2l258:
  6200  000F0C  B662               	btfsc	3938,3,c	;volatile
  6201  000F0E  D7F8               	goto	i2l259
  6202                           
  6203                           ;servos.c: 668: }
  6204                           ;servos.c: 670: UCONbits.PKTDIS = 0;
  6205  000F10  9864               	bcf	3940,4,c	;volatile
  6206                           
  6207                           ;servos.c: 671: usb_prepare_setup();
  6208  000F12  EC60  F006         	call	_usb_prepare_setup	;wreg free
  6209                           
  6210                           ;servos.c: 673: usb_config = 0;
  6211  000F16  0E00               	movlw	0
  6212  000F18  6E54               	movwf	_usb_config,c
  6213                           
  6214                           ;servos.c: 674: usb_state = 3;
  6215  000F1A  0E03               	movlw	3
  6216  000F1C  6E51               	movwf	_usb_state,c
  6217  000F1E  0012               	return		;funcret
  6218  000F20                     __end_of_handle_usb_reset:
  6219                           	opt stack 0
  6220                           tosu	equ	0xFFF
  6221                           tosh	equ	0xFFE
  6222                           tosl	equ	0xFFD
  6223                           pclatu	equ	0xFFB
  6224                           pclath	equ	0xFFA
  6225                           tblptru	equ	0xFF8
  6226                           tblptrh	equ	0xFF7
  6227                           tblptrl	equ	0xFF6
  6228                           tablat	equ	0xFF5
  6229                           prodh	equ	0xFF4
  6230                           prodl	equ	0xFF3
  6231                           intcon	equ	0xFF2
  6232                           postinc0	equ	0xFEE
  6233                           fsr0h	equ	0xFEA
  6234                           fsr0l	equ	0xFE9
  6235                           wreg	equ	0xFE8
  6236                           indf1	equ	0xFE7
  6237                           postdec1	equ	0xFE5
  6238                           fsr1h	equ	0xFE2
  6239                           fsr1l	equ	0xFE1
  6240                           bsr	equ	0xFE0
  6241                           indf2	equ	0xFDF
  6242                           postinc2	equ	0xFDE
  6243                           fsr2h	equ	0xFDA
  6244                           fsr2l	equ	0xFD9
  6245                           status	equ	0xFD8
  6246                           
  6247 ;; *************** function _usb_prepare_setup *****************
  6248 ;; Defined at:
  6249 ;;		line 634 in file "servos.c"
  6250 ;; Parameters:    Size  Location     Type
  6251 ;;		None
  6252 ;; Auto vars:     Size  Location     Type
  6253 ;;		None
  6254 ;; Return value:  Size  Location     Type
  6255 ;;                  1    wreg      void 
  6256 ;; Registers used:
  6257 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6258 ;; Tracked objects:
  6259 ;;		On entry : 0/0
  6260 ;;		On exit  : 0/0
  6261 ;;		Unchanged: 0/0
  6262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6263 ;;      Params:         0       0       0       0
  6264 ;;      Locals:         0       0       0       0
  6265 ;;      Temps:          0       0       0       0
  6266 ;;      Totals:         0       0       0       0
  6267 ;;Total ram usage:        0 bytes
  6268 ;; Hardware stack levels used:    1
  6269 ;; This function calls:
  6270 ;;		Nothing
  6271 ;; This function is called by:
  6272 ;;		_handle_usb_reset
  6273 ;;		_handle_usb_stall
  6274 ;;		_handle_usb_ctrl_output
  6275 ;;		_handle_usb_ctrl_input
  6276 ;; This function uses a non-reentrant model
  6277 ;;
  6278                           
  6279                           	psect	text34
  6280  000CC0                     __ptext34:
  6281                           	opt stack 0
  6282  000CC0                     _usb_prepare_setup:
  6283                           	opt stack 24
  6284                           
  6285                           ;servos.c: 636: ctrl_trf_state = 0;
  6286                           
  6287                           ;incstack = 0
  6288  000CC0  0E00               	movlw	0
  6289  000CC2  6E50               	movwf	_ctrl_trf_state,c
  6290                           
  6291                           ;servos.c: 639: *(EP0_OUT + 1) = (8); *(EP0_OUT + 2) = ((uint16_t)(setup_out_packet) & 0
      +                          xff); *(EP0_OUT + 3) = ((uint16_t)(setup_out_packet) >> 8); *(EP0_OUT) = (0x80 | 0x00 | 
      +                          0x08 | 0x04);
  6292  000CC4  0100               	movlb	0	; () banked
  6293  000CC6  EE20 F001          	lfsr	2,1
  6294  000CCA  51AE               	movf	_EP0_OUT& (0+255),w,b
  6295  000CCC  26D9               	addwf	fsr2l,f,c
  6296  000CCE  51AF               	movf	(_EP0_OUT+1)& (0+255),w,b
  6297  000CD0  22DA               	addwfc	fsr2h,f,c
  6298  000CD2  0E08               	movlw	8
  6299  000CD4  6EDF               	movwf	indf2,c
  6300                           
  6301                           ; BSR set to: 0
  6302  000CD6  EE20 F002          	lfsr	2,2
  6303  000CDA  51AE               	movf	_EP0_OUT& (0+255),w,b
  6304  000CDC  26D9               	addwf	fsr2l,f,c
  6305  000CDE  51AF               	movf	(_EP0_OUT+1)& (0+255),w,b
  6306  000CE0  22DA               	addwfc	fsr2h,f,c
  6307  000CE2  C059  FFDF         	movff	_setup_out_packet,indf2
  6308                           
  6309                           ; BSR set to: 0
  6310  000CE6  EE20 F003          	lfsr	2,3
  6311  000CEA  51AE               	movf	_EP0_OUT& (0+255),w,b
  6312  000CEC  26D9               	addwf	fsr2l,f,c
  6313  000CEE  51AF               	movf	(_EP0_OUT+1)& (0+255),w,b
  6314  000CF0  22DA               	addwfc	fsr2h,f,c
  6315  000CF2  505A               	movf	_setup_out_packet+1,w,c
  6316  000CF4  6EDF               	movwf	indf2,c
  6317                           
  6318                           ; BSR set to: 0
  6319  000CF6  C0AE  FFD9         	movff	_EP0_OUT,fsr2l
  6320  000CFA  C0AF  FFDA         	movff	_EP0_OUT+1,fsr2h
  6321  000CFE  0E8C               	movlw	140
  6322  000D00  6EDF               	movwf	indf2,c
  6323                           
  6324                           ; BSR set to: 0
  6325                           ;servos.c: 642: *(EP0_IN) = (0x00);
  6326  000D02  C05D  FFD9         	movff	_EP0_IN,fsr2l
  6327  000D06  C05E  FFDA         	movff	_EP0_IN+1,fsr2h
  6328  000D0A  0E00               	movlw	0
  6329  000D0C  6EDF               	movwf	indf2,c
  6330                           
  6331                           ; BSR set to: 0
  6332  000D0E  0012               	return		;funcret
  6333  000D10                     __end_of_usb_prepare_setup:
  6334                           	opt stack 0
  6335                           tosu	equ	0xFFF
  6336                           tosh	equ	0xFFE
  6337                           tosl	equ	0xFFD
  6338                           pclatu	equ	0xFFB
  6339                           pclath	equ	0xFFA
  6340                           tblptru	equ	0xFF8
  6341                           tblptrh	equ	0xFF7
  6342                           tblptrl	equ	0xFF6
  6343                           tablat	equ	0xFF5
  6344                           prodh	equ	0xFF4
  6345                           prodl	equ	0xFF3
  6346                           intcon	equ	0xFF2
  6347                           postinc0	equ	0xFEE
  6348                           fsr0h	equ	0xFEA
  6349                           fsr0l	equ	0xFE9
  6350                           wreg	equ	0xFE8
  6351                           indf1	equ	0xFE7
  6352                           postdec1	equ	0xFE5
  6353                           fsr1h	equ	0xFE2
  6354                           fsr1l	equ	0xFE1
  6355                           bsr	equ	0xFE0
  6356                           indf2	equ	0xFDF
  6357                           postinc2	equ	0xFDE
  6358                           fsr2h	equ	0xFDA
  6359                           fsr2l	equ	0xFD9
  6360                           status	equ	0xFD8
  6361                           
  6362 ;; *************** function _handle_uart_rx *****************
  6363 ;; Defined at:
  6364 ;;		line 172 in file "servos.c"
  6365 ;; Parameters:    Size  Location     Type
  6366 ;;		None
  6367 ;; Auto vars:     Size  Location     Type
  6368 ;;  c               1    0[COMRAM] unsigned char 
  6369 ;; Return value:  Size  Location     Type
  6370 ;;                  1    wreg      void 
  6371 ;; Registers used:
  6372 ;;		None
  6373 ;; Tracked objects:
  6374 ;;		On entry : 0/0
  6375 ;;		On exit  : 0/0
  6376 ;;		Unchanged: 0/0
  6377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6378 ;;      Params:         0       0       0       0
  6379 ;;      Locals:         1       0       0       0
  6380 ;;      Temps:          0       0       0       0
  6381 ;;      Totals:         1       0       0       0
  6382 ;;Total ram usage:        1 bytes
  6383 ;; Hardware stack levels used:    1
  6384 ;; This function calls:
  6385 ;;		Nothing
  6386 ;; This function is called by:
  6387 ;;		_isr
  6388 ;; This function uses a non-reentrant model
  6389 ;;
  6390                           
  6391                           	psect	text35
  6392  00112C                     __ptext35:
  6393                           	opt stack 0
  6394  00112C                     _handle_uart_rx:
  6395                           	opt stack 26
  6396                           
  6397                           ;servos.c: 174: flags.interrupt_complete = 0;
  6398                           
  6399                           ; BSR set to: 0
  6400                           ;incstack = 0
  6401  00112C  9053               	bcf	_flags,0,c
  6402                           
  6403                           ;servos.c: 176: uint8_t c = RCREG;
  6404  00112E  CFAE F001          	movff	4014,handle_uart_rx@c	;volatile
  6405  001132  0012               	return		;funcret
  6406  001134                     __end_of_handle_uart_rx:
  6407                           	opt stack 0
  6408                           tosu	equ	0xFFF
  6409                           tosh	equ	0xFFE
  6410                           tosl	equ	0xFFD
  6411                           pclatu	equ	0xFFB
  6412                           pclath	equ	0xFFA
  6413                           tblptru	equ	0xFF8
  6414                           tblptrh	equ	0xFF7
  6415                           tblptrl	equ	0xFF6
  6416                           tablat	equ	0xFF5
  6417                           prodh	equ	0xFF4
  6418                           prodl	equ	0xFF3
  6419                           intcon	equ	0xFF2
  6420                           postinc0	equ	0xFEE
  6421                           fsr0h	equ	0xFEA
  6422                           fsr0l	equ	0xFE9
  6423                           wreg	equ	0xFE8
  6424                           indf1	equ	0xFE7
  6425                           postdec1	equ	0xFE5
  6426                           fsr1h	equ	0xFE2
  6427                           fsr1l	equ	0xFE1
  6428                           bsr	equ	0xFE0
  6429                           indf2	equ	0xFDF
  6430                           postinc2	equ	0xFDE
  6431                           fsr2h	equ	0xFDA
  6432                           fsr2l	equ	0xFD9
  6433                           status	equ	0xFD8
  6434                           tosu	equ	0xFFF
  6435                           tosh	equ	0xFFE
  6436                           tosl	equ	0xFFD
  6437                           pclatu	equ	0xFFB
  6438                           pclath	equ	0xFFA
  6439                           tblptru	equ	0xFF8
  6440                           tblptrh	equ	0xFF7
  6441                           tblptrl	equ	0xFF6
  6442                           tablat	equ	0xFF5
  6443                           prodh	equ	0xFF4
  6444                           prodl	equ	0xFF3
  6445                           intcon	equ	0xFF2
  6446                           postinc0	equ	0xFEE
  6447                           fsr0h	equ	0xFEA
  6448                           fsr0l	equ	0xFE9
  6449                           wreg	equ	0xFE8
  6450                           indf1	equ	0xFE7
  6451                           postdec1	equ	0xFE5
  6452                           fsr1h	equ	0xFE2
  6453                           fsr1l	equ	0xFE1
  6454                           bsr	equ	0xFE0
  6455                           indf2	equ	0xFDF
  6456                           postinc2	equ	0xFDE
  6457                           fsr2h	equ	0xFDA
  6458                           fsr2l	equ	0xFD9
  6459                           status	equ	0xFD8
  6460                           
  6461                           	psect	text36
  6462  000000                     __ptext36:
  6463                           	opt stack 0
  6464                           tosu	equ	0xFFF
  6465                           tosh	equ	0xFFE
  6466                           tosl	equ	0xFFD
  6467                           pclatu	equ	0xFFB
  6468                           pclath	equ	0xFFA
  6469                           tblptru	equ	0xFF8
  6470                           tblptrh	equ	0xFF7
  6471                           tblptrl	equ	0xFF6
  6472                           tablat	equ	0xFF5
  6473                           prodh	equ	0xFF4
  6474                           prodl	equ	0xFF3
  6475                           intcon	equ	0xFF2
  6476                           postinc0	equ	0xFEE
  6477                           fsr0h	equ	0xFEA
  6478                           fsr0l	equ	0xFE9
  6479                           wreg	equ	0xFE8
  6480                           indf1	equ	0xFE7
  6481                           postdec1	equ	0xFE5
  6482                           fsr1h	equ	0xFE2
  6483                           fsr1l	equ	0xFE1
  6484                           bsr	equ	0xFE0
  6485                           indf2	equ	0xFDF
  6486                           postinc2	equ	0xFDE
  6487                           fsr2h	equ	0xFDA
  6488                           fsr2l	equ	0xFD9
  6489                           status	equ	0xFD8
  6490                           
  6491                           	psect	rparam
  6492  0000                     tosu	equ	0xFFF
  6493                           tosh	equ	0xFFE
  6494                           tosl	equ	0xFFD
  6495                           pclatu	equ	0xFFB
  6496                           pclath	equ	0xFFA
  6497                           tblptru	equ	0xFF8
  6498                           tblptrh	equ	0xFF7
  6499                           tblptrl	equ	0xFF6
  6500                           tablat	equ	0xFF5
  6501                           prodh	equ	0xFF4
  6502                           prodl	equ	0xFF3
  6503                           intcon	equ	0xFF2
  6504                           postinc0	equ	0xFEE
  6505                           fsr0h	equ	0xFEA
  6506                           fsr0l	equ	0xFE9
  6507                           wreg	equ	0xFE8
  6508                           indf1	equ	0xFE7
  6509                           postdec1	equ	0xFE5
  6510                           fsr1h	equ	0xFE2
  6511                           fsr1l	equ	0xFE1
  6512                           bsr	equ	0xFE0
  6513                           indf2	equ	0xFDF
  6514                           postinc2	equ	0xFDE
  6515                           fsr2h	equ	0xFDA
  6516                           fsr2l	equ	0xFD9
  6517                           status	equ	0xFD8
  6518                           
  6519                           	psect	temp
  6520  00005F                     btemp:
  6521                           	opt stack 0
  6522  00005F                     	ds	1
  6523  0000                     int$flags	set	btemp
  6524  0000                     wtemp6	set	btemp+1
  6525                           tosu	equ	0xFFF
  6526                           tosh	equ	0xFFE
  6527                           tosl	equ	0xFFD
  6528                           pclatu	equ	0xFFB
  6529                           pclath	equ	0xFFA
  6530                           tblptru	equ	0xFF8
  6531                           tblptrh	equ	0xFF7
  6532                           tblptrl	equ	0xFF6
  6533                           tablat	equ	0xFF5
  6534                           prodh	equ	0xFF4
  6535                           prodl	equ	0xFF3
  6536                           intcon	equ	0xFF2
  6537                           postinc0	equ	0xFEE
  6538                           fsr0h	equ	0xFEA
  6539                           fsr0l	equ	0xFE9
  6540                           wreg	equ	0xFE8
  6541                           indf1	equ	0xFE7
  6542                           postdec1	equ	0xFE5
  6543                           fsr1h	equ	0xFE2
  6544                           fsr1l	equ	0xFE1
  6545                           bsr	equ	0xFE0
  6546                           indf2	equ	0xFDF
  6547                           postinc2	equ	0xFDE
  6548                           fsr2h	equ	0xFDA
  6549                           fsr2l	equ	0xFD9
  6550                           status	equ	0xFD8


Data Sizes:
    Strings     104
    Constant    158
    Data        22
    BSS         323
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      94
    BANK0           160     34      82
    BANK1           256      0     256
    BANK2           256      0       0

Pointer List with Targets:

    data_ptr	PTR const unsigned char  size(3) Largest target is 16383
		 -> qual_descriptor(CODE[10]), sd000(CODE[4]), sd001(CODE[22]), sd002(CODE[18]), 
		 -> usb_config1(CODE[70]), usb_descriptor(CODE[18]), usb_config(COMRAM[1]), ROM(CODE[16383]), 

    data_out_packet	PTR volatile unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    data_in_packet	PTR volatile unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    cdc_in_packet	PTR volatile unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    setup_in_packet	PTR volatile unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    setup_out_packet	PTR volatile unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    EP2_IN	PTR volatile unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    EP2_OUT	PTR volatile unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    EP1_IN	PTR volatile unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    EP0_IN	PTR volatile unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    EP0_OUT	PTR volatile unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    print_text@s	PTR const unsigned char  size(2) Largest target is 36
		 -> STR_8(CODE[36]), STR_7(CODE[15]), STR_6(CODE[2]), STR_5(CODE[10]), 
		 -> STR_4(CODE[2]), STR_3(CODE[17]), STR_2(CODE[2]), STR_1(CODE[26]), 

    input_state	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> sync_code2(), sync_code1(), sync_code3(), get_pwm(), 
		 -> sync_code0(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr1 in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_handle_usb_transaction
    _handle_usb_transaction->_handle_usb_ctrl_output
    _handle_usb_ctrl_output->_handle_usb_ctrl_setup
    _handle_usb_ctrl_setup->_usb_check_std_request
    _usb_check_std_request->_print_number
    _print_number->_print_number_nospace
    _print_number_nospace->___lwmod
    ___lwmod->___lwdiv
    _handle_usb_ctrl_out->_print_hex2
    i2_print_text->i2_print_byte
    _print_hex2->i2_print_byte
    _handle_usb_ctrl_input->_handle_usb_ctrl_in

Critical Paths under _main in BANK0

    _main->_delayMicroseconds
    _print_text->_print_byte

Critical Paths under _isr1 in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr1 in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr1 in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     4      5    1087
                                             25 BANK0      9     4      5
                  _delayMicroseconds
                         _flush_uart
                            _get_pwm *
                        _handle_uart
                          _init_uart
                           _init_usb
                         _print_byte
                         _print_text
                         _sync_code0 *
                         _sync_code1 *
                         _sync_code2 *
                         _sync_code3 *
 ---------------------------------------------------------------------------------
 (1) _sync_code3                                           1     1      0      44
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _sync_code2                                           1     1      0      44
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _sync_code1                                           1     1      0      44
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _sync_code0                                           1     1      0      22
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _print_text                                           2     0      2     493
                                             22 BANK0      2     0      2
                         _print_byte
 ---------------------------------------------------------------------------------
 (2) _print_byte                                           1     1      0      22
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_usb                                             1     1      0      68
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_pwm                                              3     3      0      22
                                             21 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _flush_uart                                           0     0      0       0
                        _handle_uart
 ---------------------------------------------------------------------------------
 (1) _handle_uart                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delayMicroseconds                                    4     2      2     123
                                             21 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr1                                                21    21      0       0
                                              0 BANK0     21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                 20    20      0    3653
                                             33 COMRAM    20    20      0
                     _handle_uart_rx
                   _handle_usb_reset
                   _handle_usb_stall
             _handle_usb_transaction
 ---------------------------------------------------------------------------------
 (5) _handle_usb_transaction                               2     2      0    3653
                                             31 COMRAM     2     2      0
              _handle_usb_ctrl_input
             _handle_usb_ctrl_output
 ---------------------------------------------------------------------------------
 (6) _handle_usb_ctrl_output                               1     1      0    3473
                                             30 COMRAM     1     1      0
                _handle_usb_ctrl_out
              _handle_usb_ctrl_setup
                  _usb_prepare_setup
                       i2_print_text
 ---------------------------------------------------------------------------------
 (7) _handle_usb_ctrl_setup                               11    11      0    2862
                                             19 COMRAM    11    11      0
                 _handle_usb_ctrl_in
              _usb_check_std_request
 ---------------------------------------------------------------------------------
 (8) _usb_check_std_request                                3     3      0    2545
                                             16 COMRAM     3     3      0
                       _print_number
                 _user_endpoint_init
                       i2_flush_uart
                       i2_print_text
 ---------------------------------------------------------------------------------
 (9) i2_flush_uart                                         0     0      0       0
                      i2_handle_uart
 ---------------------------------------------------------------------------------
 (10) i2_handle_uart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _user_endpoint_init                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _print_number                                         2     0      2    2029
                                             14 COMRAM     2     0      2
               _print_number_nospace
                       i2_print_byte
 ---------------------------------------------------------------------------------
 (10) _print_number_nospace                                2     0      2    1833
                                             12 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
                       i2_print_byte
 ---------------------------------------------------------------------------------
 (11) ___lwmod                                             5     1      4     767
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (11) ___lwdiv                                             7     3      4     770
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (7) _handle_usb_ctrl_out                                  1     1      0     338
                                              4 COMRAM     1     1      0
                         _print_hex2
                       i2_print_text
 ---------------------------------------------------------------------------------
 (7) i2_print_text                                         2     0      2     249
                                              1 COMRAM     2     0      2
                       i2_print_byte
 ---------------------------------------------------------------------------------
 (8) _print_hex2                                           3     3      0      66
                                              1 COMRAM     3     3      0
                       i2_print_byte
 ---------------------------------------------------------------------------------
 (8) i2_print_byte                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _handle_usb_ctrl_input                                0     0      0     180
                 _handle_usb_ctrl_in
                  _usb_prepare_setup
 ---------------------------------------------------------------------------------
 (8) _handle_usb_ctrl_in                                   6     6      0     180
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (5) _handle_usb_stall                                     0     0      0       0
                  _usb_prepare_setup
 ---------------------------------------------------------------------------------
 (5) _handle_usb_reset                                     0     0      0       0
                  _usb_prepare_setup
 ---------------------------------------------------------------------------------
 (7) _usb_prepare_setup                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _handle_uart_rx                                       1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delayMicroseconds
   _flush_uart
     _handle_uart
   _get_pwm *
   _handle_uart *
   _init_uart *
   _init_usb *
   _print_byte *
   _print_text *
     _print_byte
   _sync_code0 *
   _sync_code1 *
   _sync_code2 *
   _sync_code3 *

 _isr1 (ROOT)

 _isr (ROOT)
   _handle_uart_rx
   _handle_usb_reset
     _usb_prepare_setup
   _handle_usb_stall
     _usb_prepare_setup
   _handle_usb_transaction
     _handle_usb_ctrl_input
       _handle_usb_ctrl_in
       _usb_prepare_setup
     _handle_usb_ctrl_output
       _handle_usb_ctrl_out
         _print_hex2
           i2_print_byte
         i2_print_text
           i2_print_byte
       _handle_usb_ctrl_setup
         _handle_usb_ctrl_in
         _usb_check_std_request
           _print_number
             _print_number_nospace
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               i2_print_byte
             i2_print_byte
           _user_endpoint_init
           i2_flush_uart
             i2_handle_uart
           i2_print_text
             i2_print_byte
       _usb_prepare_setup
       i2_print_text
         i2_print_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0     100       5      100.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     22      52       4       51.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      5E       1      100.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1B0       8        0.0%
DATA                 0      0     1B0      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Nov 25 00:48:14 2021

                    _usb_config1 3F09                               bsr 000FE0  
                   __CFG_CP0$OFF 000000                     __CFG_CP1$OFF 000000  
                            l122 1092                              l123 108A  
                            l131 0E6C                              l135 10FC  
                            l128 0E3E                              l136 10F8  
                            l146 1002                              l147 0FEA  
                            l246 0D6C                              l248 0D8C  
                            l360 0F38                              l353 0ED0  
                            l362 0F48                              l355 0EE0  
                            l380 0124                              l390 026A  
                            l382 016A                              l367 0F6A  
                            l391 0230                              l383 013E  
                            l392 0268                              l369 0F7A  
                            l385 01C6                              l394 02C4  
                            l386 0202                              l389 022A  
                   __CFG_CPB$OFF 000000                     __CFG_CPD$OFF 000000  
                            _UIE 000F60                              _UIR 000F62  
                 _usb_descriptor 3F77                              _isr 0008  
                   __CFG_BORV$19 000000                              prod 000FF3  
                            tosl 000FFD                              wreg 000FE8  
                   __CFG_FOSC$XT 000000                     __CFG_LVP$OFF 000000  
                           l2371 0D64                             ?_isr 0001  
                           STR_1 3FBB                             STR_2 3FF3  
                           STR_3 3FD5                             STR_4 3FF3  
                           STR_5 3FF5                             STR_6 3FF3  
                           STR_7 3FE6                             STR_8 3F97  
                           u1600 0D84                             u1930 0260  
                           u1878 0142                             u1879 0166  
                           _UCFG 000F61                             _UEP0 000F53  
                           _UEP1 000F54                             _UEP2 000F55  
                           _UCON 000F64                             _TMR0 000FD6  
                           _TMR1 000FCE                             _TMR3 000FB2  
                           _isr1 0018                             _main 00CA  
                           _pwm0 004D                             _pwm1 004B  
                           fsr0h 000FEA                             fsr1h 000FE2  
                           fsr2h 000FDA                             fsr0l 000FE9  
                           indf1 000FE7                             indf2 000FDF  
                           fsr1l 000FE1                             fsr2l 000FD9  
                           btemp 005F       __end_of_user_endpoint_init 09CC  
           __end_ofi2_print_byte 1048                             prodh 000FF4  
                           prodl 000FF3                             start 00C6  
           __end_ofi2_print_text 1076                    __CFG_IESO$OFF 000000  
                  __CFG_MCLRE$ON 000000                     ___param_bank 000000  
                          ??_isr 0022                    __CFG_PLLEN$ON 000000  
         __end_of_usb_descriptor 3F89                            ?_isr1 0001  
                          ?_main 009D                     main@fragment 00A5  
                          _ANSEL 000F7E                            _T0CON 000FD5  
                          _T1CON 000FCD                            _T3CON 000FB1  
                __end_of___lwdiv 0CC0                  __end_of___lwmod 0E34  
                          i2l131 0EAC                            i2l310 0396  
                          i2l135 110C                            i2l303 032E  
                          i2l152 0828                            i2l128 0E7E  
                          i2l136 1108                            i2l153 0864  
                          i2l146 1060                            i2l154 08A0  
                          i2l314 03EA                            i2l147 104A  
                          i2l155 08DC                            i2l420 07AA  
                  __CFG_WDTEN$ON 000000                            i2l317 04A6  
                          i2l325 0BC8                            i2l421 07B0  
                          i2l413 073A                            i2l334 0C32  
                          i2l318 0432                            i2l335 0C36  
                          i2l271 0528                            i2l327 0C08  
                          i2l343 0FC2                            i2l415 0746  
                          i2l264 10F2                            i2l336 0C68  
                          i2l280 05C6                            i2l328 0BFA  
                          i2l337 0C5A                            i2l345 0FE4  
                          i2l417 0752                            i2l409 071E  
                          i2l258 0F0C                            i2l274 0650  
                          i2l282 05E8                            i2l259 0F00  
                          i2l275 0566                            i2l419 0786  
                          i2l292 06AA                            i2l285 0628  
                          i2l277 058A                            i2l279 0604  
                          i2l296 0AA8                            i2l288 0682  
                          i2l297 0B08                            i2l289 0678  
                          i2l298 0ABE                            i2l831 0CAC  
                          i2l832 0CB6                            i2l841 0E20  
                          i2l842 0E2A                            i2l827 0C8C  
                          i2l828 0C84  __size_of_handle_usb_transaction 0032  
                          i2l837 0E08                            i2l838 0E00  
                          _UADDR 000F5C                            _RCREG 000FAE  
                 __CFG_BBSIZ$OFF 000000                            _RCSTA 000FAB  
                          _SPBRG 000FAF                            _USTAT 000F63  
                          _TXREG 000FAD                            _TXSTA 000FAC  
                  __CFG_WRT0$OFF 000000                    __CFG_WRT1$OFF 000000  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                 __CFG_EBTR1$OFF 000000                            _sd000 3F93  
                          _sd001 3F4F                            _sd002 3F65  
                  __CFG_WRTB$OFF 000000                  __end_of_get_pwm 0DF2  
                  __CFG_WRTC$OFF 000000                    __CFG_WRTD$OFF 000000  
                 _data_in_packet 00A8                   __CFG_EBTRB$OFF 000000  
                          _flags 0053                            main@i 00A3  
                          pclath 000FFA           ?_handle_usb_ctrl_input 0001  
                          tablat 000FF5        __size_of_handle_usb_reset 0036  
         ?_handle_usb_ctrl_setup 0001        __size_of_handle_usb_stall 0012  
                          status 000FD8                            wtemp6 0060  
                 __CFG_HFOFST$ON 000000       handle_usb_ctrl_in@fragment 0005  
                __initialization 0B34                    i2print_byte@c 0001  
                   __end_of_isr1 00C6                     __end_of_main 0302  
  __size_of_print_number_nospace 00FA                    i2print_text@s 0002  
                 __CFG_PCLKEN$ON 000000                           ??_isr1 0084  
                         ??_main 00A2                    __activetblptr 000003  
          __size_ofi2_flush_uart 0010             __size_of_handle_uart 0040  
                         _EP0_IN 005D                           _EP1_IN 005B  
                         _ANSELH 000F7F                           _EP2_IN 00AA  
             delayMicroseconds@i 009B               delayMicroseconds@x 0099  
                         _SPBRGH 000FB0           _handle_usb_transaction 0FB6  
                 __CFG_XINST$OFF 000000           __size_ofi2_handle_uart 0040  
                   i2_flush_uart 1106                        ??___lwdiv 0005  
                      ??___lwmod 000C                           _buffer 0036  
                         _ir_ptr 0043                 __end_of_init_usb 0DAA  
                         clear_0 0B7C                           clear_1 0B8E  
                         clear_2 0B9A                        ??_get_pwm 0099  
                   __pdataCOMRAM 0055                     __mediumconst 3EF8  
        ?_handle_usb_ctrl_output 0001                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
          __size_ofi2_print_byte 0030            __size_ofi2_print_text 002E  
             _handle_usb_ctrl_in 0A8C                       __accesstop 0060  
        __end_of__initialization 0BA0                    ___rparam_used 000001  
              _usb_prepare_setup 0CC0     __size_of_handle_usb_ctrl_out 00C0  
            ?_handle_usb_ctrl_in 0001                   __pcstackCOMRAM 0001  
             ?_usb_prepare_setup 0001                    __end_of_sd000 3F97  
                  __end_of_sd001 3F65                    __end_of_sd002 3F77  
                   __pidataBANK0 1116              handle_usb_ctrl_in@i 0004  
            ??_usb_prepare_setup 0001   __end_of_handle_usb_ctrl_output 0C0E  
                   i2_print_byte 1018                     i2_print_text 1048  
           ??_handle_usb_ctrl_in 0001            _usb_check_std_request 0506  
                  i2_handle_uart 0E74                       __pbssBANK0 0060  
                     __pbssBANK1 0100                 _handle_usb_reset 0EEA  
               _handle_usb_stall 10E4                  _data_out_packet 00A6  
                     _data_count 0041        __end_of_usb_prepare_setup 0D10  
                  _cdc_in_packet 0055               __size_of_init_uart 001A  
                        _BAUDCTL 000FB8               _user_endpoint_init 08FA  
                        _EP0_OUT 00AE                          _EP2_OUT 00AC  
                 ?i2_handle_uart 0001              ?_user_endpoint_init 0001  
        ??_handle_usb_ctrl_input 0007          ??_handle_usb_ctrl_setup 0014  
                __CFG_USBDIV$OFF 000000                          _UIEbits 000F60  
        __size_of_handle_uart_rx 0008                          _UIRbits 000F62  
                handle_uart_rx@c 0001                        ?_init_usb 0001  
                __CFG_PWRTEN$OFF 000000                          __Hparam 0000  
           ??_user_endpoint_init 0001                          __Lparam 0000  
                     _flush_uart 10F6                          ___lwdiv 0C6E  
                        ___lwmod 0DF2                __end_of_hex_table 3F09  
                __CFG_STVREN$OFF 000000                          __pcinit 0B34  
                        __ramtop 0300                          __ptext0 00CA  
                        __ptext1 0F20                          __ptext2 0DAA  
                        __ptext3 0F52                          __ptext4 10BA  
                        __ptext5 0EB4                          __ptext6 0FE8  
                        __ptext7 0F84                          __ptext8 0D5E  
                        __ptext9 10A0                          _get_pwm 0DAA  
                        _counter 0052                          _ir_ptr2 0080  
                   __size_of_isr 07F8           ?_usb_check_std_request 0001  
              __end_of_init_uart 10BA        handle_usb_ctrl_setup@type 001E  
                 _ctrl_trf_state 0050     __end_of_print_number_nospace 08FA  
                 __pintcode_body 06D2             end_of_initialization 0BA0  
        ?_handle_usb_transaction 0001        usb_check_std_request@type 0013  
                        int_func 06D2                       ??_init_usb 0099  
     __size_of_usb_prepare_setup 0050          handle_usb_ctrl_out@temp 0005  
                      _RCSTAbits 000FAB                          postdec1 000FE5  
                        postinc0 000FEE                          postinc2 000FDE  
     usb_check_std_request@index 0011                  _qual_descriptor 3F89  
                     _print_hex2 0D10                  ??i2_handle_uart 0001  
               _setup_out_packet 0059                       _print_byte 0F84  
                     _print_text 0FE8                    ??_handle_uart 0099  
                 _serial_out_ptr 0047              _handle_usb_ctrl_out 09CC  
                      _TRISCbits 000F94                    ?_print_number 000F  
                     _usb_config 0054   __end_of_handle_usb_transaction 0FE8  
   usb_check_std_request@request 0012           _ctrl_trf_session_owner 004F  
     handle_usb_ctrl_output@temp 001F             ?_handle_usb_ctrl_out 0001  
                    print_byte@c 0099                       _sync_code0 10BA  
                     _sync_code1 0F52                       _sync_code2 0F20  
                     _sync_code3 0EB4                      print_text@s 009A  
                    ?_flush_uart 0001         __end_of_handle_usb_reset 0F20  
                  __pidataCOMRAM 1122         __end_of_handle_usb_stall 10F6  
            start_initialization 0B34                   ??_print_number 0011  
                    __end_of_isr 0800                   _handle_uart_rx 112C  
            __end_of_handle_uart 0E74            ??_handle_usb_ctrl_out 0005  
        __end_of_qual_descriptor 3F93             _print_number_nospace 0800  
                    __pdataBANK0 00A6                      ?_print_hex2 0001  
                    ?_print_byte 0001                      ?_print_text 009A  
                    __pbssCOMRAM 0036      __size_of_handle_usb_ctrl_in 00A8  
                  __pcstackBANK0 0084           __end_of_handle_uart_rx 1134  
              _delayMicroseconds 1076   __size_of_handle_usb_ctrl_input 0060  
             ?_delayMicroseconds 0099    __end_of_handle_usb_ctrl_input 0C6E  
 __size_of_handle_usb_ctrl_setup 0204              __size_of_flush_uart 0010  
  __end_of_handle_usb_ctrl_setup 0506              ??_delayMicroseconds 009B  
              __size_of_init_usb 004C                 ___lwdiv@dividend 0001  
                    ?_sync_code0 0001                      ?_sync_code1 0001  
                    ?_sync_code2 0001                      ?_sync_code3 0001  
          ?_print_number_nospace 000D                        __pintcode 0008  
                  __pmediumconst 3EF8                         ?___lwdiv 0001  
                       ?___lwmod 0008                      __pintcodelo 0018  
        ??_usb_check_std_request 0011                         ?_get_pwm 0001  
                _setup_in_packet 0057                        _hex_table 3EF9  
      __end_of_delayMicroseconds 10A0                      _handle_uart 0E34  
                      _ir_buffer 0060                  ?_handle_uart_rx 0001  
                    sync_code0@c 0099                      sync_code1@c 0099  
                    sync_code2@c 0099                      sync_code3@c 0099  
               ___lwdiv@quotient 0005                        _init_uart 10A0  
                       _LATCbits 000F8B                         _PIE1bits 000F9D  
                       _PIE2bits 000FA0              __size_of_print_hex2 004E  
            __size_of_print_byte 0032       print_number_nospace@number 000D  
                       i2u106_40 0C90                         i2u115_40 0870  
                       i2u116_40 08AC                         i2u109_40 0E0C  
                       i2u134_40 0AA0              __size_of_print_text 0030  
                       i2u135_40 0B04                         i2u135_47 0AFA  
                       i2u165_40 0FCC                         i2u166_40 0FCE  
                       _PIR1bits 000F9E                         _PIR2bits 000FA1  
    __size_of_user_endpoint_init 00D2             __end_of_print_number 10E4  
               __CFG_WDTPS$32768 000000                         _UEP0bits 000F53  
                       _UEP1bits 000F54                         _UEP2bits 000F55  
                  ?i2_flush_uart 0001                         _UCONbits 000F64  
       ??_handle_usb_ctrl_output 001F                        main@i_787 00A4  
                      _usb_state 0051              __size_of_sync_code0 0016  
            __size_of_sync_code1 0032              __size_of_sync_code2 0032  
            __size_of_sync_code3 0036                       ?_init_uart 0001  
                      copy_data0 0B48                        copy_data1 0B68  
   handle_usb_ctrl_setup@command 001B                         __Hrparam 0000  
         ??_print_number_nospace 000F                         __Lrparam 0000  
             __CFG_BOREN$SBORDIS 000000                   ??i2_flush_uart 0001  
                   ??_flush_uart 0099                        init_usb@i 0099  
               __size_of___lwdiv 0052                 __size_of___lwmod 0042  
              ?_handle_usb_reset 0001                ?_handle_usb_stall 0001  
                  ?i2_print_byte 0001               ??_handle_usb_reset 0001  
               __size_of_get_pwm 0048       __size_of_delayMicroseconds 002A  
                  ?i2_print_text 0002               ??_handle_usb_stall 0001  
                       _data_ptr 003E            __end_ofi2_handle_uart 0EB4  
                ___lwdiv@divisor 0003                  ___lwdiv@counter 0007  
                       __ptext10 10F6                         __ptext11 0E34  
                       __ptext20 0E74                         __ptext12 1076  
                       __ptext21 08FA                         __ptext30 0C0E  
                       __ptext22 10D0                         __ptext31 0A8C  
                       __ptext23 0800                         __ptext15 0FB6  
                       __ptext32 10E4                         __ptext24 0DF2  
                       __ptext16 0BAA                         __ptext33 0EEA  
                       __ptext25 0C6E                         __ptext17 0302  
                       __ptext34 0CC0                         __ptext26 09CC  
                       __ptext18 0506                         __ptext35 112C  
                       __ptext27 1048                         __ptext19 1106  
                       __ptext36 0000                         __ptext28 0D10  
                       __ptext29 1018               __end_of_flush_uart 1106  
                       _ir_count 0082                    __size_of_isr1 00AE  
                  __size_of_main 0238                         _init_usb 0D5E  
                       int$flags 005F                      _input_state 00B0  
__size_of_handle_usb_ctrl_output 0064                         main@argc 009D  
                       main@argv 009F                         get_pwm@c 009B  
            __end_of_usb_config1 3F4F                   ??i2_print_byte 0001  
                   ??_print_hex2 0002                   ??i2_print_text 0004  
                   ??_print_byte 0099                     ??_print_text 009C  
                     _INTCONbits 000FF2      handle_usb_ctrl_setup@length 0019  
handle_usb_ctrl_setup@length_717 001C                      ??_init_uart 0099  
               print_hex2@number 0004      __end_of_handle_usb_ctrl_out 0A8C  
                       intlevel1 0000                         intlevel2 0000  
             print_number@number 000F                 ___lwmod@dividend 0008  
          __size_of_print_number 0014               __end_of_print_hex2 0D5E  
             __end_of_print_byte 0FB6                     ??_sync_code0 0099  
                   ??_sync_code1 0099                     ??_sync_code2 0099  
                   ??_sync_code3 0099               __end_of_print_text 1018  
           __CFG_CPUDIV$NOCLKDIV 000000                 ??_handle_uart_rx 0001  
              _serial_out_buffer 0100         ??_handle_usb_transaction 0020  
     __end_of_handle_usb_ctrl_in 0B34   __size_of_usb_check_std_request 01CC  
  __end_of_usb_check_std_request 06D2                  ___lwmod@divisor 000A  
                   ?_handle_uart 0001                  ___lwmod@counter 000C  
                   _print_number 10D0             __end_ofi2_flush_uart 1116  
             __end_of_sync_code0 10D0               __end_of_sync_code1 0F84  
             __end_of_sync_code2 0F52               __end_of_sync_code3 0EEA  
         _handle_usb_ctrl_output 0BAA                 _serial_out_count 0049  
          _handle_usb_ctrl_input 0C0E            _handle_usb_ctrl_setup 0302  
                _serial_out_ptr2 0045  
