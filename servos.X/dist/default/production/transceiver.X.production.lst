

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Jun 27 03:17:50 2021

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F14K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    29                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    30                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    55                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    56  0000                     
    57                           ; Version 1.45
    58                           ; Generated 16/11/2017 GMT
    59                           ; 
    60                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F14K50 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	idataCOMRAM
    93  00130A                     __pidataCOMRAM:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _cdc_in_packet
    97  00130A  28                 	db	40
    98  00130B  02                 	db	2
    99                           
   100                           ;initializer for _setup_in_packet
   101  00130C  20                 	db	32
   102  00130D  02                 	db	2
   103                           
   104                           ;initializer for _setup_out_packet
   105  00130E  18                 	db	24
   106  00130F  02                 	db	2
   107                           
   108                           ;initializer for _EP1_IN
   109  001310  0C                 	db	12
   110  001311  02                 	db	2
   111                           
   112                           ;initializer for _EP0_IN
   113  001312  04                 	db	4
   114  001313  02                 	db	2
   115                           
   116                           	psect	idataBANK0
   117  001314                     __pidataBANK0:
   118                           	opt stack 0
   119                           
   120                           ;initializer for _data_out_packet
   121  001314  78                 	db	120
   122  001315  02                 	db	2
   123                           
   124                           ;initializer for _data_in_packet
   125  001316  38                 	db	56
   126  001317  02                 	db	2
   127                           
   128                           ;initializer for _EP2_IN
   129  001318  14                 	db	20
   130  001319  02                 	db	2
   131                           
   132                           ;initializer for _EP2_OUT
   133  00131A  10                 	db	16
   134  00131B  02                 	db	2
   135                           
   136                           ;initializer for _EP0_OUT
   137  00131C  00                 	db	0
   138  00131D  02                 	db	2
   139                           
   140                           	psect	mediumconst
   141  003EF2                     __pmediumconst:
   142                           	opt stack 0
   143  003EF2  00                 	db	0
   144  003EF3                     _hex_table:
   145                           	opt stack 0
   146  003EF3  30                 	db	48
   147  003EF4  31                 	db	49
   148  003EF5  32                 	db	50
   149  003EF6  33                 	db	51
   150  003EF7  34                 	db	52
   151  003EF8  35                 	db	53
   152  003EF9  36                 	db	54
   153  003EFA  37                 	db	55
   154  003EFB  38                 	db	56
   155  003EFC  39                 	db	57
   156  003EFD  61                 	db	97
   157  003EFE  62                 	db	98
   158  003EFF  63                 	db	99
   159  003F00  64                 	db	100
   160  003F01  65                 	db	101
   161  003F02  66                 	db	102
   162  003F03                     __end_of_hex_table:
   163                           	opt stack 0
   164  003F03                     _usb_config1:
   165                           	opt stack 0
   166  003F03  09                 	db	9
   167  003F04  02                 	db	2
   168  003F05  46                 	db	70
   169  003F06  00                 	db	0
   170  003F07  02                 	db	2
   171  003F08  01                 	db	1
   172  003F09  00                 	db	0
   173  003F0A  80                 	db	128
   174  003F0B  32                 	db	50
   175  003F0C  08                 	db	8
   176  003F0D  0B                 	db	11
   177  003F0E  00                 	db	0
   178  003F0F  02                 	db	2
   179  003F10  02                 	db	2
   180  003F11  02                 	db	2
   181  003F12  01                 	db	1
   182  003F13  00                 	db	0
   183  003F14  09                 	db	9
   184  003F15  04                 	db	4
   185  003F16  00                 	db	0
   186  003F17  00                 	db	0
   187  003F18  01                 	db	1
   188  003F19  02                 	db	2
   189  003F1A  02                 	db	2
   190  003F1B  01                 	db	1
   191  003F1C  00                 	db	0
   192  003F1D  05                 	db	5
   193  003F1E  24                 	db	36
   194  003F1F  00                 	db	0
   195  003F20  10                 	db	16
   196  003F21  01                 	db	1
   197  003F22  04                 	db	4
   198  003F23  24                 	db	36
   199  003F24  02                 	db	2
   200  003F25  00                 	db	0
   201  003F26  05                 	db	5
   202  003F27  24                 	db	36
   203  003F28  06                 	db	6
   204  003F29  00                 	db	0
   205  003F2A  01                 	db	1
   206  003F2B  07                 	db	7
   207  003F2C  05                 	db	5
   208  003F2D  81                 	db	129
   209  003F2E  03                 	db	3
   210  003F2F  10                 	db	16
   211  003F30  00                 	db	0
   212  003F31  20                 	db	32
   213  003F32  09                 	db	9
   214  003F33  04                 	db	4
   215  003F34  01                 	db	1
   216  003F35  00                 	db	0
   217  003F36  02                 	db	2
   218  003F37  0A                 	db	10
   219  003F38  00                 	db	0
   220  003F39  00                 	db	0
   221  003F3A  00                 	db	0
   222  003F3B  07                 	db	7
   223  003F3C  05                 	db	5
   224  003F3D  82                 	db	130
   225  003F3E  02                 	db	2
   226  003F3F  40                 	db	64
   227  003F40  00                 	db	0
   228  003F41  00                 	db	0
   229  003F42  07                 	db	7
   230  003F43  05                 	db	5
   231  003F44  02                 	db	2
   232  003F45  02                 	db	2
   233  003F46  40                 	db	64
   234  003F47  00                 	db	0
   235  003F48  00                 	db	0
   236  003F49                     __end_of_usb_config1:
   237                           	opt stack 0
   238  003F49                     _sd002:
   239                           	opt stack 0
   240  003F49  20                 	db	32
   241  003F4A  03                 	db	3
   242  003F4B  57                 	db	87
   243  003F4C  00                 	db	0
   244  003F4D  65                 	db	101
   245  003F4E  00                 	db	0
   246  003F4F  61                 	db	97
   247  003F50  00                 	db	0
   248  003F51  74                 	db	116
   249  003F52  00                 	db	0
   250  003F53  68                 	db	104
   251  003F54  00                 	db	0
   252  003F55  65                 	db	101
   253  003F56  00                 	db	0
   254  003F57  72                 	db	114
   255  003F58  00                 	db	0
   256  003F59  20                 	db	32
   257  003F5A  00                 	db	0
   258  003F5B  53                 	db	83
   259  003F5C  00                 	db	0
   260  003F5D  74                 	db	116
   261  003F5E  00                 	db	0
   262  003F5F  61                 	db	97
   263  003F60  00                 	db	0
   264  003F61  74                 	db	116
   265  003F62  00                 	db	0
   266  003F63  69                 	db	105
   267  003F64  00                 	db	0
   268  003F65  6F                 	db	111
   269  003F66  00                 	db	0
   270  003F67  6E                 	db	110
   271  003F68  00                 	db	0
   272  003F69                     __end_of_sd002:
   273                           	opt stack 0
   274  003F69                     _sd001:
   275                           	opt stack 0
   276  003F69  16                 	db	22
   277  003F6A  03                 	db	3
   278  003F6B  4D                 	db	77
   279  003F6C  00                 	db	0
   280  003F6D  63                 	db	99
   281  003F6E  00                 	db	0
   282  003F6F  4C                 	db	76
   283  003F70  00                 	db	0
   284  003F71  69                 	db	105
   285  003F72  00                 	db	0
   286  003F73  6F                 	db	111
   287  003F74  00                 	db	0
   288  003F75  6E                 	db	110
   289  003F76  00                 	db	0
   290  003F77  68                 	db	104
   291  003F78  00                 	db	0
   292  003F79  65                 	db	101
   293  003F7A  00                 	db	0
   294  003F7B  61                 	db	97
   295  003F7C  00                 	db	0
   296  003F7D  64                 	db	100
   297  003F7E  00                 	db	0
   298  003F7F                     __end_of_sd001:
   299                           	opt stack 0
   300  003F7F                     _usb_descriptor:
   301                           	opt stack 0
   302  003F7F  12                 	db	18
   303  003F80  01                 	db	1
   304  003F81  10                 	db	16
   305  003F82  01                 	db	1
   306  003F83  EF                 	db	239
   307  003F84  02                 	db	2
   308  003F85  01                 	db	1
   309  003F86  08                 	db	8
   310  003F87  D8                 	db	216
   311  003F88  04                 	db	4
   312  003F89  0B                 	db	11
   313  003F8A  00                 	db	0
   314  003F8B  03                 	db	3
   315  003F8C  00                 	db	0
   316  003F8D  01                 	db	1
   317  003F8E  02                 	db	2
   318  003F8F  00                 	db	0
   319  003F90  01                 	db	1
   320  003F91                     __end_of_usb_descriptor:
   321                           	opt stack 0
   322  003F91                     _qual_descriptor:
   323                           	opt stack 0
   324  003F91  0A                 	db	10
   325  003F92  06                 	db	6
   326  003F93  00                 	db	0
   327  003F94  02                 	db	2
   328  003F95  00                 	db	0
   329  003F96  00                 	db	0
   330  003F97  00                 	db	0
   331  003F98  08                 	db	8
   332  003F99  01                 	db	1
   333  003F9A  00                 	db	0
   334  003F9B                     __end_of_qual_descriptor:
   335                           	opt stack 0
   336  003F9B                     _sd000:
   337                           	opt stack 0
   338  003F9B  04                 	db	4
   339  003F9C  03                 	db	3
   340  003F9D  09                 	db	9
   341  003F9E  04                 	db	4
   342  003F9F                     __end_of_sd000:
   343                           	opt stack 0
   344  0000                     _UEP2bits	set	3925
   345  0000                     _UEP2	set	3925
   346  0000                     _UEP1bits	set	3924
   347  0000                     _UEP1	set	3924
   348  0000                     _UEP0bits	set	3923
   349  0000                     _UEP0	set	3923
   350  0000                     _UADDR	set	3932
   351  0000                     _TMR0	set	4054
   352  0000                     _TXREG	set	4013
   353  0000                     _INTCONbits	set	4082
   354  0000                     _T0CON	set	4053
   355  0000                     _TRISBbits	set	3987
   356  0000                     _LATBbits	set	3978
   357  0000                     _ANSELH	set	3967
   358  0000                     _ANSEL	set	3966
   359  0000                     _TXSTAbits	set	4012
   360  0000                     _TRISCbits	set	3988
   361  0000                     _USTAT	set	3939
   362  0000                     _UIRbits	set	3938
   363  0000                     _PIE2bits	set	4000
   364  0000                     _UIEbits	set	3936
   365  0000                     _PIR2bits	set	4001
   366  0000                     _UIE	set	3936
   367  0000                     _UIR	set	3938
   368  0000                     _UCONbits	set	3940
   369  0000                     _UCON	set	3940
   370  0000                     _UCFG	set	3937
   371  0000                     _LATCbits	set	3979
   372  0000                     _RCSTAbits	set	4011
   373  0000                     _RCREG	set	4014
   374  0000                     _PIE1bits	set	3997
   375  0000                     _PIR1bits	set	3998
   376  0000                     _SPBRG	set	4015
   377  0000                     _SPBRGH	set	4016
   378  0000                     _BAUDCTL	set	4024
   379  0000                     _TXSTA	set	4012
   380  0000                     _RCSTA	set	4011
   381  003F9F                     STR_8:
   382  003F9F  0A                 	db	10
   383  003FA0  0A                 	db	10
   384  003FA1  0A                 	db	10
   385  003FA2  0A                 	db	10
   386  003FA3  57                 	db	87	;'W'
   387  003FA4  65                 	db	101	;'e'
   388  003FA5  6C                 	db	108	;'l'
   389  003FA6  63                 	db	99	;'c'
   390  003FA7  6F                 	db	111	;'o'
   391  003FA8  6D                 	db	109	;'m'
   392  003FA9  65                 	db	101	;'e'
   393  003FAA  20                 	db	32
   394  003FAB  74                 	db	116	;'t'
   395  003FAC  6F                 	db	111	;'o'
   396  003FAD  20                 	db	32
   397  003FAE  74                 	db	116	;'t'
   398  003FAF  72                 	db	114	;'r'
   399  003FB0  61                 	db	97	;'a'
   400  003FB1  6E                 	db	110	;'n'
   401  003FB2  73                 	db	115	;'s'
   402  003FB3  63                 	db	99	;'c'
   403  003FB4  65                 	db	101	;'e'
   404  003FB5  69                 	db	105	;'i'
   405  003FB6  76                 	db	118	;'v'
   406  003FB7  65                 	db	101	;'e'
   407  003FB8  72                 	db	114	;'r'
   408  003FB9  0A                 	db	10
   409  003FBA  00                 	db	0
   410  003FBB                     STR_1:
   411  003FBB  75                 	db	117	;'u'
   412  003FBC  6E                 	db	110	;'n'
   413  003FBD  6B                 	db	107	;'k'
   414  003FBE  6E                 	db	110	;'n'
   415  003FBF  6F                 	db	111	;'o'
   416  003FC0  77                 	db	119	;'w'
   417  003FC1  6E                 	db	110	;'n'
   418  003FC2  20                 	db	32
   419  003FC3  64                 	db	100	;'d'
   420  003FC4  65                 	db	101	;'e'
   421  003FC5  73                 	db	115	;'s'
   422  003FC6  63                 	db	99	;'c'
   423  003FC7  72                 	db	114	;'r'
   424  003FC8  69                 	db	105	;'i'
   425  003FC9  70                 	db	112	;'p'
   426  003FCA  74                 	db	116	;'t'
   427  003FCB  6F                 	db	111	;'o'
   428  003FCC  72                 	db	114	;'r'
   429  003FCD  20                 	db	32
   430  003FCE  74                 	db	116	;'t'
   431  003FCF  79                 	db	121	;'y'
   432  003FD0  70                 	db	112	;'p'
   433  003FD1  65                 	db	101	;'e'
   434  003FD2  3A                 	db	58	;':'
   435  003FD3  20                 	db	32
   436  003FD4  00                 	db	0
   437  003FD5                     STR_3:
   438  003FD5  75                 	db	117	;'u'
   439  003FD6  6E                 	db	110	;'n'
   440  003FD7  6B                 	db	107	;'k'
   441  003FD8  6E                 	db	110	;'n'
   442  003FD9  6F                 	db	111	;'o'
   443  003FDA  77                 	db	119	;'w'
   444  003FDB  6E                 	db	110	;'n'
   445  003FDC  20                 	db	32
   446  003FDD  72                 	db	114	;'r'
   447  003FDE  65                 	db	101	;'e'
   448  003FDF  71                 	db	113	;'q'
   449  003FE0  75                 	db	117	;'u'
   450  003FE1  65                 	db	101	;'e'
   451  003FE2  73                 	db	115	;'s'
   452  003FE3  74                 	db	116	;'t'
   453  003FE4  20                 	db	32
   454  003FE5  00                 	db	0
   455  003FE6                     STR_7:
   456  003FE6  63                 	db	99	;'c'
   457  003FE7  74                 	db	116	;'t'
   458  003FE8  72                 	db	114	;'r'
   459  003FE9  6C                 	db	108	;'l'
   460  003FEA  5F                 	db	95	;'_'
   461  003FEB  6F                 	db	111	;'o'
   462  003FEC  75                 	db	117	;'u'
   463  003FED  74                 	db	116	;'t'
   464  003FEE  70                 	db	112	;'p'
   465  003FEF  75                 	db	117	;'u'
   466  003FF0  74                 	db	116	;'t'
   467  003FF1  20                 	db	32
   468  003FF2  33                 	db	51	;'3'
   469  003FF3  0A                 	db	10
   470  003FF4  00                 	db	0
   471  003FF5                     STR_5:
   472  003FF5  63                 	db	99	;'c'
   473  003FF6  74                 	db	116	;'t'
   474  003FF7  72                 	db	114	;'r'
   475  003FF8  6C                 	db	108	;'l'
   476  003FF9  5F                 	db	95	;'_'
   477  003FFA  6F                 	db	111	;'o'
   478  003FFB  75                 	db	117	;'u'
   479  003FFC  74                 	db	116	;'t'
   480  003FFD  20                 	db	32
   481  003FFE  00                 	db	0
   482  0000                     
   483                           ; #config settings
   484  003FFF  00                 	db	0	; dummy byte at the end
   485  0000                     
   486                           	psect	cinit
   487  000DB6                     __pcinit:
   488                           	opt stack 0
   489  000DB6                     start_initialization:
   490                           	opt stack 0
   491  000DB6                     __initialization:
   492                           	opt stack 0
   493                           
   494                           ; Initialize objects allocated to BANK0 (10 bytes)
   495                           ; load TBLPTR registers with __pidataBANK0
   496  000DB6  0E14               	movlw	low __pidataBANK0
   497  000DB8  6EF6               	movwf	tblptrl,c
   498  000DBA  0E13               	movlw	high __pidataBANK0
   499  000DBC  6EF7               	movwf	tblptrh,c
   500  000DBE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   501  000DC0  6EF8               	movwf	tblptru,c
   502  000DC2  EE00  F0AB         	lfsr	0,__pdataBANK0
   503  000DC6  EE10 F00A          	lfsr	1,10
   504  000DCA                     copy_data0:
   505  000DCA  0009               	tblrd		*+
   506  000DCC  CFF5 FFEE          	movff	tablat,postinc0
   507  000DD0  50E5               	movf	postdec1,w,c
   508  000DD2  50E1               	movf	fsr1l,w,c
   509  000DD4  E1FA               	bnz	copy_data0
   510                           
   511                           ; Initialize objects allocated to COMRAM (10 bytes)
   512                           ; load TBLPTR registers with __pidataCOMRAM
   513  000DD6  0E0A               	movlw	low __pidataCOMRAM
   514  000DD8  6EF6               	movwf	tblptrl,c
   515  000DDA  0E13               	movlw	high __pidataCOMRAM
   516  000DDC  6EF7               	movwf	tblptrh,c
   517  000DDE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   518  000DE0  6EF8               	movwf	tblptru,c
   519  000DE2  EE00  F044         	lfsr	0,__pdataCOMRAM
   520  000DE6  EE10 F00A          	lfsr	1,10
   521  000DEA                     copy_data1:
   522  000DEA  0009               	tblrd		*+
   523  000DEC  CFF5 FFEE          	movff	tablat,postinc0
   524  000DF0  50E5               	movf	postdec1,w,c
   525  000DF2  50E1               	movf	fsr1l,w,c
   526  000DF4  E1FA               	bnz	copy_data1
   527                           
   528                           ; Clear objects allocated to BANK1 (256 bytes)
   529  000DF6  EE01  F000         	lfsr	0,__pbssBANK1
   530  000DFA  EE11 F000          	lfsr	1,256
   531  000DFE                     clear_0:
   532  000DFE  6AEE               	clrf	postinc0,c
   533  000E00  50E5               	movf	postdec1,w,c
   534  000E02  50E1               	movf	fsr1l,w,c
   535  000E04  E1FC               	bnz	clear_0
   536  000E06  50E2               	movf	fsr1h,w,c
   537  000E08  E1FA               	bnz	clear_0
   538                           
   539                           ; Clear objects allocated to BANK0 (40 bytes)
   540  000E0A  EE00  F060         	lfsr	0,__pbssBANK0
   541  000E0E  0E28               	movlw	40
   542  000E10                     clear_1:
   543  000E10  6AEE               	clrf	postinc0,c
   544  000E12  06E8               	decf	wreg,f,c
   545  000E14  E1FD               	bnz	clear_1
   546                           
   547                           ; Clear objects allocated to COMRAM (16 bytes)
   548  000E16  EE00  F034         	lfsr	0,__pbssCOMRAM
   549  000E1A  0E10               	movlw	16
   550  000E1C                     clear_2:
   551  000E1C  6AEE               	clrf	postinc0,c
   552  000E1E  06E8               	decf	wreg,f,c
   553  000E20  E1FD               	bnz	clear_2
   554  000E22                     end_of_initialization:
   555                           	opt stack 0
   556  000E22                     __end_of__initialization:
   557                           	opt stack 0
   558  000E22  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   559  000E24  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   560  000E26  0100               	movlb	0
   561  000E28  EF65  F000         	goto	_main	;jump to C main() function
   562                           tblptru	equ	0xFF8
   563                           tblptrh	equ	0xFF7
   564                           tblptrl	equ	0xFF6
   565                           tablat	equ	0xFF5
   566                           postinc0	equ	0xFEE
   567                           wreg	equ	0xFE8
   568                           postdec1	equ	0xFE5
   569                           fsr1h	equ	0xFE2
   570                           fsr1l	equ	0xFE1
   571                           
   572                           	psect	bssCOMRAM
   573  000034                     __pbssCOMRAM:
   574                           	opt stack 0
   575  000034                     _data_ptr:
   576                           	opt stack 0
   577  000034                     	ds	3
   578  000037                     _data_count:
   579                           	opt stack 0
   580  000037                     	ds	2
   581  000039                     _serial_out_ptr:
   582                           	opt stack 0
   583  000039                     	ds	2
   584  00003B                     _serial_in_ptr:
   585                           	opt stack 0
   586  00003B                     	ds	2
   587  00003D                     _serial_in_count:
   588                           	opt stack 0
   589  00003D                     	ds	2
   590  00003F                     _ctrl_trf_session_owner:
   591                           	opt stack 0
   592  00003F                     	ds	1
   593  000040                     _ctrl_trf_state:
   594                           	opt stack 0
   595  000040                     	ds	1
   596  000041                     _usb_state:
   597                           	opt stack 0
   598  000041                     	ds	1
   599  000042                     _flags:
   600                           	opt stack 0
   601  000042                     	ds	1
   602  000043                     _usb_config:
   603                           	opt stack 0
   604  000043                     	ds	1
   605                           tblptru	equ	0xFF8
   606                           tblptrh	equ	0xFF7
   607                           tblptrl	equ	0xFF6
   608                           tablat	equ	0xFF5
   609                           postinc0	equ	0xFEE
   610                           wreg	equ	0xFE8
   611                           postdec1	equ	0xFE5
   612                           fsr1h	equ	0xFE2
   613                           fsr1l	equ	0xFE1
   614                           
   615                           	psect	dataCOMRAM
   616  000044                     __pdataCOMRAM:
   617                           	opt stack 0
   618  000044                     _cdc_in_packet:
   619                           	opt stack 0
   620  000044                     	ds	2
   621  000046                     _setup_in_packet:
   622                           	opt stack 0
   623  000046                     	ds	2
   624  000048                     _setup_out_packet:
   625                           	opt stack 0
   626  000048                     	ds	2
   627  00004A                     _EP1_IN:
   628                           	opt stack 0
   629  00004A                     	ds	2
   630  00004C                     _EP0_IN:
   631                           	opt stack 0
   632  00004C                     	ds	2
   633                           tblptru	equ	0xFF8
   634                           tblptrh	equ	0xFF7
   635                           tblptrl	equ	0xFF6
   636                           tablat	equ	0xFF5
   637                           postinc0	equ	0xFEE
   638                           wreg	equ	0xFE8
   639                           postdec1	equ	0xFE5
   640                           fsr1h	equ	0xFE2
   641                           fsr1l	equ	0xFE1
   642                           
   643                           	psect	bssBANK0
   644  000060                     __pbssBANK0:
   645                           	opt stack 0
   646  000060                     _serial_in_buffer:
   647                           	opt stack 0
   648  000060                     	ds	32
   649  000080                     _serial_out_ptr2:
   650                           	opt stack 0
   651  000080                     	ds	2
   652  000082                     _serial_out_count:
   653                           	opt stack 0
   654  000082                     	ds	2
   655  000084                     _serial_in_ptr2:
   656                           	opt stack 0
   657  000084                     	ds	2
   658  000086                     _tick:
   659                           	opt stack 0
   660  000086                     	ds	2
   661                           tblptru	equ	0xFF8
   662                           tblptrh	equ	0xFF7
   663                           tblptrl	equ	0xFF6
   664                           tablat	equ	0xFF5
   665                           postinc0	equ	0xFEE
   666                           wreg	equ	0xFE8
   667                           postdec1	equ	0xFE5
   668                           fsr1h	equ	0xFE2
   669                           fsr1l	equ	0xFE1
   670                           
   671                           	psect	dataBANK0
   672  0000AB                     __pdataBANK0:
   673                           	opt stack 0
   674  0000AB                     _data_out_packet:
   675                           	opt stack 0
   676  0000AB                     	ds	2
   677  0000AD                     _data_in_packet:
   678                           	opt stack 0
   679  0000AD                     	ds	2
   680  0000AF                     _EP2_IN:
   681                           	opt stack 0
   682  0000AF                     	ds	2
   683  0000B1                     _EP2_OUT:
   684                           	opt stack 0
   685  0000B1                     	ds	2
   686  0000B3                     _EP0_OUT:
   687                           	opt stack 0
   688  0000B3                     	ds	2
   689                           tblptru	equ	0xFF8
   690                           tblptrh	equ	0xFF7
   691                           tblptrl	equ	0xFF6
   692                           tablat	equ	0xFF5
   693                           postinc0	equ	0xFEE
   694                           wreg	equ	0xFE8
   695                           postdec1	equ	0xFE5
   696                           fsr1h	equ	0xFE2
   697                           fsr1l	equ	0xFE1
   698                           
   699                           	psect	bssBANK1
   700  000100                     __pbssBANK1:
   701                           	opt stack 0
   702  000100                     _serial_out_buffer:
   703                           	opt stack 0
   704  000100                     	ds	256
   705                           tblptru	equ	0xFF8
   706                           tblptrh	equ	0xFF7
   707                           tblptrl	equ	0xFF6
   708                           tablat	equ	0xFF5
   709                           postinc0	equ	0xFEE
   710                           wreg	equ	0xFE8
   711                           postdec1	equ	0xFE5
   712                           fsr1h	equ	0xFE2
   713                           fsr1l	equ	0xFE1
   714                           
   715                           	psect	cstackBANK0
   716  000088                     __pcstackBANK0:
   717                           	opt stack 0
   718  000088                     ??_isr1:
   719                           
   720                           ; 1 bytes @ 0x0
   721  000088                     	ds	21
   722  00009D                     print_byte@c:
   723                           	opt stack 0
   724  00009D                     init_usb@i:
   725                           	opt stack 0
   726  00009D                     delayMicroseconds@x:
   727                           	opt stack 0
   728  00009D                     write_radio@data:
   729                           	opt stack 0
   730                           
   731                           ; 2 bytes @ 0x15
   732  00009D                     	ds	1
   733  00009E                     print_text@s:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x16
   737  00009E                     	ds	1
   738  00009F                     ??_write_radio:
   739  00009F                     delayMicroseconds@i:
   740                           	opt stack 0
   741                           
   742                           ; 2 bytes @ 0x17
   743  00009F                     	ds	1
   744  0000A0                     write_radio@i:
   745                           	opt stack 0
   746                           
   747                           ; 1 bytes @ 0x18
   748  0000A0                     	ds	1
   749  0000A1                     handle_uart@bits:
   750                           	opt stack 0
   751                           
   752                           ; 1 bytes @ 0x19
   753  0000A1                     	ds	1
   754  0000A2                     
   755                           ; 2 bytes @ 0x1A
   756  0000A2                     	ds	2
   757  0000A4                     
   758                           ; 3 bytes @ 0x1C
   759  0000A4                     	ds	3
   760  0000A7                     
   761                           ; 1 bytes @ 0x1F
   762  0000A7                     	ds	1
   763  0000A8                     main@i:
   764                           	opt stack 0
   765                           
   766                           ; 1 bytes @ 0x20
   767  0000A8                     	ds	1
   768  0000A9                     main@i_919:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0x21
   772  0000A9                     	ds	1
   773  0000AA                     main@fragment:
   774                           	opt stack 0
   775                           
   776                           ; 1 bytes @ 0x22
   777  0000AA                     	ds	1
   778                           tblptru	equ	0xFF8
   779                           tblptrh	equ	0xFF7
   780                           tblptrl	equ	0xFF6
   781                           tablat	equ	0xFF5
   782                           postinc0	equ	0xFEE
   783                           wreg	equ	0xFE8
   784                           postdec1	equ	0xFE5
   785                           fsr1h	equ	0xFE2
   786                           fsr1l	equ	0xFE1
   787                           
   788                           	psect	cstackCOMRAM
   789  000001                     __pcstackCOMRAM:
   790                           	opt stack 0
   791  000001                     ??_handle_usb_ctrl_in:
   792  000001                     ?___lwdiv:
   793                           	opt stack 0
   794  000001                     handle_uart_rx@c:
   795                           	opt stack 0
   796  000001                     i2print_byte@c:
   797                           	opt stack 0
   798  000001                     ___lwdiv@dividend:
   799                           	opt stack 0
   800  000001                     i2delayMicroseconds@x:
   801                           	opt stack 0
   802                           
   803                           ; 2 bytes @ 0x0
   804  000001                     	ds	1
   805  000002                     ??_print_hex2:
   806  000002                     i2print_text@s:
   807                           	opt stack 0
   808                           
   809                           ; 2 bytes @ 0x1
   810  000002                     	ds	1
   811  000003                     ___lwdiv@divisor:
   812                           	opt stack 0
   813  000003                     i2delayMicroseconds@i:
   814                           	opt stack 0
   815                           
   816                           ; 2 bytes @ 0x2
   817  000003                     	ds	1
   818  000004                     print_hex2@number:
   819                           	opt stack 0
   820  000004                     handle_usb_ctrl_in@i:
   821                           	opt stack 0
   822                           
   823                           ; 1 bytes @ 0x3
   824  000004                     	ds	1
   825  000005                     handle_usb_ctrl_out@temp:
   826                           	opt stack 0
   827  000005                     i2handle_uart@bits:
   828                           	opt stack 0
   829  000005                     handle_usb_ctrl_in@fragment:
   830                           	opt stack 0
   831  000005                     ___lwdiv@quotient:
   832                           	opt stack 0
   833                           
   834                           ; 2 bytes @ 0x4
   835  000005                     	ds	1
   836  000006                     
   837                           ; 1 bytes @ 0x5
   838  000006                     	ds	1
   839  000007                     ___lwdiv@counter:
   840                           	opt stack 0
   841                           
   842                           ; 1 bytes @ 0x6
   843  000007                     	ds	1
   844  000008                     ?___lwmod:
   845                           	opt stack 0
   846  000008                     ___lwmod@dividend:
   847                           	opt stack 0
   848                           
   849                           ; 2 bytes @ 0x7
   850  000008                     	ds	2
   851  00000A                     ___lwmod@divisor:
   852                           	opt stack 0
   853                           
   854                           ; 2 bytes @ 0x9
   855  00000A                     	ds	2
   856  00000C                     ___lwmod@counter:
   857                           	opt stack 0
   858                           
   859                           ; 1 bytes @ 0xB
   860  00000C                     	ds	1
   861  00000D                     print_number_nospace@number:
   862                           	opt stack 0
   863                           
   864                           ; 2 bytes @ 0xC
   865  00000D                     	ds	2
   866  00000F                     print_number@number:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0xE
   870  00000F                     	ds	2
   871  000011                     usb_check_std_request@index:
   872                           	opt stack 0
   873                           
   874                           ; 1 bytes @ 0x10
   875  000011                     	ds	1
   876  000012                     usb_check_std_request@request:
   877                           	opt stack 0
   878                           
   879                           ; 1 bytes @ 0x11
   880  000012                     	ds	1
   881  000013                     usb_check_std_request@type:
   882                           	opt stack 0
   883                           
   884                           ; 1 bytes @ 0x12
   885  000013                     	ds	1
   886  000014                     ??_handle_usb_ctrl_setup:
   887                           
   888                           ; 1 bytes @ 0x13
   889  000014                     	ds	5
   890  000019                     handle_usb_ctrl_setup@length:
   891                           	opt stack 0
   892                           
   893                           ; 2 bytes @ 0x18
   894  000019                     	ds	2
   895  00001B                     handle_usb_ctrl_setup@command:
   896                           	opt stack 0
   897                           
   898                           ; 1 bytes @ 0x1A
   899  00001B                     	ds	1
   900  00001C                     handle_usb_ctrl_setup@length_840:
   901                           	opt stack 0
   902                           
   903                           ; 2 bytes @ 0x1B
   904  00001C                     	ds	2
   905  00001E                     handle_usb_ctrl_setup@type:
   906                           	opt stack 0
   907                           
   908                           ; 1 bytes @ 0x1D
   909  00001E                     	ds	1
   910  00001F                     handle_usb_ctrl_output@temp:
   911                           	opt stack 0
   912                           
   913                           ; 1 bytes @ 0x1E
   914  00001F                     	ds	1
   915  000020                     ??_handle_usb_transaction:
   916                           
   917                           ; 1 bytes @ 0x1F
   918  000020                     	ds	2
   919  000022                     ??_isr:
   920                           
   921                           ; 1 bytes @ 0x21
   922  000022                     	ds	18
   923                           tblptru	equ	0xFF8
   924                           tblptrh	equ	0xFF7
   925                           tblptrl	equ	0xFF6
   926                           tablat	equ	0xFF5
   927                           postinc0	equ	0xFEE
   928                           wreg	equ	0xFE8
   929                           postdec1	equ	0xFE5
   930                           fsr1h	equ	0xFE2
   931                           fsr1l	equ	0xFE1
   932                           
   933 ;;
   934 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   935 ;;
   936 ;; *************** function _main *****************
   937 ;; Defined at:
   938 ;;		line 1310 in file "transceiver.c"
   939 ;; Parameters:    Size  Location     Type
   940 ;;  argc            2   26[BANK0 ] int 
   941 ;;  argv            3   28[BANK0 ] PTR PTR unsigned char 
   942 ;; Auto vars:     Size  Location     Type
   943 ;;  fragment        1   34[BANK0 ] unsigned char 
   944 ;;  i               1   33[BANK0 ] unsigned char 
   945 ;;  i               1   32[BANK0 ] unsigned char 
   946 ;; Return value:  Size  Location     Type
   947 ;;                  2   26[BANK0 ] int 
   948 ;; Registers used:
   949 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   950 ;; Tracked objects:
   951 ;;		On entry : 0/0
   952 ;;		On exit  : 0/0
   953 ;;		Unchanged: 0/0
   954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   955 ;;      Params:         0       5       0       0
   956 ;;      Locals:         0       3       0       0
   957 ;;      Temps:          0       1       0       0
   958 ;;      Totals:         0       9       0       0
   959 ;;Total ram usage:        9 bytes
   960 ;; Hardware stack levels required when called:   12
   961 ;; This function calls:
   962 ;;		_delayMicroseconds
   963 ;;		_flush_uart
   964 ;;		_handle_uart
   965 ;;		_init_uart
   966 ;;		_init_usb
   967 ;;		_print_byte
   968 ;;		_print_text
   969 ;;		_radio_on
   970 ;;		_receive_mode
   971 ;;		_transmit_mode
   972 ;; This function is called by:
   973 ;;		Startup code after reset
   974 ;; This function uses a non-reentrant model
   975 ;;
   976                           
   977                           	psect	text0
   978  0000CA                     __ptext0:
   979                           	opt stack 0
   980  0000CA                     _main:
   981                           	opt stack 19
   982                           
   983                           ;transceiver.c: 1313: ANSEL = 0b00000000;
   984                           
   985                           ;incstack = 0
   986  0000CA  0E00               	movlw	0
   987  0000CC  6E7E               	movwf	3966,c	;volatile
   988                           
   989                           ;transceiver.c: 1314: ANSELH = 0b00000000;
   990  0000CE  0E00               	movlw	0
   991  0000D0  6E7F               	movwf	3967,c	;volatile
   992                           
   993                           ;transceiver.c: 1317: LATCbits.LATC6 = 1;
   994  0000D2  8C8B               	bsf	3979,6,c	;volatile
   995                           
   996                           ;transceiver.c: 1318: TRISCbits.TRISC6 = 0;
   997  0000D4  9C94               	bcf	3988,6,c	;volatile
   998                           
   999                           ;transceiver.c: 1320: LATBbits.LATB6 = 0;
  1000  0000D6  9C8A               	bcf	3978,6,c	;volatile
  1001                           
  1002                           ;transceiver.c: 1321: TRISBbits.TRISB6 = 0;
  1003  0000D8  9C93               	bcf	3987,6,c	;volatile
  1004                           
  1005                           ;transceiver.c: 1332: init_uart();
  1006  0000DA  EC49  F009         	call	_init_uart	;wreg free
  1007                           
  1008                           ;transceiver.c: 1333: delayMicroseconds(10000);
  1009  0000DE  0E27               	movlw	39
  1010  0000E0  0100               	movlb	0	; () banked
  1011  0000E2  6F9E               	movwf	(delayMicroseconds@x+1)& (0+255),b
  1012  0000E4  0E10               	movlw	16
  1013  0000E6  6F9D               	movwf	delayMicroseconds@x& (0+255),b
  1014  0000E8  EC21  F009         	call	_delayMicroseconds	;wreg free
  1015                           
  1016                           ;transceiver.c: 1337: print_byte(0xff);
  1017  0000EC  0EFF               	movlw	255
  1018  0000EE  EC90  F008         	call	_print_byte
  1019                           
  1020                           ;transceiver.c: 1338: print_text("\n\n\n\nWelcome to transceiver\n");
  1021  0000F2  0E9F               	movlw	low STR_8
  1022  0000F4  0100               	movlb	0	; () banked
  1023  0000F6  6F9E               	movwf	print_text@s& (0+255),b
  1024  0000F8  0E3F               	movlw	high STR_8
  1025  0000FA  6F9F               	movwf	(print_text@s+1)& (0+255),b
  1026  0000FC  ECDC  F008         	call	_print_text	;wreg free
  1027                           
  1028                           ;transceiver.c: 1339: flush_uart();
  1029  000100  EC6A  F009         	call	_flush_uart	;wreg free
  1030                           
  1031                           ;transceiver.c: 1343: T0CON = 0b10000100;
  1032  000104  0E84               	movlw	132
  1033  000106  6ED5               	movwf	4053,c	;volatile
  1034                           
  1035                           ;transceiver.c: 1344: TMR0 = -(48000000 / 4 / 32 / 1000);
  1036  000108  0EFE               	movlw	254
  1037  00010A  6ED7               	movwf	4055,c	;volatile
  1038  00010C  0E89               	movlw	137
  1039  00010E  6ED6               	movwf	4054,c	;volatile
  1040                           
  1041                           ;transceiver.c: 1345: INTCONbits.TMR0IF = 0;
  1042  000110  94F2               	bcf	intcon,2,c	;volatile
  1043                           
  1044                           ;transceiver.c: 1346: INTCONbits.TMR0IE = 1;
  1045  000112  8AF2               	bsf	intcon,5,c	;volatile
  1046                           
  1047                           ;transceiver.c: 1348: radio_on();
  1048  000114  EC33  F006         	call	_radio_on	;wreg free
  1049                           
  1050                           ;transceiver.c: 1350: init_usb();
  1051  000118  ECF0  F007         	call	_init_usb	;wreg free
  1052                           
  1053                           ;transceiver.c: 1352: INTCONbits.PEIE = 1;
  1054  00011C  8CF2               	bsf	intcon,6,c	;volatile
  1055                           
  1056                           ;transceiver.c: 1353: INTCONbits.GIE = 1;
  1057  00011E  8EF2               	bsf	intcon,7,c	;volatile
  1058  000120                     l350:
  1059  000120  0004               	clrwdt		;# 
  1060                           
  1061                           ;transceiver.c: 1358: handle_uart();
  1062  000122  EC69  F003         	call	_handle_uart	;wreg free
  1063                           
  1064                           ;transceiver.c: 1363: if(!(*(EP2_OUT) & (1 << 7)))
  1065  000126  C0B1  FFD9         	movff	_EP2_OUT,fsr2l
  1066  00012A  C0B2  FFDA         	movff	_EP2_OUT+1,fsr2h
  1067  00012E  0100               	movlb	0	; () banked
  1068  000130  BEDF               	btfsc	indf2,7,c
  1069  000132  D067               	goto	l365
  1070                           
  1071                           ; BSR set to: 0
  1072                           ;transceiver.c: 1364: {
  1073                           ;transceiver.c: 1369: uint8_t i;
  1074                           ;transceiver.c: 1370: transmit_mode();
  1075  000134  EC0B  F009         	call	_transmit_mode	;wreg free
  1076                           
  1077                           ;transceiver.c: 1371: for(i = 0; i < *(EP2_OUT + 1); i++)
  1078  000138  0E00               	movlw	0
  1079  00013A  0100               	movlb	0	; () banked
  1080  00013C  6FA8               	movwf	main@i& (0+255),b
  1081  00013E  D00E               	goto	l352
  1082  000140                     
  1083                           ; BSR set to: 0
  1084                           ;transceiver.c: 1374: {
  1085                           ;transceiver.c: 1375: ;
  1086                           
  1087                           ; BSR set to: 0
  1088                           ;transceiver.c: 1372: {
  1089                           ;transceiver.c: 1373: while(!PIR1bits.TXIF)
  1090  000140  A89E               	btfss	3998,4,c	;volatile
  1091  000142  D7FE               	goto	l353
  1092                           
  1093                           ;transceiver.c: 1376: }
  1094                           ;transceiver.c: 1378: TXREG = data_out_packet[i];
  1095  000144  0100               	movlb	0	; () banked
  1096  000146  51A8               	movf	main@i& (0+255),w,b
  1097  000148  0D01               	mullw	1
  1098  00014A  50F3               	movf	prodl,w,c
  1099  00014C  25AB               	addwf	_data_out_packet& (0+255),w,b
  1100  00014E  6ED9               	movwf	fsr2l,c
  1101  000150  50F4               	movf	prodh,w,c
  1102  000152  21AC               	addwfc	(_data_out_packet+1)& (0+255),w,b
  1103  000154  6EDA               	movwf	fsr2h,c
  1104  000156  50DF               	movf	indf2,w,c
  1105  000158  6EAD               	movwf	4013,c	;volatile
  1106                           
  1107                           ; BSR set to: 0
  1108  00015A  2BA8               	incf	main@i& (0+255),f,b
  1109  00015C                     l352:
  1110                           
  1111                           ; BSR set to: 0
  1112                           
  1113                           ; BSR set to: 0
  1114  00015C  EE20 F001          	lfsr	2,1
  1115  000160  51B1               	movf	_EP2_OUT& (0+255),w,b
  1116  000162  26D9               	addwf	fsr2l,f,c
  1117  000164  51B2               	movf	(_EP2_OUT+1)& (0+255),w,b
  1118  000166  22DA               	addwfc	fsr2h,f,c
  1119  000168  50DE               	movf	postinc2,w,c
  1120  00016A  5DA8               	subwf	main@i& (0+255),w,b
  1121  00016C  A0D8               	btfss	status,0,c
  1122  00016E  D7E8               	goto	l353
  1123  000170                     u2080:
  1124                           
  1125                           ; BSR set to: 0
  1126                           ;transceiver.c: 1382: {
  1127                           
  1128                           ; BSR set to: 0
  1129                           ;transceiver.c: 1379: }
  1130                           ;transceiver.c: 1381: while(!PIR1bits.TXIF)
  1131  000170  A89E               	btfss	3998,4,c	;volatile
  1132  000172  D7FE               	goto	u2080
  1133  000174                     u2090:
  1134                           
  1135                           ;transceiver.c: 1386: {
  1136                           
  1137                           ;transceiver.c: 1383: }
  1138                           ;transceiver.c: 1385: while(!TXSTAbits.TRMT)
  1139  000174  A2AC               	btfss	4012,1,c	;volatile
  1140  000176  D7FE               	goto	u2090
  1141                           
  1142                           ;transceiver.c: 1387: }
  1143                           ;transceiver.c: 1388: receive_mode();
  1144  000178  EC56  F009         	call	_receive_mode	;wreg free
  1145                           
  1146                           ;transceiver.c: 1398: if(*(EP2_OUT) & (1 << 6))
  1147  00017C  C0B1  FFD9         	movff	_EP2_OUT,fsr2l
  1148  000180  C0B2  FFDA         	movff	_EP2_OUT+1,fsr2h
  1149  000184  0100               	movlb	0	; () banked
  1150  000186  ACDF               	btfss	indf2,6,c
  1151  000188  D01E               	goto	l364
  1152                           
  1153                           ; BSR set to: 0
  1154                           ;transceiver.c: 1399: {
  1155                           ;transceiver.c: 1400: *(EP2_OUT + 1) = (0x40); *(EP2_OUT + 2) = ((uint16_t)(data_out_pac
      +                          ket) & 0xff); *(EP2_OUT + 3) = ((uint16_t)(data_out_packet) >> 8); *(EP2_OUT) = (0x80 | 
      +                          0x00 | 0x08);
  1156  00018A  EE20 F001          	lfsr	2,1
  1157  00018E  51B1               	movf	_EP2_OUT& (0+255),w,b
  1158  000190  26D9               	addwf	fsr2l,f,c
  1159  000192  51B2               	movf	(_EP2_OUT+1)& (0+255),w,b
  1160  000194  22DA               	addwfc	fsr2h,f,c
  1161  000196  0E40               	movlw	64
  1162  000198  6EDF               	movwf	indf2,c
  1163  00019A  EE20 F002          	lfsr	2,2
  1164  00019E  51B1               	movf	_EP2_OUT& (0+255),w,b
  1165  0001A0  26D9               	addwf	fsr2l,f,c
  1166  0001A2  51B2               	movf	(_EP2_OUT+1)& (0+255),w,b
  1167  0001A4  22DA               	addwfc	fsr2h,f,c
  1168  0001A6  C0AB  FFDF         	movff	_data_out_packet,indf2
  1169  0001AA  EE20 F003          	lfsr	2,3
  1170  0001AE  51B1               	movf	_EP2_OUT& (0+255),w,b
  1171  0001B0  26D9               	addwf	fsr2l,f,c
  1172  0001B2  51B2               	movf	(_EP2_OUT+1)& (0+255),w,b
  1173  0001B4  22DA               	addwfc	fsr2h,f,c
  1174  0001B6  51AC               	movf	(_data_out_packet+1)& (0+255),w,b
  1175  0001B8  6EDF               	movwf	indf2,c
  1176                           
  1177                           ; BSR set to: 0
  1178  0001BA  C0B1  FFD9         	movff	_EP2_OUT,fsr2l
  1179  0001BE  C0B2  FFDA         	movff	_EP2_OUT+1,fsr2h
  1180  0001C2  0E88               	movlw	136
  1181  0001C4  D01D               	goto	L2
  1182  0001C6                     l364:
  1183                           
  1184                           ; BSR set to: 0
  1185                           ;transceiver.c: 1402: else
  1186                           ;transceiver.c: 1403: {
  1187                           ;transceiver.c: 1404: *(EP2_OUT + 1) = (0x40); *(EP2_OUT + 2) = ((uint16_t)(data_out_pac
      +                          ket) & 0xff); *(EP2_OUT + 3) = ((uint16_t)(data_out_packet) >> 8); *(EP2_OUT) = (0x80 | 
      +                          0x40 | 0x08);
  1188                           
  1189                           ; BSR set to: 0
  1190  0001C6  EE20 F001          	lfsr	2,1
  1191  0001CA  51B1               	movf	_EP2_OUT& (0+255),w,b
  1192  0001CC  26D9               	addwf	fsr2l,f,c
  1193  0001CE  51B2               	movf	(_EP2_OUT+1)& (0+255),w,b
  1194  0001D0  22DA               	addwfc	fsr2h,f,c
  1195  0001D2  0E40               	movlw	64
  1196  0001D4  6EDF               	movwf	indf2,c
  1197  0001D6  EE20 F002          	lfsr	2,2
  1198  0001DA  51B1               	movf	_EP2_OUT& (0+255),w,b
  1199  0001DC  26D9               	addwf	fsr2l,f,c
  1200  0001DE  51B2               	movf	(_EP2_OUT+1)& (0+255),w,b
  1201  0001E0  22DA               	addwfc	fsr2h,f,c
  1202  0001E2  C0AB  FFDF         	movff	_data_out_packet,indf2
  1203  0001E6  EE20 F003          	lfsr	2,3
  1204  0001EA  51B1               	movf	_EP2_OUT& (0+255),w,b
  1205  0001EC  26D9               	addwf	fsr2l,f,c
  1206  0001EE  51B2               	movf	(_EP2_OUT+1)& (0+255),w,b
  1207  0001F0  22DA               	addwfc	fsr2h,f,c
  1208  0001F2  51AC               	movf	(_data_out_packet+1)& (0+255),w,b
  1209  0001F4  6EDF               	movwf	indf2,c
  1210                           
  1211                           ; BSR set to: 0
  1212  0001F6  C0B1  FFD9         	movff	_EP2_OUT,fsr2l
  1213  0001FA  C0B2  FFDA         	movff	_EP2_OUT+1,fsr2h
  1214  0001FE  0EC8               	movlw	200
  1215  000200                     L2:
  1216  000200  6EDF               	movwf	indf2,c
  1217  000202                     l365:
  1218                           
  1219                           ; BSR set to: 0
  1220                           ;transceiver.c: 1405: }
  1221                           ;transceiver.c: 1406: }
  1222                           ;transceiver.c: 1409: if(serial_in_count > 0)
  1223                           
  1224                           ; BSR set to: 0
  1225                           
  1226                           ; BSR set to: 0
  1227  000202  503D               	movf	_serial_in_count,w,c
  1228  000204  103E               	iorwf	_serial_in_count+1,w,c
  1229  000206  B4D8               	btfsc	status,2,c
  1230  000208  D78B               	goto	l350
  1231                           
  1232                           ; BSR set to: 0
  1233                           ;transceiver.c: 1410: {
  1234                           ;transceiver.c: 1412: if(!(*(EP2_IN) & (1 << 7)))
  1235  00020A  C0AF  FFD9         	movff	_EP2_IN,fsr2l
  1236  00020E  C0B0  FFDA         	movff	_EP2_IN+1,fsr2h
  1237  000212  BEDF               	btfsc	indf2,7,c
  1238  000214  D785               	goto	l350
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;transceiver.c: 1413: {
  1242                           ;transceiver.c: 1415: PIE1bits.RCIE = 0;
  1243  000216  9A9D               	bcf	3997,5,c	;volatile
  1244                           
  1245                           ; BSR set to: 0
  1246                           ;transceiver.c: 1416: uint8_t i = 0;
  1247  000218  0E00               	movlw	0
  1248  00021A  6FA9               	movwf	main@i_919& (0+255),b
  1249                           
  1250                           ; BSR set to: 0
  1251                           ;transceiver.c: 1417: uint8_t fragment = serial_in_count;
  1252  00021C  C03D  F0AA         	movff	_serial_in_count,main@fragment
  1253                           
  1254                           ; BSR set to: 0
  1255                           ;transceiver.c: 1422: if(fragment > 0x40)
  1256  000220  0E40               	movlw	64
  1257  000222  65AA               	cpfsgt	main@fragment& (0+255),b
  1258  000224  D002               	goto	l368
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;transceiver.c: 1423: {
  1262                           ;transceiver.c: 1424: fragment = 0x40;
  1263  000226  0E40               	movlw	64
  1264  000228  6FAA               	movwf	main@fragment& (0+255),b
  1265  00022A                     l368:
  1266                           
  1267                           ; BSR set to: 0
  1268                           ;transceiver.c: 1425: }
  1269                           ;transceiver.c: 1426: for(i = 0; i < fragment; i++)
  1270  00022A  0E00               	movlw	0
  1271  00022C  6FA9               	movwf	main@i_919& (0+255),b
  1272  00022E  D01D               	goto	l369
  1273  000230                     
  1274                           ; BSR set to: 0
  1275                           ;transceiver.c: 1427: {
  1276                           ;transceiver.c: 1428: data_in_packet[i] = serial_in_buffer[serial_in_ptr2++];
  1277                           
  1278                           ; BSR set to: 0
  1279  000230  0E60               	movlw	low _serial_in_buffer
  1280  000232  2584               	addwf	_serial_in_ptr2& (0+255),w,b
  1281  000234  6ED9               	movwf	fsr2l,c
  1282  000236  0E00               	movlw	high _serial_in_buffer
  1283  000238  2185               	addwfc	(_serial_in_ptr2+1)& (0+255),w,b
  1284  00023A  6EDA               	movwf	fsr2h,c
  1285  00023C  51A9               	movf	main@i_919& (0+255),w,b
  1286  00023E  0D01               	mullw	1
  1287  000240  50F3               	movf	prodl,w,c
  1288  000242  25AD               	addwf	_data_in_packet& (0+255),w,b
  1289  000244  6EE1               	movwf	fsr1l,c
  1290  000246  50F4               	movf	prodh,w,c
  1291  000248  21AE               	addwfc	(_data_in_packet+1)& (0+255),w,b
  1292  00024A  6EE2               	movwf	fsr1h,c
  1293  00024C  CFDF FFE7          	movff	indf2,indf1
  1294                           
  1295                           ; BSR set to: 0
  1296  000250  4B84               	infsnz	_serial_in_ptr2& (0+255),f,b
  1297  000252  2B85               	incf	(_serial_in_ptr2+1)& (0+255),f,b
  1298                           
  1299                           ; BSR set to: 0
  1300                           ;transceiver.c: 1429: if(serial_in_ptr2 >= 32)
  1301  000254  5185               	movf	(_serial_in_ptr2+1)& (0+255),w,b
  1302  000256  E104               	bnz	u2150
  1303  000258  0E20               	movlw	32
  1304  00025A  5D84               	subwf	_serial_in_ptr2& (0+255),w,b
  1305  00025C  A0D8               	btfss	status,0,c
  1306  00025E  D004               	goto	l371
  1307  000260                     u2150:
  1308                           
  1309                           ; BSR set to: 0
  1310                           ;transceiver.c: 1430: {
  1311                           ;transceiver.c: 1431: serial_in_ptr2 = 0;
  1312  000260  0E00               	movlw	0
  1313  000262  6F85               	movwf	(_serial_in_ptr2+1)& (0+255),b
  1314  000264  0E00               	movlw	0
  1315  000266  6F84               	movwf	_serial_in_ptr2& (0+255),b
  1316  000268                     l371:
  1317                           
  1318                           ; BSR set to: 0
  1319                           
  1320                           ; BSR set to: 0
  1321  000268  2BA9               	incf	main@i_919& (0+255),f,b
  1322  00026A                     l369:
  1323                           
  1324                           ; BSR set to: 0
  1325                           
  1326                           ; BSR set to: 0
  1327  00026A  51AA               	movf	main@fragment& (0+255),w,b
  1328  00026C  5DA9               	subwf	main@i_919& (0+255),w,b
  1329  00026E  A0D8               	btfss	status,0,c
  1330  000270  D7DF               	goto	l370
  1331                           
  1332                           ; BSR set to: 0
  1333                           ;transceiver.c: 1432: }
  1334                           ;transceiver.c: 1433: }
  1335                           ;transceiver.c: 1434: serial_in_count -= fragment;
  1336                           
  1337                           ; BSR set to: 0
  1338  000272  51AA               	movf	main@fragment& (0+255),w,b
  1339  000274  5E3D               	subwf	_serial_in_count,f,c
  1340  000276  0E00               	movlw	0
  1341  000278  5A3E               	subwfb	_serial_in_count+1,f,c
  1342                           
  1343                           ; BSR set to: 0
  1344                           ;transceiver.c: 1436: PIE1bits.RCIE = 1;
  1345  00027A  8A9D               	bsf	3997,5,c	;volatile
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;transceiver.c: 1438: if(*(EP2_IN) & (1 << 6))
  1349  00027C  C0AF  FFD9         	movff	_EP2_IN,fsr2l
  1350  000280  C0B0  FFDA         	movff	_EP2_IN+1,fsr2h
  1351  000284  ACDF               	btfss	indf2,6,c
  1352  000286  D01E               	goto	l373
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;transceiver.c: 1439: {
  1356                           ;transceiver.c: 1440: *(EP2_IN + 1) = (fragment); *(EP2_IN + 2) = ((uint16_t)(data_in_pa
      +                          cket) & 0xff); *(EP2_IN + 3) = ((uint16_t)(data_in_packet) >> 8); *(EP2_IN) = (0x80 | 0x
      +                          00 | 0x08);
  1357  000288  EE20 F001          	lfsr	2,1
  1358  00028C  51AF               	movf	_EP2_IN& (0+255),w,b
  1359  00028E  26D9               	addwf	fsr2l,f,c
  1360  000290  51B0               	movf	(_EP2_IN+1)& (0+255),w,b
  1361  000292  22DA               	addwfc	fsr2h,f,c
  1362  000294  C0AA  FFDF         	movff	main@fragment,indf2
  1363  000298  EE20 F002          	lfsr	2,2
  1364  00029C  51AF               	movf	_EP2_IN& (0+255),w,b
  1365  00029E  26D9               	addwf	fsr2l,f,c
  1366  0002A0  51B0               	movf	(_EP2_IN+1)& (0+255),w,b
  1367  0002A2  22DA               	addwfc	fsr2h,f,c
  1368  0002A4  C0AD  FFDF         	movff	_data_in_packet,indf2
  1369  0002A8  EE20 F003          	lfsr	2,3
  1370  0002AC  51AF               	movf	_EP2_IN& (0+255),w,b
  1371  0002AE  26D9               	addwf	fsr2l,f,c
  1372  0002B0  51B0               	movf	(_EP2_IN+1)& (0+255),w,b
  1373  0002B2  22DA               	addwfc	fsr2h,f,c
  1374  0002B4  51AE               	movf	(_data_in_packet+1)& (0+255),w,b
  1375  0002B6  6EDF               	movwf	indf2,c
  1376                           
  1377                           ; BSR set to: 0
  1378  0002B8  C0AF  FFD9         	movff	_EP2_IN,fsr2l
  1379  0002BC  C0B0  FFDA         	movff	_EP2_IN+1,fsr2h
  1380  0002C0  0E88               	movlw	136
  1381  0002C2  D01D               	goto	L1
  1382  0002C4                     l373:
  1383                           
  1384                           ; BSR set to: 0
  1385                           ;transceiver.c: 1442: else
  1386                           ;transceiver.c: 1443: {
  1387                           ;transceiver.c: 1444: *(EP2_IN + 1) = (fragment); *(EP2_IN + 2) = ((uint16_t)(data_in_pa
      +                          cket) & 0xff); *(EP2_IN + 3) = ((uint16_t)(data_in_packet) >> 8); *(EP2_IN) = (0x80 | 0x
      +                          40 | 0x08);
  1388                           
  1389                           ; BSR set to: 0
  1390  0002C4  EE20 F001          	lfsr	2,1
  1391  0002C8  51AF               	movf	_EP2_IN& (0+255),w,b
  1392  0002CA  26D9               	addwf	fsr2l,f,c
  1393  0002CC  51B0               	movf	(_EP2_IN+1)& (0+255),w,b
  1394  0002CE  22DA               	addwfc	fsr2h,f,c
  1395  0002D0  C0AA  FFDF         	movff	main@fragment,indf2
  1396  0002D4  EE20 F002          	lfsr	2,2
  1397  0002D8  51AF               	movf	_EP2_IN& (0+255),w,b
  1398  0002DA  26D9               	addwf	fsr2l,f,c
  1399  0002DC  51B0               	movf	(_EP2_IN+1)& (0+255),w,b
  1400  0002DE  22DA               	addwfc	fsr2h,f,c
  1401  0002E0  C0AD  FFDF         	movff	_data_in_packet,indf2
  1402  0002E4  EE20 F003          	lfsr	2,3
  1403  0002E8  51AF               	movf	_EP2_IN& (0+255),w,b
  1404  0002EA  26D9               	addwf	fsr2l,f,c
  1405  0002EC  51B0               	movf	(_EP2_IN+1)& (0+255),w,b
  1406  0002EE  22DA               	addwfc	fsr2h,f,c
  1407  0002F0  51AE               	movf	(_data_in_packet+1)& (0+255),w,b
  1408  0002F2  6EDF               	movwf	indf2,c
  1409                           
  1410                           ; BSR set to: 0
  1411  0002F4  C0AF  FFD9         	movff	_EP2_IN,fsr2l
  1412  0002F8  C0B0  FFDA         	movff	_EP2_IN+1,fsr2h
  1413  0002FC  0EC8               	movlw	200
  1414  0002FE                     L1:
  1415  0002FE  6EDF               	movwf	indf2,c
  1416                           
  1417                           ; BSR set to: 0
  1418                           
  1419                           ; BSR set to: 0
  1420                           
  1421                           ; BSR set to: 0
  1422                           
  1423                           ; BSR set to: 0
  1424  000300  D70F               	goto	l350
  1425  000302                     __end_of_main:
  1426                           	opt stack 0
  1427                           tblptru	equ	0xFF8
  1428                           tblptrh	equ	0xFF7
  1429                           tblptrl	equ	0xFF6
  1430                           tablat	equ	0xFF5
  1431                           prodh	equ	0xFF4
  1432                           prodl	equ	0xFF3
  1433                           intcon	equ	0xFF2
  1434                           postinc0	equ	0xFEE
  1435                           wreg	equ	0xFE8
  1436                           indf1	equ	0xFE7
  1437                           postdec1	equ	0xFE5
  1438                           fsr1h	equ	0xFE2
  1439                           fsr1l	equ	0xFE1
  1440                           indf2	equ	0xFDF
  1441                           postinc2	equ	0xFDE
  1442                           fsr2h	equ	0xFDA
  1443                           fsr2l	equ	0xFD9
  1444                           status	equ	0xFD8
  1445                           
  1446 ;; *************** function _transmit_mode *****************
  1447 ;; Defined at:
  1448 ;;		line 1283 in file "transceiver.c"
  1449 ;; Parameters:    Size  Location     Type
  1450 ;;		None
  1451 ;; Auto vars:     Size  Location     Type
  1452 ;;		None
  1453 ;; Return value:  Size  Location     Type
  1454 ;;                  1    wreg      void 
  1455 ;; Registers used:
  1456 ;;		wreg, status,2, status,0, cstack
  1457 ;; Tracked objects:
  1458 ;;		On entry : 0/0
  1459 ;;		On exit  : 0/0
  1460 ;;		Unchanged: 0/0
  1461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1462 ;;      Params:         0       0       0       0
  1463 ;;      Locals:         0       0       0       0
  1464 ;;      Temps:          0       0       0       0
  1465 ;;      Totals:         0       0       0       0
  1466 ;;Total ram usage:        0 bytes
  1467 ;; Hardware stack levels used:    1
  1468 ;; Hardware stack levels required when called:   10
  1469 ;; This function calls:
  1470 ;;		_write_radio
  1471 ;; This function is called by:
  1472 ;;		_main
  1473 ;; This function uses a non-reentrant model
  1474 ;;
  1475                           
  1476                           	psect	text1
  1477  001216                     __ptext1:
  1478                           	opt stack 0
  1479  001216                     _transmit_mode:
  1480                           	opt stack 20
  1481                           
  1482                           ;transceiver.c: 1286: RCSTAbits.SREN = 0;
  1483                           
  1484                           ; BSR set to: 0
  1485                           ;incstack = 0
  1486  001216  9AAB               	bcf	4011,5,c	;volatile
  1487                           
  1488                           ;transceiver.c: 1287: TXSTAbits.TXEN = 1;
  1489  001218  8AAC               	bsf	4012,5,c	;volatile
  1490                           
  1491                           ;transceiver.c: 1289: write_radio(0x8201 | 0x0020);
  1492  00121A  0E82               	movlw	130
  1493  00121C  0100               	movlb	0	; () banked
  1494  00121E  6F9E               	movwf	(write_radio@data+1)& (0+255),b
  1495  001220  0E21               	movlw	33
  1496  001222  6F9D               	movwf	write_radio@data& (0+255),b
  1497  001224  EC58  F008         	call	_write_radio	;wreg free
  1498                           
  1499                           ;transceiver.c: 1292: tick = 0;
  1500  001228  0E00               	movlw	0
  1501  00122A  0100               	movlb	0	; () banked
  1502  00122C  6F87               	movwf	(_tick+1)& (0+255),b
  1503  00122E  0E00               	movlw	0
  1504  001230  6F86               	movwf	_tick& (0+255),b
  1505  001232                     
  1506                           ; BSR set to: 0
  1507                           
  1508                           ; BSR set to: 0
  1509                           
  1510                           ;transceiver.c: 1294: {
  1511                           ;transceiver.c: 1295: ;
  1512                           
  1513                           ; BSR set to: 0
  1514  001232  5187               	movf	(_tick+1)& (0+255),w,b
  1515  001234  E105               	bnz	l342
  1516  001236  0E0A               	movlw	10
  1517  001238  5D86               	subwf	_tick& (0+255),w,b
  1518  00123A  B0D8               	btfsc	status,0,c
  1519  00123C  0012               	return	
  1520  00123E  D7F9               	goto	l340
  1521  001240                     l342:
  1522                           
  1523                           ; BSR set to: 0
  1524  001240  0012               	return		;funcret
  1525  001242                     __end_of_transmit_mode:
  1526                           	opt stack 0
  1527                           tblptru	equ	0xFF8
  1528                           tblptrh	equ	0xFF7
  1529                           tblptrl	equ	0xFF6
  1530                           tablat	equ	0xFF5
  1531                           prodh	equ	0xFF4
  1532                           prodl	equ	0xFF3
  1533                           intcon	equ	0xFF2
  1534                           postinc0	equ	0xFEE
  1535                           wreg	equ	0xFE8
  1536                           indf1	equ	0xFE7
  1537                           postdec1	equ	0xFE5
  1538                           fsr1h	equ	0xFE2
  1539                           fsr1l	equ	0xFE1
  1540                           indf2	equ	0xFDF
  1541                           postinc2	equ	0xFDE
  1542                           fsr2h	equ	0xFDA
  1543                           fsr2l	equ	0xFD9
  1544                           status	equ	0xFD8
  1545                           
  1546 ;; *************** function _receive_mode *****************
  1547 ;; Defined at:
  1548 ;;		line 1300 in file "transceiver.c"
  1549 ;; Parameters:    Size  Location     Type
  1550 ;;		None
  1551 ;; Auto vars:     Size  Location     Type
  1552 ;;		None
  1553 ;; Return value:  Size  Location     Type
  1554 ;;                  1    wreg      void 
  1555 ;; Registers used:
  1556 ;;		wreg, status,2, status,0, cstack
  1557 ;; Tracked objects:
  1558 ;;		On entry : 0/0
  1559 ;;		On exit  : 0/0
  1560 ;;		Unchanged: 0/0
  1561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1562 ;;      Params:         0       0       0       0
  1563 ;;      Locals:         0       0       0       0
  1564 ;;      Temps:          0       0       0       0
  1565 ;;      Totals:         0       0       0       0
  1566 ;;Total ram usage:        0 bytes
  1567 ;; Hardware stack levels used:    1
  1568 ;; Hardware stack levels required when called:   10
  1569 ;; This function calls:
  1570 ;;		_write_radio
  1571 ;; This function is called by:
  1572 ;;		_main
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           	psect	text2
  1577  0012AC                     __ptext2:
  1578                           	opt stack 0
  1579  0012AC                     _receive_mode:
  1580                           	opt stack 20
  1581                           
  1582                           ;transceiver.c: 1303: TXSTAbits.TXEN = 0;
  1583                           
  1584                           ; BSR set to: 0
  1585                           ;incstack = 0
  1586  0012AC  9AAC               	bcf	4012,5,c	;volatile
  1587                           
  1588                           ;transceiver.c: 1304: RCSTAbits.SREN = 1;
  1589  0012AE  8AAB               	bsf	4011,5,c	;volatile
  1590                           
  1591                           ;transceiver.c: 1305: write_radio(0x8201 | 0x0080);
  1592  0012B0  0E82               	movlw	130
  1593  0012B2  0100               	movlb	0	; () banked
  1594  0012B4  6F9E               	movwf	(write_radio@data+1)& (0+255),b
  1595  0012B6  0E81               	movlw	129
  1596  0012B8  6F9D               	movwf	write_radio@data& (0+255),b
  1597  0012BA  EC58  F008         	call	_write_radio	;wreg free
  1598  0012BE  0012               	return		;funcret
  1599  0012C0                     __end_of_receive_mode:
  1600                           	opt stack 0
  1601                           tblptru	equ	0xFF8
  1602                           tblptrh	equ	0xFF7
  1603                           tblptrl	equ	0xFF6
  1604                           tablat	equ	0xFF5
  1605                           prodh	equ	0xFF4
  1606                           prodl	equ	0xFF3
  1607                           intcon	equ	0xFF2
  1608                           postinc0	equ	0xFEE
  1609                           wreg	equ	0xFE8
  1610                           indf1	equ	0xFE7
  1611                           postdec1	equ	0xFE5
  1612                           fsr1h	equ	0xFE2
  1613                           fsr1l	equ	0xFE1
  1614                           indf2	equ	0xFDF
  1615                           postinc2	equ	0xFDE
  1616                           fsr2h	equ	0xFDA
  1617                           fsr2l	equ	0xFD9
  1618                           status	equ	0xFD8
  1619                           
  1620 ;; *************** function _radio_on *****************
  1621 ;; Defined at:
  1622 ;;		line 1254 in file "transceiver.c"
  1623 ;; Parameters:    Size  Location     Type
  1624 ;;		None
  1625 ;; Auto vars:     Size  Location     Type
  1626 ;;		None
  1627 ;; Return value:  Size  Location     Type
  1628 ;;                  1    wreg      void 
  1629 ;; Registers used:
  1630 ;;		wreg, status,2, status,0, cstack
  1631 ;; Tracked objects:
  1632 ;;		On entry : 0/0
  1633 ;;		On exit  : 0/0
  1634 ;;		Unchanged: 0/0
  1635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1636 ;;      Params:         0       0       0       0
  1637 ;;      Locals:         0       0       0       0
  1638 ;;      Temps:          0       0       0       0
  1639 ;;      Totals:         0       0       0       0
  1640 ;;Total ram usage:        0 bytes
  1641 ;; Hardware stack levels used:    1
  1642 ;; Hardware stack levels required when called:   10
  1643 ;; This function calls:
  1644 ;;		_write_radio
  1645 ;; This function is called by:
  1646 ;;		_main
  1647 ;; This function uses a non-reentrant model
  1648 ;;
  1649                           
  1650                           	psect	text3
  1651  000C66                     __ptext3:
  1652                           	opt stack 0
  1653  000C66                     _radio_on:
  1654                           	opt stack 20
  1655                           
  1656                           ;transceiver.c: 1257: LATCbits.LATC2 = 1;
  1657                           
  1658                           ;incstack = 0
  1659  000C66  848B               	bsf	3979,2,c	;volatile
  1660                           
  1661                           ;transceiver.c: 1258: TRISCbits.TRISC2 = 0;
  1662  000C68  9494               	bcf	3988,2,c	;volatile
  1663                           
  1664                           ;transceiver.c: 1260: LATCbits.LATC0 = 0;
  1665  000C6A  908B               	bcf	3979,0,c	;volatile
  1666                           
  1667                           ;transceiver.c: 1261: TRISCbits.TRISC0 = 0;
  1668  000C6C  9094               	bcf	3988,0,c	;volatile
  1669                           
  1670                           ;transceiver.c: 1263: LATCbits.LATC1 = 0;
  1671  000C6E  928B               	bcf	3979,1,c	;volatile
  1672                           
  1673                           ;transceiver.c: 1264: TRISCbits.TRISC1 = 0;
  1674  000C70  9294               	bcf	3988,1,c	;volatile
  1675                           
  1676                           ;transceiver.c: 1267: write_radio(0xCA81);
  1677  000C72  0ECA               	movlw	202
  1678  000C74  0100               	movlb	0	; () banked
  1679  000C76  6F9E               	movwf	(write_radio@data+1)& (0+255),b
  1680  000C78  0E81               	movlw	129
  1681  000C7A  6F9D               	movwf	write_radio@data& (0+255),b
  1682  000C7C  EC58  F008         	call	_write_radio	;wreg free
  1683                           
  1684                           ;transceiver.c: 1269: write_radio(0xCA81 | 0x0002);
  1685  000C80  0ECA               	movlw	202
  1686  000C82  0100               	movlb	0	; () banked
  1687  000C84  6F9E               	movwf	(write_radio@data+1)& (0+255),b
  1688  000C86  0E83               	movlw	131
  1689  000C88  6F9D               	movwf	write_radio@data& (0+255),b
  1690  000C8A  EC58  F008         	call	_write_radio	;wreg free
  1691                           
  1692                           ;transceiver.c: 1270: write_radio((0x8000 | 0x0003 | 0x0030));
  1693  000C8E  0E80               	movlw	128
  1694  000C90  0100               	movlb	0	; () banked
  1695  000C92  6F9E               	movwf	(write_radio@data+1)& (0+255),b
  1696  000C94  0E33               	movlw	51
  1697  000C96  6F9D               	movwf	write_radio@data& (0+255),b
  1698  000C98  EC58  F008         	call	_write_radio	;wreg free
  1699                           
  1700                           ;transceiver.c: 1271: write_radio(0xc4d7);
  1701  000C9C  0EC4               	movlw	196
  1702  000C9E  0100               	movlb	0	; () banked
  1703  000CA0  6F9E               	movwf	(write_radio@data+1)& (0+255),b
  1704  000CA2  0ED7               	movlw	215
  1705  000CA4  6F9D               	movwf	write_radio@data& (0+255),b
  1706  000CA6  EC58  F008         	call	_write_radio	;wreg free
  1707                           
  1708                           ;transceiver.c: 1272: write_radio((0xA000 | 3903));
  1709  000CAA  0EAF               	movlw	175
  1710  000CAC  0100               	movlb	0	; () banked
  1711  000CAE  6F9E               	movwf	(write_radio@data+1)& (0+255),b
  1712  000CB0  0E3F               	movlw	63
  1713  000CB2  6F9D               	movwf	write_radio@data& (0+255),b
  1714  000CB4  EC58  F008         	call	_write_radio	;wreg free
  1715                           
  1716                           ;transceiver.c: 1273: write_radio((0xC600 | 0 | 3));
  1717  000CB8  0EC6               	movlw	198
  1718  000CBA  0100               	movlb	0	; () banked
  1719  000CBC  6F9E               	movwf	(write_radio@data+1)& (0+255),b
  1720  000CBE  0E03               	movlw	3
  1721  000CC0  6F9D               	movwf	write_radio@data& (0+255),b
  1722  000CC2  EC58  F008         	call	_write_radio	;wreg free
  1723                           
  1724                           ;transceiver.c: 1274: write_radio(0x8201);
  1725  000CC6  0E82               	movlw	130
  1726  000CC8  0100               	movlb	0	; () banked
  1727  000CCA  6F9E               	movwf	(write_radio@data+1)& (0+255),b
  1728  000CCC  0E01               	movlw	1
  1729  000CCE  6F9D               	movwf	write_radio@data& (0+255),b
  1730  000CD0  EC58  F008         	call	_write_radio	;wreg free
  1731                           
  1732                           ;transceiver.c: 1275: write_radio(0x9420);
  1733  000CD4  0E94               	movlw	148
  1734  000CD6  0100               	movlb	0	; () banked
  1735  000CD8  6F9E               	movwf	(write_radio@data+1)& (0+255),b
  1736  000CDA  0E20               	movlw	32
  1737  000CDC  6F9D               	movwf	write_radio@data& (0+255),b
  1738  000CDE  EC58  F008         	call	_write_radio	;wreg free
  1739                           
  1740                           ;transceiver.c: 1276: write_radio(0x98f0);
  1741  000CE2  0E98               	movlw	152
  1742  000CE4  0100               	movlb	0	; () banked
  1743  000CE6  6F9E               	movwf	(write_radio@data+1)& (0+255),b
  1744  000CE8  0EF0               	movlw	240
  1745  000CEA  6F9D               	movwf	write_radio@data& (0+255),b
  1746  000CEC  EC58  F008         	call	_write_radio	;wreg free
  1747                           
  1748                           ;transceiver.c: 1277: write_radio(0xc23c);
  1749  000CF0  0EC2               	movlw	194
  1750  000CF2  0100               	movlb	0	; () banked
  1751  000CF4  6F9E               	movwf	(write_radio@data+1)& (0+255),b
  1752  000CF6  0E3C               	movlw	60
  1753  000CF8  6F9D               	movwf	write_radio@data& (0+255),b
  1754  000CFA  EC58  F008         	call	_write_radio	;wreg free
  1755                           
  1756                           ;transceiver.c: 1280: write_radio(0x8201 | 0x0080);
  1757  000CFE  0E82               	movlw	130
  1758  000D00  0100               	movlb	0	; () banked
  1759  000D02  6F9E               	movwf	(write_radio@data+1)& (0+255),b
  1760  000D04  0E81               	movlw	129
  1761  000D06  6F9D               	movwf	write_radio@data& (0+255),b
  1762  000D08  EC58  F008         	call	_write_radio	;wreg free
  1763  000D0C  0012               	return		;funcret
  1764  000D0E                     __end_of_radio_on:
  1765                           	opt stack 0
  1766                           tblptru	equ	0xFF8
  1767                           tblptrh	equ	0xFF7
  1768                           tblptrl	equ	0xFF6
  1769                           tablat	equ	0xFF5
  1770                           prodh	equ	0xFF4
  1771                           prodl	equ	0xFF3
  1772                           intcon	equ	0xFF2
  1773                           postinc0	equ	0xFEE
  1774                           wreg	equ	0xFE8
  1775                           indf1	equ	0xFE7
  1776                           postdec1	equ	0xFE5
  1777                           fsr1h	equ	0xFE2
  1778                           fsr1l	equ	0xFE1
  1779                           indf2	equ	0xFDF
  1780                           postinc2	equ	0xFDE
  1781                           fsr2h	equ	0xFDA
  1782                           fsr2l	equ	0xFD9
  1783                           status	equ	0xFD8
  1784                           
  1785 ;; *************** function _write_radio *****************
  1786 ;; Defined at:
  1787 ;;		line 1240 in file "transceiver.c"
  1788 ;; Parameters:    Size  Location     Type
  1789 ;;  data            2   21[BANK0 ] unsigned int 
  1790 ;; Auto vars:     Size  Location     Type
  1791 ;;  i               1   24[BANK0 ] unsigned char 
  1792 ;; Return value:  Size  Location     Type
  1793 ;;                  1    wreg      void 
  1794 ;; Registers used:
  1795 ;;		wreg, status,2, status,0
  1796 ;; Tracked objects:
  1797 ;;		On entry : 0/0
  1798 ;;		On exit  : 0/0
  1799 ;;		Unchanged: 0/0
  1800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1801 ;;      Params:         0       2       0       0
  1802 ;;      Locals:         0       1       0       0
  1803 ;;      Temps:          0       1       0       0
  1804 ;;      Totals:         0       4       0       0
  1805 ;;Total ram usage:        4 bytes
  1806 ;; Hardware stack levels used:    1
  1807 ;; Hardware stack levels required when called:    9
  1808 ;; This function calls:
  1809 ;;		Nothing
  1810 ;; This function is called by:
  1811 ;;		_radio_on
  1812 ;;		_transmit_mode
  1813 ;;		_receive_mode
  1814 ;; This function uses a non-reentrant model
  1815 ;;
  1816                           
  1817                           	psect	text4
  1818  0010B0                     __ptext4:
  1819                           	opt stack 0
  1820  0010B0                     _write_radio:
  1821                           	opt stack 20
  1822                           
  1823                           ;transceiver.c: 1242: LATCbits.LATC2 = 0;
  1824                           
  1825                           ;incstack = 0
  1826  0010B0  948B               	bcf	3979,2,c	;volatile
  1827                           
  1828                           ;transceiver.c: 1243: uint8_t i;
  1829                           ;transceiver.c: 1244: for(i = 0; i < 16; i++)
  1830  0010B2  0E00               	movlw	0
  1831  0010B4  0100               	movlb	0	; () banked
  1832  0010B6  6FA0               	movwf	write_radio@i& (0+255),b
  1833  0010B8                     l2466:
  1834                           
  1835                           ; BSR set to: 0
  1836  0010B8  0E0F               	movlw	15
  1837  0010BA  65A0               	cpfsgt	write_radio@i& (0+255),b
  1838  0010BC  D001               	goto	l331
  1839  0010BE  D013               	goto	u1830
  1840  0010C0                     l331:
  1841                           
  1842                           ; BSR set to: 0
  1843                           ;transceiver.c: 1245: {
  1844                           ;transceiver.c: 1246: LATCbits.LATC0 = (uint8_t)((data & 0x8000) ? 1 : 0);
  1845                           
  1846                           ; BSR set to: 0
  1847  0010C0  AF9E               	btfss	(write_radio@data+1)& (0+255),7,b
  1848  0010C2  D003               	goto	u1810
  1849  0010C4  6B9F               	clrf	??_write_radio& (0+255),b
  1850  0010C6  2B9F               	incf	??_write_radio& (0+255),f,b
  1851  0010C8  D002               	goto	u1828
  1852  0010CA                     u1810:
  1853  0010CA  0100               	movlb	0	; () banked
  1854  0010CC  6B9F               	clrf	??_write_radio& (0+255),b
  1855  0010CE                     u1828:
  1856  0010CE  508B               	movf	3979,w,c	;volatile
  1857  0010D0  199F               	xorwf	??_write_radio& (0+255),w,b
  1858  0010D2  0BFE               	andlw	-2
  1859  0010D4  199F               	xorwf	??_write_radio& (0+255),w,b
  1860  0010D6  6E8B               	movwf	3979,c	;volatile
  1861                           
  1862                           ; BSR set to: 0
  1863                           ;transceiver.c: 1247: data <<= 1;
  1864  0010D8  90D8               	bcf	status,0,c
  1865  0010DA  379D               	rlcf	write_radio@data& (0+255),f,b
  1866  0010DC  379E               	rlcf	(write_radio@data+1)& (0+255),f,b
  1867                           
  1868                           ; BSR set to: 0
  1869                           ;transceiver.c: 1248: LATCbits.LATC1 = 1;
  1870  0010DE  828B               	bsf	3979,1,c	;volatile
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;transceiver.c: 1249: LATCbits.LATC1 = 0;
  1874  0010E0  928B               	bcf	3979,1,c	;volatile
  1875                           
  1876                           ; BSR set to: 0
  1877  0010E2  2BA0               	incf	write_radio@i& (0+255),f,b
  1878  0010E4  D7E9               	goto	l2466
  1879  0010E6                     u1830:
  1880                           
  1881                           ; BSR set to: 0
  1882                           ;transceiver.c: 1250: }
  1883                           ;transceiver.c: 1251: LATCbits.LATC2 = 1;
  1884  0010E6  848B               	bsf	3979,2,c	;volatile
  1885                           
  1886                           ; BSR set to: 0
  1887  0010E8  0012               	return		;funcret
  1888  0010EA                     __end_of_write_radio:
  1889                           	opt stack 0
  1890                           tblptru	equ	0xFF8
  1891                           tblptrh	equ	0xFF7
  1892                           tblptrl	equ	0xFF6
  1893                           tablat	equ	0xFF5
  1894                           prodh	equ	0xFF4
  1895                           prodl	equ	0xFF3
  1896                           intcon	equ	0xFF2
  1897                           postinc0	equ	0xFEE
  1898                           wreg	equ	0xFE8
  1899                           indf1	equ	0xFE7
  1900                           postdec1	equ	0xFE5
  1901                           fsr1h	equ	0xFE2
  1902                           fsr1l	equ	0xFE1
  1903                           indf2	equ	0xFDF
  1904                           postinc2	equ	0xFDE
  1905                           fsr2h	equ	0xFDA
  1906                           fsr2l	equ	0xFD9
  1907                           status	equ	0xFD8
  1908                           
  1909 ;; *************** function _print_text *****************
  1910 ;; Defined at:
  1911 ;;		line 281 in file "transceiver.c"
  1912 ;; Parameters:    Size  Location     Type
  1913 ;;  s               2   22[BANK0 ] PTR const unsigned char 
  1914 ;;		 -> STR_8(28), STR_7(15), STR_6(2), STR_5(10), 
  1915 ;;		 -> STR_4(2), STR_3(17), STR_2(2), STR_1(26), 
  1916 ;; Auto vars:     Size  Location     Type
  1917 ;;		None
  1918 ;; Return value:  Size  Location     Type
  1919 ;;                  1    wreg      void 
  1920 ;; Registers used:
  1921 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1922 ;; Tracked objects:
  1923 ;;		On entry : 0/0
  1924 ;;		On exit  : 0/0
  1925 ;;		Unchanged: 0/0
  1926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1927 ;;      Params:         0       2       0       0
  1928 ;;      Locals:         0       0       0       0
  1929 ;;      Temps:          0       0       0       0
  1930 ;;      Totals:         0       2       0       0
  1931 ;;Total ram usage:        2 bytes
  1932 ;; Hardware stack levels used:    1
  1933 ;; Hardware stack levels required when called:   10
  1934 ;; This function calls:
  1935 ;;		_print_byte
  1936 ;; This function is called by:
  1937 ;;		_main
  1938 ;; This function uses a non-reentrant model
  1939 ;;
  1940                           
  1941                           	psect	text5
  1942  0011B8                     __ptext5:
  1943                           	opt stack 0
  1944  0011B8                     _print_text:
  1945                           	opt stack 20
  1946                           
  1947                           ;transceiver.c: 283: while(*s != 0)
  1948                           
  1949                           ; BSR set to: 0
  1950                           ;incstack = 0
  1951  0011B8  D00C               	goto	l128
  1952  0011BA                     
  1953                           ;transceiver.c: 284: {
  1954                           ;transceiver.c: 285: print_byte(*s);
  1955  0011BA  C09E  FFF6         	movff	print_text@s,tblptrl
  1956  0011BE  C09F  FFF7         	movff	print_text@s+1,tblptrh
  1957  0011C2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1958  0011C2  6AF8               	clrf	tblptru,c
  1959  0011C4                     	endif
  1960  0011C4                     	if	0	;tblptru may be non-zero
  1961  0011C4                     	endif
  1962  0011C4  0008               	tblrd		*
  1963  0011C6  50F5               	movf	tablat,w,c
  1964  0011C8  EC90  F008         	call	_print_byte
  1965                           
  1966                           ;transceiver.c: 286: s++;
  1967  0011CC  0100               	movlb	0	; () banked
  1968  0011CE  4B9E               	infsnz	print_text@s& (0+255),f,b
  1969  0011D0  2B9F               	incf	(print_text@s+1)& (0+255),f,b
  1970  0011D2                     l128:
  1971                           
  1972                           ; BSR set to: 0
  1973  0011D2  C09E  FFF6         	movff	print_text@s,tblptrl
  1974  0011D6  C09F  FFF7         	movff	print_text@s+1,tblptrh
  1975  0011DA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1976  0011DA  6AF8               	clrf	tblptru,c
  1977  0011DC                     	endif
  1978  0011DC                     	if	0	;tblptru may be non-zero
  1979  0011DC                     	endif
  1980  0011DC  0008               	tblrd		*
  1981  0011DE  50F5               	movf	tablat,w,c
  1982  0011E0  0900               	iorlw	0
  1983  0011E2  B4D8               	btfsc	status,2,c
  1984  0011E4  0012               	return	
  1985  0011E6  D7E9               	goto	l129
  1986  0011E8                     __end_of_print_text:
  1987                           	opt stack 0
  1988                           tblptru	equ	0xFF8
  1989                           tblptrh	equ	0xFF7
  1990                           tblptrl	equ	0xFF6
  1991                           tablat	equ	0xFF5
  1992                           prodh	equ	0xFF4
  1993                           prodl	equ	0xFF3
  1994                           intcon	equ	0xFF2
  1995                           postinc0	equ	0xFEE
  1996                           wreg	equ	0xFE8
  1997                           indf1	equ	0xFE7
  1998                           postdec1	equ	0xFE5
  1999                           fsr1h	equ	0xFE2
  2000                           fsr1l	equ	0xFE1
  2001                           indf2	equ	0xFDF
  2002                           postinc2	equ	0xFDE
  2003                           fsr2h	equ	0xFDA
  2004                           fsr2l	equ	0xFD9
  2005                           status	equ	0xFD8
  2006                           
  2007 ;; *************** function _print_byte *****************
  2008 ;; Defined at:
  2009 ;;		line 268 in file "transceiver.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;  c               1    wreg     unsigned char 
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;  c               1   21[BANK0 ] unsigned char 
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  1    wreg      void 
  2016 ;; Registers used:
  2017 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2018 ;; Tracked objects:
  2019 ;;		On entry : 0/0
  2020 ;;		On exit  : 0/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2023 ;;      Params:         0       0       0       0
  2024 ;;      Locals:         0       1       0       0
  2025 ;;      Temps:          0       0       0       0
  2026 ;;      Totals:         0       1       0       0
  2027 ;;Total ram usage:        1 bytes
  2028 ;; Hardware stack levels used:    1
  2029 ;; Hardware stack levels required when called:    9
  2030 ;; This function calls:
  2031 ;;		Nothing
  2032 ;; This function is called by:
  2033 ;;		_print_text
  2034 ;;		_main
  2035 ;;		_print_bin
  2036 ;; This function uses a non-reentrant model
  2037 ;;
  2038                           
  2039                           	psect	text6
  2040  001120                     __ptext6:
  2041                           	opt stack 0
  2042  001120                     _print_byte:
  2043                           	opt stack 20
  2044                           
  2045                           ;incstack = 0
  2046                           ;print_byte@c stored from wreg
  2047  001120  0100               	movlb	0	; () banked
  2048  001122  6F9D               	movwf	print_byte@c& (0+255),b
  2049                           
  2050                           ;transceiver.c: 270: if(serial_out_count < 256)
  2051  001124  0100               	movlb	0	; () banked
  2052  001126  0583               	decf	(_serial_out_count+1)& (0+255),w,b
  2053  001128  B0D8               	btfsc	status,0,c
  2054  00112A  0012               	return	
  2055                           
  2056                           ; BSR set to: 0
  2057                           ;transceiver.c: 271: {
  2058                           ;transceiver.c: 272: serial_out_buffer[serial_out_ptr++] = c;
  2059  00112C  0E00               	movlw	low _serial_out_buffer
  2060  00112E  2439               	addwf	_serial_out_ptr,w,c
  2061  001130  6ED9               	movwf	fsr2l,c
  2062  001132  0E01               	movlw	high _serial_out_buffer
  2063  001134  203A               	addwfc	_serial_out_ptr+1,w,c
  2064  001136  6EDA               	movwf	fsr2h,c
  2065  001138  C09D  FFDF         	movff	print_byte@c,indf2
  2066                           
  2067                           ; BSR set to: 0
  2068  00113C  4A39               	infsnz	_serial_out_ptr,f,c
  2069  00113E  2A3A               	incf	_serial_out_ptr+1,f,c
  2070                           
  2071                           ; BSR set to: 0
  2072                           ;transceiver.c: 273: serial_out_count++;
  2073  001140  4B82               	infsnz	_serial_out_count& (0+255),f,b
  2074  001142  2B83               	incf	(_serial_out_count+1)& (0+255),f,b
  2075                           
  2076                           ; BSR set to: 0
  2077                           ;transceiver.c: 274: if(serial_out_ptr >= 256)
  2078  001144  043A               	decf	_serial_out_ptr+1,w,c
  2079  001146  A0D8               	btfss	status,0,c
  2080  001148  0012               	return	
  2081                           
  2082                           ; BSR set to: 0
  2083                           ;transceiver.c: 275: {
  2084                           ;transceiver.c: 276: serial_out_ptr = 0;
  2085  00114A  0E00               	movlw	0
  2086  00114C  6E3A               	movwf	_serial_out_ptr+1,c
  2087  00114E  0E00               	movlw	0
  2088  001150  6E39               	movwf	_serial_out_ptr,c
  2089                           
  2090                           ; BSR set to: 0
  2091  001152  0012               	return	
  2092  001154                     __end_of_print_byte:
  2093                           	opt stack 0
  2094                           tblptru	equ	0xFF8
  2095                           tblptrh	equ	0xFF7
  2096                           tblptrl	equ	0xFF6
  2097                           tablat	equ	0xFF5
  2098                           prodh	equ	0xFF4
  2099                           prodl	equ	0xFF3
  2100                           intcon	equ	0xFF2
  2101                           postinc0	equ	0xFEE
  2102                           wreg	equ	0xFE8
  2103                           indf1	equ	0xFE7
  2104                           postdec1	equ	0xFE5
  2105                           fsr1h	equ	0xFE2
  2106                           fsr1l	equ	0xFE1
  2107                           indf2	equ	0xFDF
  2108                           postinc2	equ	0xFDE
  2109                           fsr2h	equ	0xFDA
  2110                           fsr2l	equ	0xFD9
  2111                           status	equ	0xFD8
  2112                           
  2113 ;; *************** function _init_usb *****************
  2114 ;; Defined at:
  2115 ;;		line 625 in file "transceiver.c"
  2116 ;; Parameters:    Size  Location     Type
  2117 ;;		None
  2118 ;; Auto vars:     Size  Location     Type
  2119 ;;  i               1   21[BANK0 ] unsigned char 
  2120 ;; Return value:  Size  Location     Type
  2121 ;;                  1    wreg      void 
  2122 ;; Registers used:
  2123 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  2124 ;; Tracked objects:
  2125 ;;		On entry : 0/0
  2126 ;;		On exit  : 0/0
  2127 ;;		Unchanged: 0/0
  2128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2129 ;;      Params:         0       0       0       0
  2130 ;;      Locals:         0       1       0       0
  2131 ;;      Temps:          0       0       0       0
  2132 ;;      Totals:         0       1       0       0
  2133 ;;Total ram usage:        1 bytes
  2134 ;; Hardware stack levels used:    1
  2135 ;; Hardware stack levels required when called:    9
  2136 ;; This function calls:
  2137 ;;		Nothing
  2138 ;; This function is called by:
  2139 ;;		_main
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           	psect	text7
  2144  000FE0                     __ptext7:
  2145                           	opt stack 0
  2146  000FE0                     _init_usb:
  2147                           	opt stack 21
  2148                           
  2149                           ;transceiver.c: 627: uint8_t i;
  2150                           ;transceiver.c: 628: for(i = 0; i < 8; i++)
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;incstack = 0
  2154  000FE0  0E00               	movlw	0
  2155  000FE2  0100               	movlb	0	; () banked
  2156  000FE4  6F9D               	movwf	init_usb@i& (0+255),b
  2157  000FE6                     l2516:
  2158                           
  2159                           ; BSR set to: 0
  2160  000FE6  0E07               	movlw	7
  2161  000FE8  659D               	cpfsgt	init_usb@i& (0+255),b
  2162  000FEA  D001               	goto	l228
  2163  000FEC  D00C               	goto	u1890
  2164  000FEE                     l228:
  2165                           
  2166                           ; BSR set to: 0
  2167                           ;transceiver.c: 629: {
  2168                           ;transceiver.c: 630: EP0_OUT[i] = 0;
  2169                           
  2170                           ; BSR set to: 0
  2171  000FEE  519D               	movf	init_usb@i& (0+255),w,b
  2172  000FF0  0D01               	mullw	1
  2173  000FF2  50F3               	movf	prodl,w,c
  2174  000FF4  25B3               	addwf	_EP0_OUT& (0+255),w,b
  2175  000FF6  6ED9               	movwf	fsr2l,c
  2176  000FF8  50F4               	movf	prodh,w,c
  2177  000FFA  21B4               	addwfc	(_EP0_OUT+1)& (0+255),w,b
  2178  000FFC  6EDA               	movwf	fsr2h,c
  2179  000FFE  0E00               	movlw	0
  2180  001000  6EDF               	movwf	indf2,c
  2181                           
  2182                           ; BSR set to: 0
  2183  001002  2B9D               	incf	init_usb@i& (0+255),f,b
  2184  001004  D7F0               	goto	l2516
  2185  001006                     u1890:
  2186                           
  2187                           ; BSR set to: 0
  2188                           ;transceiver.c: 631: }
  2189                           ;transceiver.c: 634: UCFG = 0b00010100;
  2190                           
  2191                           ; BSR set to: 0
  2192  001006  0E14               	movlw	20
  2193  001008  6E61               	movwf	3937,c	;volatile
  2194                           
  2195                           ;transceiver.c: 637: UCON = 0b00001000;
  2196  00100A  0E08               	movlw	8
  2197  00100C  6E64               	movwf	3940,c	;volatile
  2198  00100E                     l230:
  2199  00100E  0004               	clrwdt		;# 
  2200                           
  2201                           ;transceiver.c: 647: if(!UCONbits.SE0)
  2202  001010  BA64               	btfsc	3940,5,c	;volatile
  2203  001012  D7FD               	goto	l230
  2204                           
  2205                           ;transceiver.c: 650: }
  2206                           ;transceiver.c: 651: }
  2207                           ;transceiver.c: 654: UIR = 0;
  2208                           
  2209                           ;transceiver.c: 648: {
  2210                           ;transceiver.c: 649: break;
  2211  001014  0E00               	movlw	0
  2212  001016  6E62               	movwf	3938,c	;volatile
  2213                           
  2214                           ;transceiver.c: 655: UIE = 0;
  2215  001018  0E00               	movlw	0
  2216  00101A  6E60               	movwf	3936,c	;volatile
  2217                           
  2218                           ;transceiver.c: 656: PIR2bits.USBIF = 0;
  2219  00101C  94A1               	bcf	4001,2,c	;volatile
  2220                           
  2221                           ;transceiver.c: 657: UIEbits.URSTIE = 1;
  2222  00101E  8060               	bsf	3936,0,c	;volatile
  2223                           
  2224                           ;transceiver.c: 658: UIEbits.STALLIE = 1;
  2225  001020  8A60               	bsf	3936,5,c	;volatile
  2226                           
  2227                           ;transceiver.c: 659: UIEbits.TRNIE = 1;
  2228  001022  8660               	bsf	3936,3,c	;volatile
  2229                           
  2230                           ;transceiver.c: 660: PIE2bits.USBIE = 1;
  2231  001024  84A0               	bsf	4000,2,c	;volatile
  2232                           
  2233                           ;transceiver.c: 661: usb_state = 2;
  2234  001026  0E02               	movlw	2
  2235  001028  6E41               	movwf	_usb_state,c
  2236  00102A  0012               	return		;funcret
  2237  00102C                     __end_of_init_usb:
  2238                           	opt stack 0
  2239                           tblptru	equ	0xFF8
  2240                           tblptrh	equ	0xFF7
  2241                           tblptrl	equ	0xFF6
  2242                           tablat	equ	0xFF5
  2243                           prodh	equ	0xFF4
  2244                           prodl	equ	0xFF3
  2245                           intcon	equ	0xFF2
  2246                           postinc0	equ	0xFEE
  2247                           wreg	equ	0xFE8
  2248                           indf1	equ	0xFE7
  2249                           postdec1	equ	0xFE5
  2250                           fsr1h	equ	0xFE2
  2251                           fsr1l	equ	0xFE1
  2252                           indf2	equ	0xFDF
  2253                           postinc2	equ	0xFDE
  2254                           fsr2h	equ	0xFDA
  2255                           fsr2l	equ	0xFD9
  2256                           status	equ	0xFD8
  2257                           
  2258 ;; *************** function _init_uart *****************
  2259 ;; Defined at:
  2260 ;;		line 157 in file "transceiver.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;		None
  2263 ;; Auto vars:     Size  Location     Type
  2264 ;;		None
  2265 ;; Return value:  Size  Location     Type
  2266 ;;                  1    wreg      void 
  2267 ;; Registers used:
  2268 ;;		wreg, status,2
  2269 ;; Tracked objects:
  2270 ;;		On entry : 0/0
  2271 ;;		On exit  : 0/0
  2272 ;;		Unchanged: 0/0
  2273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2274 ;;      Params:         0       0       0       0
  2275 ;;      Locals:         0       0       0       0
  2276 ;;      Temps:          0       0       0       0
  2277 ;;      Totals:         0       0       0       0
  2278 ;;Total ram usage:        0 bytes
  2279 ;; Hardware stack levels used:    1
  2280 ;; Hardware stack levels required when called:    9
  2281 ;; This function calls:
  2282 ;;		Nothing
  2283 ;; This function is called by:
  2284 ;;		_main
  2285 ;; This function uses a non-reentrant model
  2286 ;;
  2287                           
  2288                           	psect	text8
  2289  001292                     __ptext8:
  2290                           	opt stack 0
  2291  001292                     _init_uart:
  2292                           	opt stack 21
  2293                           
  2294                           ;transceiver.c: 160: RCSTA = 0b10010000;
  2295                           
  2296                           ;incstack = 0
  2297  001292  0E90               	movlw	144
  2298  001294  6EAB               	movwf	4011,c	;volatile
  2299                           
  2300                           ;transceiver.c: 161: TXSTA = 0b00000100;
  2301  001296  0E04               	movlw	4
  2302  001298  6EAC               	movwf	4012,c	;volatile
  2303                           
  2304                           ;transceiver.c: 162: BAUDCTL = 0b00001000;
  2305  00129A  0E08               	movlw	8
  2306  00129C  6EB8               	movwf	4024,c	;volatile
  2307                           
  2308                           ;transceiver.c: 165: SPBRGH = (48000000 / 4 / 8192 - 1) >> 8;
  2309  00129E  0E05               	movlw	5
  2310  0012A0  6EB0               	movwf	4016,c	;volatile
  2311                           
  2312                           ;transceiver.c: 166: SPBRG = (48000000 / 4 / 8192 - 1) & 0xff;
  2313  0012A2  0EB7               	movlw	183
  2314  0012A4  6EAF               	movwf	4015,c	;volatile
  2315                           
  2316                           ;transceiver.c: 167: PIR1bits.RCIF = 0;
  2317  0012A6  9A9E               	bcf	3998,5,c	;volatile
  2318                           
  2319                           ;transceiver.c: 168: PIE1bits.RCIE = 1;
  2320  0012A8  8A9D               	bsf	3997,5,c	;volatile
  2321  0012AA  0012               	return		;funcret
  2322  0012AC                     __end_of_init_uart:
  2323                           	opt stack 0
  2324                           tblptru	equ	0xFF8
  2325                           tblptrh	equ	0xFF7
  2326                           tblptrl	equ	0xFF6
  2327                           tablat	equ	0xFF5
  2328                           prodh	equ	0xFF4
  2329                           prodl	equ	0xFF3
  2330                           intcon	equ	0xFF2
  2331                           postinc0	equ	0xFEE
  2332                           wreg	equ	0xFE8
  2333                           indf1	equ	0xFE7
  2334                           postdec1	equ	0xFE5
  2335                           fsr1h	equ	0xFE2
  2336                           fsr1l	equ	0xFE1
  2337                           indf2	equ	0xFDF
  2338                           postinc2	equ	0xFDE
  2339                           fsr2h	equ	0xFDA
  2340                           fsr2l	equ	0xFD9
  2341                           status	equ	0xFD8
  2342                           
  2343 ;; *************** function _flush_uart *****************
  2344 ;; Defined at:
  2345 ;;		line 259 in file "transceiver.c"
  2346 ;; Parameters:    Size  Location     Type
  2347 ;;		None
  2348 ;; Auto vars:     Size  Location     Type
  2349 ;;		None
  2350 ;; Return value:  Size  Location     Type
  2351 ;;                  1    wreg      void 
  2352 ;; Registers used:
  2353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2354 ;; Tracked objects:
  2355 ;;		On entry : 0/0
  2356 ;;		On exit  : 0/0
  2357 ;;		Unchanged: 0/0
  2358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2359 ;;      Params:         0       0       0       0
  2360 ;;      Locals:         0       0       0       0
  2361 ;;      Temps:          0       0       0       0
  2362 ;;      Totals:         0       0       0       0
  2363 ;;Total ram usage:        0 bytes
  2364 ;; Hardware stack levels used:    1
  2365 ;; Hardware stack levels required when called:   11
  2366 ;; This function calls:
  2367 ;;		_handle_uart
  2368 ;; This function is called by:
  2369 ;;		_main
  2370 ;; This function uses a non-reentrant model
  2371 ;;
  2372                           
  2373                           	psect	text9
  2374  0012D4                     __ptext9:
  2375                           	opt stack 0
  2376  0012D4                     _flush_uart:
  2377                           	opt stack 19
  2378                           
  2379                           ;transceiver.c: 261: while(serial_out_count)
  2380                           
  2381                           ;incstack = 0
  2382  0012D4  D002               	goto	l117
  2383  0012D6                     
  2384                           ;transceiver.c: 262: {
  2385                           ;transceiver.c: 263: handle_uart();
  2386  0012D6  EC69  F003         	call	_handle_uart	;wreg free
  2387  0012DA                     l117:
  2388  0012DA  0100               	movlb	0	; () banked
  2389  0012DC  5182               	movf	_serial_out_count& (0+255),w,b
  2390  0012DE  1183               	iorwf	(_serial_out_count+1)& (0+255),w,b
  2391  0012E0  B4D8               	btfsc	status,2,c
  2392  0012E2  0012               	return	
  2393  0012E4  D7F8               	goto	l118
  2394  0012E6                     __end_of_flush_uart:
  2395                           	opt stack 0
  2396                           tblptru	equ	0xFF8
  2397                           tblptrh	equ	0xFF7
  2398                           tblptrl	equ	0xFF6
  2399                           tablat	equ	0xFF5
  2400                           prodh	equ	0xFF4
  2401                           prodl	equ	0xFF3
  2402                           intcon	equ	0xFF2
  2403                           postinc0	equ	0xFEE
  2404                           wreg	equ	0xFE8
  2405                           indf1	equ	0xFE7
  2406                           postdec1	equ	0xFE5
  2407                           fsr1h	equ	0xFE2
  2408                           fsr1l	equ	0xFE1
  2409                           indf2	equ	0xFDF
  2410                           postinc2	equ	0xFDE
  2411                           fsr2h	equ	0xFDA
  2412                           fsr2l	equ	0xFD9
  2413                           status	equ	0xFD8
  2414                           
  2415 ;; *************** function _handle_uart *****************
  2416 ;; Defined at:
  2417 ;;		line 198 in file "transceiver.c"
  2418 ;; Parameters:    Size  Location     Type
  2419 ;;		None
  2420 ;; Auto vars:     Size  Location     Type
  2421 ;;  bits            1   25[BANK0 ] struct .
  2422 ;; Return value:  Size  Location     Type
  2423 ;;                  1    wreg      void 
  2424 ;; Registers used:
  2425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2426 ;; Tracked objects:
  2427 ;;		On entry : 0/0
  2428 ;;		On exit  : 0/0
  2429 ;;		Unchanged: 0/0
  2430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2431 ;;      Params:         0       0       0       0
  2432 ;;      Locals:         0       1       0       0
  2433 ;;      Temps:          0       0       0       0
  2434 ;;      Totals:         0       1       0       0
  2435 ;;Total ram usage:        1 bytes
  2436 ;; Hardware stack levels used:    1
  2437 ;; Hardware stack levels required when called:   10
  2438 ;; This function calls:
  2439 ;;		_delayMicroseconds
  2440 ;; This function is called by:
  2441 ;;		_flush_uart
  2442 ;;		_main
  2443 ;; This function uses a non-reentrant model
  2444 ;;
  2445                           
  2446                           	psect	text10
  2447  0006D2                     __ptext10:
  2448                           	opt stack 0
  2449  0006D2                     _handle_uart:
  2450                           	opt stack 20
  2451                           
  2452                           ;transceiver.c: 201: if(RCSTAbits.OERR)
  2453                           
  2454                           ; BSR set to: 0
  2455                           ;incstack = 0
  2456  0006D2  A2AB               	btfss	4011,1,c	;volatile
  2457  0006D4  D003               	goto	l111
  2458                           
  2459                           ;transceiver.c: 202: {
  2460                           ;transceiver.c: 203: RCSTAbits.OERR = 0;
  2461  0006D6  92AB               	bcf	4011,1,c	;volatile
  2462                           
  2463                           ;transceiver.c: 204: RCSTAbits.CREN = 0;
  2464  0006D8  98AB               	bcf	4011,4,c	;volatile
  2465                           
  2466                           ;transceiver.c: 205: RCSTAbits.CREN = 1;
  2467  0006DA  88AB               	bsf	4011,4,c	;volatile
  2468  0006DC                     l111:
  2469                           
  2470                           ;transceiver.c: 206: }
  2471                           ;transceiver.c: 209: if(serial_out_count > 0)
  2472  0006DC  0100               	movlb	0	; () banked
  2473  0006DE  5182               	movf	_serial_out_count& (0+255),w,b
  2474  0006E0  1183               	iorwf	(_serial_out_count+1)& (0+255),w,b
  2475  0006E2  B4D8               	btfsc	status,2,c
  2476  0006E4  0012               	return	
  2477                           
  2478                           ; BSR set to: 0
  2479                           ;transceiver.c: 210: {
  2480                           ;transceiver.c: 211: bits_t bits;
  2481                           ;transceiver.c: 212: bits.value = serial_out_buffer[serial_out_ptr2++];
  2482  0006E6  0E00               	movlw	low _serial_out_buffer
  2483  0006E8  2580               	addwf	_serial_out_ptr2& (0+255),w,b
  2484  0006EA  6ED9               	movwf	fsr2l,c
  2485  0006EC  0E01               	movlw	high _serial_out_buffer
  2486  0006EE  2181               	addwfc	(_serial_out_ptr2+1)& (0+255),w,b
  2487  0006F0  6EDA               	movwf	fsr2h,c
  2488  0006F2  50DF               	movf	indf2,w,c
  2489  0006F4  6FA1               	movwf	handle_uart@bits& (0+255),b
  2490                           
  2491                           ; BSR set to: 0
  2492  0006F6  4B80               	infsnz	_serial_out_ptr2& (0+255),f,b
  2493  0006F8  2B81               	incf	(_serial_out_ptr2+1)& (0+255),f,b
  2494                           
  2495                           ; BSR set to: 0
  2496                           ;transceiver.c: 213: if(serial_out_ptr2 >= 256)
  2497  0006FA  0581               	decf	(_serial_out_ptr2+1)& (0+255),w,b
  2498  0006FC  A0D8               	btfss	status,0,c
  2499  0006FE  D004               	goto	l113
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;transceiver.c: 214: {
  2503                           ;transceiver.c: 215: serial_out_ptr2 = 0;
  2504  000700  0E00               	movlw	0
  2505  000702  6F81               	movwf	(_serial_out_ptr2+1)& (0+255),b
  2506  000704  0E00               	movlw	0
  2507  000706  6F80               	movwf	_serial_out_ptr2& (0+255),b
  2508  000708                     l113:
  2509                           
  2510                           ; BSR set to: 0
  2511                           ;transceiver.c: 216: }
  2512                           ;transceiver.c: 217: serial_out_count--;
  2513                           
  2514                           ; BSR set to: 0
  2515  000708  0782               	decf	_serial_out_count& (0+255),f,b
  2516  00070A  A0D8               	btfss	status,0,c
  2517  00070C  0783               	decf	(_serial_out_count+1)& (0+255),f,b
  2518                           
  2519                           ; BSR set to: 0
  2520                           ;transceiver.c: 221: LATCbits.LATC6 = 0;
  2521  00070E  9C8B               	bcf	3979,6,c	;volatile
  2522                           
  2523                           ; BSR set to: 0
  2524                           ;transceiver.c: 222: delayMicroseconds(26);
  2525  000710  0E00               	movlw	0
  2526  000712  6F9E               	movwf	(delayMicroseconds@x+1)& (0+255),b
  2527  000714  0E1A               	movlw	26
  2528  000716  6F9D               	movwf	delayMicroseconds@x& (0+255),b
  2529  000718  EC21  F009         	call	_delayMicroseconds	;wreg free
  2530                           
  2531                           ;transceiver.c: 223: LATCbits.LATC6 = bits.bit7;
  2532  00071C  0100               	movlb	0	; () banked
  2533  00071E  A1A1               	btfss	handle_uart@bits& (0+255),0,b
  2534  000720  D002               	bra	u1635
  2535  000722  8C8B               	bsf	3979,6,c	;volatile
  2536  000724  D001               	bra	u1637
  2537  000726                     u1635:
  2538  000726  9C8B               	bcf	3979,6,c	;volatile
  2539  000728                     u1637:
  2540                           
  2541                           ;transceiver.c: 224: delayMicroseconds(26);
  2542  000728  0E00               	movlw	0
  2543  00072A  0100               	movlb	0	; () banked
  2544  00072C  6F9E               	movwf	(delayMicroseconds@x+1)& (0+255),b
  2545  00072E  0E1A               	movlw	26
  2546  000730  6F9D               	movwf	delayMicroseconds@x& (0+255),b
  2547  000732  EC21  F009         	call	_delayMicroseconds	;wreg free
  2548                           
  2549                           ;transceiver.c: 225: LATCbits.LATC6 = bits.bit6;
  2550  000736  0100               	movlb	0	; () banked
  2551  000738  A3A1               	btfss	handle_uart@bits& (0+255),1,b
  2552  00073A  D002               	bra	u1645
  2553  00073C  8C8B               	bsf	3979,6,c	;volatile
  2554  00073E  D001               	bra	u1647
  2555  000740                     u1645:
  2556  000740  9C8B               	bcf	3979,6,c	;volatile
  2557  000742                     u1647:
  2558                           
  2559                           ;transceiver.c: 226: delayMicroseconds(26);
  2560  000742  0E00               	movlw	0
  2561  000744  0100               	movlb	0	; () banked
  2562  000746  6F9E               	movwf	(delayMicroseconds@x+1)& (0+255),b
  2563  000748  0E1A               	movlw	26
  2564  00074A  6F9D               	movwf	delayMicroseconds@x& (0+255),b
  2565  00074C  EC21  F009         	call	_delayMicroseconds	;wreg free
  2566                           
  2567                           ;transceiver.c: 227: LATCbits.LATC6 = bits.bit5;
  2568  000750  0100               	movlb	0	; () banked
  2569  000752  A5A1               	btfss	handle_uart@bits& (0+255),2,b
  2570  000754  D002               	bra	u1655
  2571  000756  8C8B               	bsf	3979,6,c	;volatile
  2572  000758  D001               	bra	u1657
  2573  00075A                     u1655:
  2574  00075A  9C8B               	bcf	3979,6,c	;volatile
  2575  00075C                     u1657:
  2576                           
  2577                           ;transceiver.c: 228: delayMicroseconds(26);
  2578  00075C  0E00               	movlw	0
  2579  00075E  0100               	movlb	0	; () banked
  2580  000760  6F9E               	movwf	(delayMicroseconds@x+1)& (0+255),b
  2581  000762  0E1A               	movlw	26
  2582  000764  6F9D               	movwf	delayMicroseconds@x& (0+255),b
  2583  000766  EC21  F009         	call	_delayMicroseconds	;wreg free
  2584                           
  2585                           ;transceiver.c: 229: LATCbits.LATC6 = bits.bit4;
  2586  00076A  0100               	movlb	0	; () banked
  2587  00076C  A7A1               	btfss	handle_uart@bits& (0+255),3,b
  2588  00076E  D002               	bra	u1665
  2589  000770  8C8B               	bsf	3979,6,c	;volatile
  2590  000772  D001               	bra	u1667
  2591  000774                     u1665:
  2592  000774  9C8B               	bcf	3979,6,c	;volatile
  2593  000776                     u1667:
  2594                           
  2595                           ;transceiver.c: 230: delayMicroseconds(26);
  2596  000776  0E00               	movlw	0
  2597  000778  0100               	movlb	0	; () banked
  2598  00077A  6F9E               	movwf	(delayMicroseconds@x+1)& (0+255),b
  2599  00077C  0E1A               	movlw	26
  2600  00077E  6F9D               	movwf	delayMicroseconds@x& (0+255),b
  2601  000780  EC21  F009         	call	_delayMicroseconds	;wreg free
  2602                           
  2603                           ;transceiver.c: 231: LATCbits.LATC6 = bits.bit3;
  2604  000784  0100               	movlb	0	; () banked
  2605  000786  A9A1               	btfss	handle_uart@bits& (0+255),4,b
  2606  000788  D002               	bra	u1675
  2607  00078A  8C8B               	bsf	3979,6,c	;volatile
  2608  00078C  D001               	bra	u1677
  2609  00078E                     u1675:
  2610  00078E  9C8B               	bcf	3979,6,c	;volatile
  2611  000790                     u1677:
  2612                           
  2613                           ;transceiver.c: 232: delayMicroseconds(26);
  2614  000790  0E00               	movlw	0
  2615  000792  0100               	movlb	0	; () banked
  2616  000794  6F9E               	movwf	(delayMicroseconds@x+1)& (0+255),b
  2617  000796  0E1A               	movlw	26
  2618  000798  6F9D               	movwf	delayMicroseconds@x& (0+255),b
  2619  00079A  EC21  F009         	call	_delayMicroseconds	;wreg free
  2620                           
  2621                           ;transceiver.c: 233: LATCbits.LATC6 = bits.bit2;
  2622  00079E  0100               	movlb	0	; () banked
  2623  0007A0  ABA1               	btfss	handle_uart@bits& (0+255),5,b
  2624  0007A2  D002               	bra	u1685
  2625  0007A4  8C8B               	bsf	3979,6,c	;volatile
  2626  0007A6  D001               	bra	u1687
  2627  0007A8                     u1685:
  2628  0007A8  9C8B               	bcf	3979,6,c	;volatile
  2629  0007AA                     u1687:
  2630                           
  2631                           ;transceiver.c: 234: delayMicroseconds(26);
  2632  0007AA  0E00               	movlw	0
  2633  0007AC  0100               	movlb	0	; () banked
  2634  0007AE  6F9E               	movwf	(delayMicroseconds@x+1)& (0+255),b
  2635  0007B0  0E1A               	movlw	26
  2636  0007B2  6F9D               	movwf	delayMicroseconds@x& (0+255),b
  2637  0007B4  EC21  F009         	call	_delayMicroseconds	;wreg free
  2638                           
  2639                           ;transceiver.c: 235: LATCbits.LATC6 = bits.bit1;
  2640  0007B8  0100               	movlb	0	; () banked
  2641  0007BA  ADA1               	btfss	handle_uart@bits& (0+255),6,b
  2642  0007BC  D002               	bra	u1695
  2643  0007BE  8C8B               	bsf	3979,6,c	;volatile
  2644  0007C0  D001               	bra	u1697
  2645  0007C2                     u1695:
  2646  0007C2  9C8B               	bcf	3979,6,c	;volatile
  2647  0007C4                     u1697:
  2648                           
  2649                           ;transceiver.c: 236: delayMicroseconds(26);
  2650  0007C4  0E00               	movlw	0
  2651  0007C6  0100               	movlb	0	; () banked
  2652  0007C8  6F9E               	movwf	(delayMicroseconds@x+1)& (0+255),b
  2653  0007CA  0E1A               	movlw	26
  2654  0007CC  6F9D               	movwf	delayMicroseconds@x& (0+255),b
  2655  0007CE  EC21  F009         	call	_delayMicroseconds	;wreg free
  2656                           
  2657                           ;transceiver.c: 237: LATCbits.LATC6 = bits.bit0;
  2658  0007D2  0100               	movlb	0	; () banked
  2659  0007D4  AFA1               	btfss	handle_uart@bits& (0+255),7,b
  2660  0007D6  D002               	bra	u1705
  2661  0007D8  8C8B               	bsf	3979,6,c	;volatile
  2662  0007DA  D001               	bra	u1707
  2663  0007DC                     u1705:
  2664  0007DC  9C8B               	bcf	3979,6,c	;volatile
  2665  0007DE                     u1707:
  2666                           
  2667                           ;transceiver.c: 238: delayMicroseconds(26);
  2668  0007DE  0E00               	movlw	0
  2669  0007E0  0100               	movlb	0	; () banked
  2670  0007E2  6F9E               	movwf	(delayMicroseconds@x+1)& (0+255),b
  2671  0007E4  0E1A               	movlw	26
  2672  0007E6  6F9D               	movwf	delayMicroseconds@x& (0+255),b
  2673  0007E8  EC21  F009         	call	_delayMicroseconds	;wreg free
  2674                           
  2675                           ;transceiver.c: 240: LATCbits.LATC6 = 1;
  2676  0007EC  8C8B               	bsf	3979,6,c	;volatile
  2677                           
  2678                           ;transceiver.c: 241: delayMicroseconds(26);
  2679  0007EE  0E00               	movlw	0
  2680  0007F0  0100               	movlb	0	; () banked
  2681  0007F2  6F9E               	movwf	(delayMicroseconds@x+1)& (0+255),b
  2682  0007F4  0E1A               	movlw	26
  2683  0007F6  6F9D               	movwf	delayMicroseconds@x& (0+255),b
  2684  0007F8  EC21  F009         	call	_delayMicroseconds	;wreg free
  2685  0007FC  0012               	return	
  2686  0007FE                     __end_of_handle_uart:
  2687                           	opt stack 0
  2688                           tblptru	equ	0xFF8
  2689                           tblptrh	equ	0xFF7
  2690                           tblptrl	equ	0xFF6
  2691                           tablat	equ	0xFF5
  2692                           prodh	equ	0xFF4
  2693                           prodl	equ	0xFF3
  2694                           intcon	equ	0xFF2
  2695                           postinc0	equ	0xFEE
  2696                           wreg	equ	0xFE8
  2697                           indf1	equ	0xFE7
  2698                           postdec1	equ	0xFE5
  2699                           fsr1h	equ	0xFE2
  2700                           fsr1l	equ	0xFE1
  2701                           indf2	equ	0xFDF
  2702                           postinc2	equ	0xFDE
  2703                           fsr2h	equ	0xFDA
  2704                           fsr2l	equ	0xFD9
  2705                           status	equ	0xFD8
  2706                           
  2707 ;; *************** function _delayMicroseconds *****************
  2708 ;; Defined at:
  2709 ;;		line 188 in file "transceiver.c"
  2710 ;; Parameters:    Size  Location     Type
  2711 ;;  x               2   21[BANK0 ] unsigned int 
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;  i               2   23[BANK0 ] unsigned int 
  2714 ;; Return value:  Size  Location     Type
  2715 ;;                  1    wreg      void 
  2716 ;; Registers used:
  2717 ;;		wreg, status,2, status,0
  2718 ;; Tracked objects:
  2719 ;;		On entry : 0/0
  2720 ;;		On exit  : 0/0
  2721 ;;		Unchanged: 0/0
  2722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2723 ;;      Params:         0       2       0       0
  2724 ;;      Locals:         0       2       0       0
  2725 ;;      Temps:          0       0       0       0
  2726 ;;      Totals:         0       4       0       0
  2727 ;;Total ram usage:        4 bytes
  2728 ;; Hardware stack levels used:    1
  2729 ;; Hardware stack levels required when called:    9
  2730 ;; This function calls:
  2731 ;;		Nothing
  2732 ;; This function is called by:
  2733 ;;		_handle_uart
  2734 ;;		_main
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           	psect	text11
  2739  001242                     __ptext11:
  2740                           	opt stack 0
  2741  001242                     _delayMicroseconds:
  2742                           	opt stack 20
  2743                           
  2744                           ;transceiver.c: 190: uint16_t i;
  2745                           ;transceiver.c: 191: x -= 3;
  2746                           
  2747                           ;incstack = 0
  2748  001242  0E03               	movlw	3
  2749  001244  0100               	movlb	0	; () banked
  2750  001246  5F9D               	subwf	delayMicroseconds@x& (0+255),f,b
  2751  001248  0E00               	movlw	0
  2752  00124A  5B9E               	subwfb	(delayMicroseconds@x+1)& (0+255),f,b
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;transceiver.c: 192: for(i = 0; i < x; i++)
  2756  00124C  0E00               	movlw	0
  2757  00124E  6FA0               	movwf	(delayMicroseconds@i+1)& (0+255),b
  2758  001250  0E00               	movlw	0
  2759  001252  6F9F               	movwf	delayMicroseconds@i& (0+255),b
  2760  001254  D004               	goto	l105
  2761  001256                     l106:
  2762                           
  2763                           ; BSR set to: 0
  2764  001256  F000               	nop		;# 
  2765  001258  0100               	movlb	0	; () banked
  2766  00125A  4B9F               	infsnz	delayMicroseconds@i& (0+255),f,b
  2767  00125C  2BA0               	incf	(delayMicroseconds@i+1)& (0+255),f,b
  2768  00125E                     l105:
  2769                           
  2770                           ; BSR set to: 0
  2771                           
  2772                           ; BSR set to: 0
  2773  00125E  519D               	movf	delayMicroseconds@x& (0+255),w,b
  2774  001260  5D9F               	subwf	delayMicroseconds@i& (0+255),w,b
  2775  001262  519E               	movf	(delayMicroseconds@x+1)& (0+255),w,b
  2776  001264  59A0               	subwfb	(delayMicroseconds@i+1)& (0+255),w,b
  2777  001266  B0D8               	btfsc	status,0,c
  2778  001268  0012               	return	
  2779  00126A  D7F5               	goto	l106
  2780  00126C                     __end_of_delayMicroseconds:
  2781                           	opt stack 0
  2782                           tblptru	equ	0xFF8
  2783                           tblptrh	equ	0xFF7
  2784                           tblptrl	equ	0xFF6
  2785                           tablat	equ	0xFF5
  2786                           prodh	equ	0xFF4
  2787                           prodl	equ	0xFF3
  2788                           intcon	equ	0xFF2
  2789                           postinc0	equ	0xFEE
  2790                           wreg	equ	0xFE8
  2791                           indf1	equ	0xFE7
  2792                           postdec1	equ	0xFE5
  2793                           fsr1h	equ	0xFE2
  2794                           fsr1l	equ	0xFE1
  2795                           indf2	equ	0xFDF
  2796                           postinc2	equ	0xFDE
  2797                           fsr2h	equ	0xFDA
  2798                           fsr2l	equ	0xFD9
  2799                           status	equ	0xFD8
  2800                           
  2801 ;; *************** function _isr1 *****************
  2802 ;; Defined at:
  2803 ;;		line 1455 in file "transceiver.c"
  2804 ;; Parameters:    Size  Location     Type
  2805 ;;		None
  2806 ;; Auto vars:     Size  Location     Type
  2807 ;;		None
  2808 ;; Return value:  Size  Location     Type
  2809 ;;                  1    wreg      void 
  2810 ;; Registers used:
  2811 ;;		None
  2812 ;; Tracked objects:
  2813 ;;		On entry : 0/0
  2814 ;;		On exit  : 0/0
  2815 ;;		Unchanged: 0/0
  2816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2817 ;;      Params:         0       0       0       0
  2818 ;;      Locals:         0       0       0       0
  2819 ;;      Temps:          0      21       0       0
  2820 ;;      Totals:         0      21       0       0
  2821 ;;Total ram usage:       21 bytes
  2822 ;; Hardware stack levels used:    1
  2823 ;; Hardware stack levels required when called:    8
  2824 ;; This function calls:
  2825 ;;		Nothing
  2826 ;; This function is called by:
  2827 ;;		Interrupt level 1
  2828 ;; This function uses a non-reentrant model
  2829 ;;
  2830                           
  2831                           	psect	intcodelo
  2832  000018                     __pintcodelo:
  2833                           	opt stack 0
  2834  000018                     _isr1:
  2835                           	opt stack 19
  2836                           
  2837                           ; BSR set to: 0
  2838                           ;incstack = 0
  2839  000018  804E               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  2840  00001A  CFD8 F088          	movff	status,??_isr1
  2841  00001E  CFE8 F089          	movff	wreg,??_isr1+1
  2842  000022  CFE0 F08A          	movff	bsr,??_isr1+2
  2843  000026  CFFA F08B          	movff	pclath,??_isr1+3
  2844  00002A  CFFB F08C          	movff	pclatu,??_isr1+4
  2845  00002E  CFE9 F08D          	movff	fsr0l,??_isr1+5
  2846  000032  CFEA F08E          	movff	fsr0h,??_isr1+6
  2847  000036  CFE1 F08F          	movff	fsr1l,??_isr1+7
  2848  00003A  CFE2 F090          	movff	fsr1h,??_isr1+8
  2849  00003E  CFD9 F091          	movff	fsr2l,??_isr1+9
  2850  000042  CFDA F092          	movff	fsr2h,??_isr1+10
  2851  000046  CFF3 F093          	movff	prodl,??_isr1+11
  2852  00004A  CFF4 F094          	movff	prodh,??_isr1+12
  2853  00004E  CFF6 F095          	movff	tblptrl,??_isr1+13
  2854  000052  CFF7 F096          	movff	tblptrh,??_isr1+14
  2855  000056  CFF8 F097          	movff	tblptru,??_isr1+15
  2856  00005A  CFF5 F098          	movff	tablat,??_isr1+16
  2857  00005E  C04E  F099         	movff	btemp,??_isr1+17
  2858  000062  C04F  F09A         	movff	btemp+1,??_isr1+18
  2859  000066  C050  F09B         	movff	btemp+2,??_isr1+19
  2860  00006A  C051  F09C         	movff	btemp+3,??_isr1+20
  2861  00006E  C09C  F051         	movff	??_isr1+20,btemp+3
  2862  000072  C09B  F050         	movff	??_isr1+19,btemp+2
  2863  000076  C09A  F04F         	movff	??_isr1+18,btemp+1
  2864  00007A  C099  F04E         	movff	??_isr1+17,btemp
  2865  00007E  C098  FFF5         	movff	??_isr1+16,tablat
  2866  000082  C097  FFF8         	movff	??_isr1+15,tblptru
  2867  000086  C096  FFF7         	movff	??_isr1+14,tblptrh
  2868  00008A  C095  FFF6         	movff	??_isr1+13,tblptrl
  2869  00008E  C094  FFF4         	movff	??_isr1+12,prodh
  2870  000092  C093  FFF3         	movff	??_isr1+11,prodl
  2871  000096  C092  FFDA         	movff	??_isr1+10,fsr2h
  2872  00009A  C091  FFD9         	movff	??_isr1+9,fsr2l
  2873  00009E  C090  FFE2         	movff	??_isr1+8,fsr1h
  2874  0000A2  C08F  FFE1         	movff	??_isr1+7,fsr1l
  2875  0000A6  C08E  FFEA         	movff	??_isr1+6,fsr0h
  2876  0000AA  C08D  FFE9         	movff	??_isr1+5,fsr0l
  2877  0000AE  C08C  FFFB         	movff	??_isr1+4,pclatu
  2878  0000B2  C08B  FFFA         	movff	??_isr1+3,pclath
  2879  0000B6  C08A  FFE0         	movff	??_isr1+2,bsr
  2880  0000BA  C089  FFE8         	movff	??_isr1+1,wreg
  2881  0000BE  C088  FFD8         	movff	??_isr1,status
  2882  0000C2  904E               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  2883  0000C4  0010               	retfie	
  2884  0000C6                     __end_of_isr1:
  2885                           	opt stack 0
  2886                           pclatu	equ	0xFFB
  2887                           pclath	equ	0xFFA
  2888                           tblptru	equ	0xFF8
  2889                           tblptrh	equ	0xFF7
  2890                           tblptrl	equ	0xFF6
  2891                           tablat	equ	0xFF5
  2892                           prodh	equ	0xFF4
  2893                           prodl	equ	0xFF3
  2894                           intcon	equ	0xFF2
  2895                           postinc0	equ	0xFEE
  2896                           fsr0h	equ	0xFEA
  2897                           fsr0l	equ	0xFE9
  2898                           wreg	equ	0xFE8
  2899                           indf1	equ	0xFE7
  2900                           postdec1	equ	0xFE5
  2901                           fsr1h	equ	0xFE2
  2902                           fsr1l	equ	0xFE1
  2903                           bsr	equ	0xFE0
  2904                           indf2	equ	0xFDF
  2905                           postinc2	equ	0xFDE
  2906                           fsr2h	equ	0xFDA
  2907                           fsr2l	equ	0xFD9
  2908                           status	equ	0xFD8
  2909                           
  2910 ;; *************** function _isr *****************
  2911 ;; Defined at:
  2912 ;;		line 1459 in file "transceiver.c"
  2913 ;; Parameters:    Size  Location     Type
  2914 ;;		None
  2915 ;; Auto vars:     Size  Location     Type
  2916 ;;		None
  2917 ;; Return value:  Size  Location     Type
  2918 ;;                  1    wreg      void 
  2919 ;; Registers used:
  2920 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2921 ;; Tracked objects:
  2922 ;;		On entry : 0/0
  2923 ;;		On exit  : 0/0
  2924 ;;		Unchanged: 0/0
  2925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2926 ;;      Params:         0       0       0       0
  2927 ;;      Locals:         0       0       0       0
  2928 ;;      Temps:         18       0       0       0
  2929 ;;      Totals:        18       0       0       0
  2930 ;;Total ram usage:       18 bytes
  2931 ;; Hardware stack levels used:    1
  2932 ;; Hardware stack levels required when called:    7
  2933 ;; This function calls:
  2934 ;;		_handle_uart_rx
  2935 ;;		_handle_usb_reset
  2936 ;;		_handle_usb_stall
  2937 ;;		_handle_usb_transaction
  2938 ;; This function is called by:
  2939 ;;		Interrupt level 2
  2940 ;; This function uses a non-reentrant model
  2941 ;;
  2942                           
  2943                           	psect	intcode
  2944  000008                     __pintcode:
  2945                           	opt stack 0
  2946  000008                     _isr:
  2947                           	opt stack 19
  2948                           
  2949                           ;incstack = 0
  2950  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2951  00000A  EF01  F005         	goto	int_func
  2952                           pclatu	equ	0xFFB
  2953                           pclath	equ	0xFFA
  2954                           tblptru	equ	0xFF8
  2955                           tblptrh	equ	0xFF7
  2956                           tblptrl	equ	0xFF6
  2957                           tablat	equ	0xFF5
  2958                           prodh	equ	0xFF4
  2959                           prodl	equ	0xFF3
  2960                           intcon	equ	0xFF2
  2961                           postinc0	equ	0xFEE
  2962                           fsr0h	equ	0xFEA
  2963                           fsr0l	equ	0xFE9
  2964                           wreg	equ	0xFE8
  2965                           indf1	equ	0xFE7
  2966                           postdec1	equ	0xFE5
  2967                           fsr1h	equ	0xFE2
  2968                           fsr1l	equ	0xFE1
  2969                           bsr	equ	0xFE0
  2970                           indf2	equ	0xFDF
  2971                           postinc2	equ	0xFDE
  2972                           fsr2h	equ	0xFDA
  2973                           fsr2l	equ	0xFD9
  2974                           status	equ	0xFD8
  2975                           
  2976                           	psect	intcode_body
  2977  000A02                     __pintcode_body:
  2978                           	opt stack 19
  2979  000A02                     int_func:
  2980                           	opt stack 19
  2981  000A02  CFFA F022          	movff	pclath,??_isr
  2982  000A06  CFFB F023          	movff	pclatu,??_isr+1
  2983  000A0A  CFE9 F024          	movff	fsr0l,??_isr+2
  2984  000A0E  CFEA F025          	movff	fsr0h,??_isr+3
  2985  000A12  CFE1 F026          	movff	fsr1l,??_isr+4
  2986  000A16  CFE2 F027          	movff	fsr1h,??_isr+5
  2987  000A1A  CFD9 F028          	movff	fsr2l,??_isr+6
  2988  000A1E  CFDA F029          	movff	fsr2h,??_isr+7
  2989  000A22  CFF3 F02A          	movff	prodl,??_isr+8
  2990  000A26  CFF4 F02B          	movff	prodh,??_isr+9
  2991  000A2A  CFF6 F02C          	movff	tblptrl,??_isr+10
  2992  000A2E  CFF7 F02D          	movff	tblptrh,??_isr+11
  2993  000A32  CFF8 F02E          	movff	tblptru,??_isr+12
  2994  000A36  CFF5 F02F          	movff	tablat,??_isr+13
  2995  000A3A  C04E  F030         	movff	btemp,??_isr+14
  2996  000A3E  C04F  F031         	movff	btemp+1,??_isr+15
  2997  000A42  C050  F032         	movff	btemp+2,??_isr+16
  2998  000A46  C051  F033         	movff	btemp+3,??_isr+17
  2999                           
  3000                           ;transceiver.c: 1461: flags.interrupt_complete = 0;
  3001  000A4A  9042               	bcf	_flags,0,c
  3002                           
  3003                           ;transceiver.c: 1462: while(!flags.interrupt_complete)
  3004  000A4C  D01B               	goto	i2l394
  3005  000A4E                     i2l388:
  3006                           
  3007                           ;transceiver.c: 1463: {
  3008                           ;transceiver.c: 1464: flags.interrupt_complete = 1;
  3009  000A4E  8042               	bsf	_flags,0,c
  3010                           
  3011                           ;transceiver.c: 1467: if(PIR2bits.USBIF)
  3012  000A50  A4A1               	btfss	4001,2,c	;volatile
  3013  000A52  D00B               	goto	i2l392
  3014                           
  3015                           ;transceiver.c: 1468: {
  3016                           ;transceiver.c: 1469: flags.interrupt_complete = 0;
  3017  000A54  9042               	bcf	_flags,0,c
  3018                           
  3019                           ;transceiver.c: 1470: PIR2bits.USBIF = 0;
  3020  000A56  94A1               	bcf	4001,2,c	;volatile
  3021                           
  3022                           ;transceiver.c: 1471: if(UIRbits.URSTIF)
  3023  000A58  B062               	btfsc	3938,0,c	;volatile
  3024                           
  3025                           ;transceiver.c: 1472: {
  3026                           ;transceiver.c: 1473: handle_usb_reset();
  3027  000A5A  EC75  F008         	call	_handle_usb_reset	;wreg free
  3028                           
  3029                           ;transceiver.c: 1474: }
  3030                           ;transceiver.c: 1476: if(UIRbits.STALLIF)
  3031  000A5E  BA62               	btfsc	3938,5,c	;volatile
  3032                           
  3033                           ;transceiver.c: 1477: {
  3034                           ;transceiver.c: 1478: handle_usb_stall();
  3035  000A60  EC7C  F009         	call	_handle_usb_stall	;wreg free
  3036                           
  3037                           ;transceiver.c: 1479: }
  3038                           ;transceiver.c: 1481: if(UIRbits.TRNIF)
  3039  000A64  B662               	btfsc	3938,3,c	;volatile
  3040                           
  3041                           ;transceiver.c: 1482: {
  3042                           ;transceiver.c: 1483: handle_usb_transaction();
  3043  000A66  ECAA  F008         	call	_handle_usb_transaction	;wreg free
  3044  000A6A                     i2l392:
  3045                           
  3046                           ;transceiver.c: 1484: }
  3047                           ;transceiver.c: 1485: }
  3048                           ;transceiver.c: 1488: if(INTCONbits.TMR0IF)
  3049  000A6A  A4F2               	btfss	intcon,2,c	;volatile
  3050  000A6C  D008               	goto	i2l393
  3051                           
  3052                           ;transceiver.c: 1489: {
  3053                           ;transceiver.c: 1490: INTCONbits.TMR0IF = 0;
  3054  000A6E  94F2               	bcf	intcon,2,c	;volatile
  3055                           
  3056                           ;transceiver.c: 1491: TMR0 = -(48000000 / 4 / 32 / 1000);
  3057  000A70  0EFE               	movlw	254
  3058  000A72  6ED7               	movwf	4055,c	;volatile
  3059  000A74  0E89               	movlw	137
  3060  000A76  6ED6               	movwf	4054,c	;volatile
  3061                           
  3062                           ;transceiver.c: 1492: tick++;
  3063  000A78  0100               	movlb	0	; () banked
  3064  000A7A  4B86               	infsnz	_tick& (0+255),f,b
  3065  000A7C  2B87               	incf	(_tick+1)& (0+255),f,b
  3066  000A7E                     i2l393:
  3067                           
  3068                           ;transceiver.c: 1495: }
  3069                           ;transceiver.c: 1497: if(PIR1bits.RCIF)
  3070                           
  3071                           ; BSR set to: 0
  3072  000A7E  BA9E               	btfsc	3998,5,c	;volatile
  3073                           
  3074                           ;transceiver.c: 1498: {
  3075                           ;transceiver.c: 1500: handle_uart_rx();
  3076  000A80  EC37  F008         	call	_handle_uart_rx	;wreg free
  3077  000A84                     i2l394:
  3078  000A84  A042               	btfss	_flags,0,c
  3079  000A86  D7E3               	goto	i2l388
  3080  000A88  C033  F051         	movff	??_isr+17,btemp+3
  3081  000A8C  C032  F050         	movff	??_isr+16,btemp+2
  3082  000A90  C031  F04F         	movff	??_isr+15,btemp+1
  3083  000A94  C030  F04E         	movff	??_isr+14,btemp
  3084  000A98  C02F  FFF5         	movff	??_isr+13,tablat
  3085  000A9C  C02E  FFF8         	movff	??_isr+12,tblptru
  3086  000AA0  C02D  FFF7         	movff	??_isr+11,tblptrh
  3087  000AA4  C02C  FFF6         	movff	??_isr+10,tblptrl
  3088  000AA8  C02B  FFF4         	movff	??_isr+9,prodh
  3089  000AAC  C02A  FFF3         	movff	??_isr+8,prodl
  3090  000AB0  C029  FFDA         	movff	??_isr+7,fsr2h
  3091  000AB4  C028  FFD9         	movff	??_isr+6,fsr2l
  3092  000AB8  C027  FFE2         	movff	??_isr+5,fsr1h
  3093  000ABC  C026  FFE1         	movff	??_isr+4,fsr1l
  3094  000AC0  C025  FFEA         	movff	??_isr+3,fsr0h
  3095  000AC4  C024  FFE9         	movff	??_isr+2,fsr0l
  3096  000AC8  C023  FFFB         	movff	??_isr+1,pclatu
  3097  000ACC  C022  FFFA         	movff	??_isr,pclath
  3098  000AD0  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3099  000AD2  0011               	retfie		f
  3100  000AD4                     __end_of_isr:
  3101                           	opt stack 0
  3102                           pclatu	equ	0xFFB
  3103                           pclath	equ	0xFFA
  3104                           tblptru	equ	0xFF8
  3105                           tblptrh	equ	0xFF7
  3106                           tblptrl	equ	0xFF6
  3107                           tablat	equ	0xFF5
  3108                           prodh	equ	0xFF4
  3109                           prodl	equ	0xFF3
  3110                           intcon	equ	0xFF2
  3111                           postinc0	equ	0xFEE
  3112                           fsr0h	equ	0xFEA
  3113                           fsr0l	equ	0xFE9
  3114                           wreg	equ	0xFE8
  3115                           indf1	equ	0xFE7
  3116                           postdec1	equ	0xFE5
  3117                           fsr1h	equ	0xFE2
  3118                           fsr1l	equ	0xFE1
  3119                           bsr	equ	0xFE0
  3120                           indf2	equ	0xFDF
  3121                           postinc2	equ	0xFDE
  3122                           fsr2h	equ	0xFDA
  3123                           fsr2l	equ	0xFD9
  3124                           status	equ	0xFD8
  3125                           
  3126 ;; *************** function _handle_usb_transaction *****************
  3127 ;; Defined at:
  3128 ;;		line 1153 in file "transceiver.c"
  3129 ;; Parameters:    Size  Location     Type
  3130 ;;		None
  3131 ;; Auto vars:     Size  Location     Type
  3132 ;;		None
  3133 ;; Return value:  Size  Location     Type
  3134 ;;                  1    wreg      void 
  3135 ;; Registers used:
  3136 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3137 ;; Tracked objects:
  3138 ;;		On entry : 0/0
  3139 ;;		On exit  : 0/0
  3140 ;;		Unchanged: 0/0
  3141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3142 ;;      Params:         0       0       0       0
  3143 ;;      Locals:         0       0       0       0
  3144 ;;      Temps:          2       0       0       0
  3145 ;;      Totals:         2       0       0       0
  3146 ;;Total ram usage:        2 bytes
  3147 ;; Hardware stack levels used:    1
  3148 ;; Hardware stack levels required when called:    6
  3149 ;; This function calls:
  3150 ;;		_handle_usb_ctrl_input
  3151 ;;		_handle_usb_ctrl_output
  3152 ;; This function is called by:
  3153 ;;		_isr
  3154 ;; This function uses a non-reentrant model
  3155 ;;
  3156                           
  3157                           	psect	text14
  3158  001154                     __ptext14:
  3159                           	opt stack 0
  3160  001154                     _handle_usb_transaction:
  3161                           	opt stack 19
  3162                           
  3163                           ;transceiver.c: 1157: if(USTAT == (0x00 << 3) | (0 << 2))
  3164                           
  3165                           ;incstack = 0
  3166  001154  5063               	movf	3939,w,c	;volatile
  3167  001156  A4D8               	btfss	status,2,c
  3168  001158  D003               	goto	i2l325
  3169                           
  3170                           ;transceiver.c: 1158: {
  3171                           ;transceiver.c: 1159: handle_usb_ctrl_output();
  3172  00115A  EC16  F007         	call	_handle_usb_ctrl_output	;wreg free
  3173                           
  3174                           ;transceiver.c: 1160: }
  3175  00115E  D011               	goto	i2l327
  3176  001160                     i2l325:
  3177                           
  3178                           ;transceiver.c: 1161: else
  3179                           ;transceiver.c: 1162: if(USTAT == (0x00 << 3) | (1 << 2))
  3180  001160  5063               	movf	3939,w,c	;volatile
  3181  001162  A4D8               	btfss	status,2,c
  3182  001164  D002               	goto	i2u194_40
  3183  001166  0E01               	movlw	1
  3184  001168  D001               	goto	i2u195_40
  3185  00116A                     i2u194_40:
  3186  00116A  0E00               	movlw	0
  3187  00116C                     i2u195_40:
  3188  00116C  6E20               	movwf	??_handle_usb_transaction& (0+255),c
  3189  00116E  6A21               	clrf	(??_handle_usb_transaction+1)& (0+255),c
  3190  001170  0E04               	movlw	4
  3191  001172  1220               	iorwf	??_handle_usb_transaction,f,c
  3192  001174  0E00               	movlw	0
  3193  001176  1221               	iorwf	??_handle_usb_transaction+1,f,c
  3194  001178  5020               	movf	??_handle_usb_transaction,w,c
  3195  00117A  1021               	iorwf	??_handle_usb_transaction+1,w,c
  3196  00117C  A4D8               	btfss	status,2,c
  3197                           
  3198                           ;transceiver.c: 1163: {
  3199                           ;transceiver.c: 1164: handle_usb_ctrl_input();
  3200  00117E  EC48  F007         	call	_handle_usb_ctrl_input	;wreg free
  3201  001182                     i2l327:
  3202                           
  3203                           ;transceiver.c: 1165: }
  3204                           ;transceiver.c: 1171: UIRbits.TRNIF = 0;
  3205  001182  9662               	bcf	3938,3,c	;volatile
  3206  001184  0012               	return		;funcret
  3207  001186                     __end_of_handle_usb_transaction:
  3208                           	opt stack 0
  3209                           pclatu	equ	0xFFB
  3210                           pclath	equ	0xFFA
  3211                           tblptru	equ	0xFF8
  3212                           tblptrh	equ	0xFF7
  3213                           tblptrl	equ	0xFF6
  3214                           tablat	equ	0xFF5
  3215                           prodh	equ	0xFF4
  3216                           prodl	equ	0xFF3
  3217                           intcon	equ	0xFF2
  3218                           postinc0	equ	0xFEE
  3219                           fsr0h	equ	0xFEA
  3220                           fsr0l	equ	0xFE9
  3221                           wreg	equ	0xFE8
  3222                           indf1	equ	0xFE7
  3223                           postdec1	equ	0xFE5
  3224                           fsr1h	equ	0xFE2
  3225                           fsr1l	equ	0xFE1
  3226                           bsr	equ	0xFE0
  3227                           indf2	equ	0xFDF
  3228                           postinc2	equ	0xFDE
  3229                           fsr2h	equ	0xFDA
  3230                           fsr2l	equ	0xFD9
  3231                           status	equ	0xFD8
  3232                           
  3233 ;; *************** function _handle_usb_ctrl_output *****************
  3234 ;; Defined at:
  3235 ;;		line 1058 in file "transceiver.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;		None
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;  temp            1   30[COMRAM] unsigned char 
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  1    wreg      void 
  3242 ;; Registers used:
  3243 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3249 ;;      Params:         0       0       0       0
  3250 ;;      Locals:         1       0       0       0
  3251 ;;      Temps:          0       0       0       0
  3252 ;;      Totals:         1       0       0       0
  3253 ;;Total ram usage:        1 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; Hardware stack levels required when called:    5
  3256 ;; This function calls:
  3257 ;;		_handle_usb_ctrl_out
  3258 ;;		_handle_usb_ctrl_setup
  3259 ;;		_usb_prepare_setup
  3260 ;;		i2_print_text
  3261 ;; This function is called by:
  3262 ;;		_handle_usb_transaction
  3263 ;; This function uses a non-reentrant model
  3264 ;;
  3265                           
  3266                           	psect	text15
  3267  000E2C                     __ptext15:
  3268                           	opt stack 0
  3269  000E2C                     _handle_usb_ctrl_output:
  3270                           	opt stack 19
  3271                           
  3272                           ;transceiver.c: 1060: uint8_t temp;
  3273                           ;transceiver.c: 1061: temp = *(EP0_OUT);
  3274                           
  3275                           ;incstack = 0
  3276  000E2C  C0B3  FFD9         	movff	_EP0_OUT,fsr2l
  3277  000E30  C0B4  FFDA         	movff	_EP0_OUT+1,fsr2h
  3278  000E34  50DF               	movf	indf2,w,c
  3279  000E36  6E1F               	movwf	handle_usb_ctrl_output@temp,c
  3280                           
  3281                           ;transceiver.c: 1062: temp &= 0b00111100;
  3282  000E38  0E3C               	movlw	60
  3283  000E3A  161F               	andwf	handle_usb_ctrl_output@temp,f,c
  3284                           
  3285                           ;transceiver.c: 1072: if(temp == (0b00001101 << 2))
  3286  000E3C  0E34               	movlw	52
  3287  000E3E  181F               	xorwf	handle_usb_ctrl_output@temp,w,c
  3288  000E40  A4D8               	btfss	status,2,c
  3289  000E42  D003               	goto	i2l307
  3290                           
  3291                           ;transceiver.c: 1073: {
  3292                           ;transceiver.c: 1075: handle_usb_ctrl_setup();
  3293  000E44  EC81  F001         	call	_handle_usb_ctrl_setup	;wreg free
  3294                           
  3295                           ;transceiver.c: 1076: }
  3296  000E48  0012               	return	
  3297  000E4A                     i2l307:
  3298                           
  3299                           ;transceiver.c: 1077: else
  3300                           ;transceiver.c: 1078: {
  3301                           ;transceiver.c: 1081: if(ctrl_trf_state == 2)
  3302  000E4A  0E02               	movlw	2
  3303  000E4C  1840               	xorwf	_ctrl_trf_state,w,c
  3304  000E4E  A4D8               	btfss	status,2,c
  3305  000E50  D01C               	goto	i2l309
  3306                           
  3307                           ;transceiver.c: 1082: {
  3308                           ;transceiver.c: 1083: print_text("ctrl_output 3\n");
  3309  000E52  0EE6               	movlw	low STR_7
  3310  000E54  6E02               	movwf	i2print_text@s,c
  3311  000E56  0E3F               	movlw	high STR_7
  3312  000E58  6E03               	movwf	i2print_text@s+1,c
  3313  000E5A  ECF4  F008         	call	i2_print_text	;wreg free
  3314                           
  3315                           ;transceiver.c: 1084: handle_usb_ctrl_out();
  3316  000E5E  ECD3  F005         	call	_handle_usb_ctrl_out	;wreg free
  3317                           
  3318                           ;transceiver.c: 1086: if(*(EP0_OUT) & (1 << 6))
  3319  000E62  C0B3  FFD9         	movff	_EP0_OUT,fsr2l
  3320  000E66  C0B4  FFDA         	movff	_EP0_OUT+1,fsr2h
  3321  000E6A  0100               	movlb	0	; () banked
  3322  000E6C  ACDF               	btfss	indf2,6,c
  3323  000E6E  D006               	goto	i2l310
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;transceiver.c: 1087: {
  3327                           ;transceiver.c: 1089: *(EP0_OUT) = (0x80 | 0x00 | 0x08);
  3328  000E70  C0B3  FFD9         	movff	_EP0_OUT,fsr2l
  3329  000E74  C0B4  FFDA         	movff	_EP0_OUT+1,fsr2h
  3330  000E78  0E88               	movlw	136
  3331  000E7A  6EDF               	movwf	indf2,c
  3332  000E7C                     i2l310:
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;transceiver.c: 1090: }
  3336                           ;transceiver.c: 1092: {
  3337                           ;transceiver.c: 1093: *(EP0_OUT) = (0x80 | 0x40 | 0x08);
  3338  000E7C  C0B3  FFD9         	movff	_EP0_OUT,fsr2l
  3339  000E80  C0B4  FFDA         	movff	_EP0_OUT+1,fsr2h
  3340  000E84  0EC8               	movlw	200
  3341  000E86  6EDF               	movwf	indf2,c
  3342                           
  3343                           ;transceiver.c: 1094: }
  3344                           ;transceiver.c: 1095: }
  3345  000E88  0012               	return	
  3346  000E8A                     i2l309:
  3347                           
  3348                           ;transceiver.c: 1096: else
  3349                           ;transceiver.c: 1097: {
  3350                           ;transceiver.c: 1099: usb_prepare_setup();
  3351                           
  3352                           ; BSR set to: 0
  3353  000E8A  ECA1  F007         	call	_usb_prepare_setup	;wreg free
  3354  000E8E  0012               	return	
  3355  000E90                     __end_of_handle_usb_ctrl_output:
  3356                           	opt stack 0
  3357                           pclatu	equ	0xFFB
  3358                           pclath	equ	0xFFA
  3359                           tblptru	equ	0xFF8
  3360                           tblptrh	equ	0xFF7
  3361                           tblptrl	equ	0xFF6
  3362                           tablat	equ	0xFF5
  3363                           prodh	equ	0xFF4
  3364                           prodl	equ	0xFF3
  3365                           intcon	equ	0xFF2
  3366                           postinc0	equ	0xFEE
  3367                           fsr0h	equ	0xFEA
  3368                           fsr0l	equ	0xFE9
  3369                           wreg	equ	0xFE8
  3370                           indf1	equ	0xFE7
  3371                           postdec1	equ	0xFE5
  3372                           fsr1h	equ	0xFE2
  3373                           fsr1l	equ	0xFE1
  3374                           bsr	equ	0xFE0
  3375                           indf2	equ	0xFDF
  3376                           postinc2	equ	0xFDE
  3377                           fsr2h	equ	0xFDA
  3378                           fsr2l	equ	0xFD9
  3379                           status	equ	0xFD8
  3380                           
  3381 ;; *************** function _handle_usb_ctrl_setup *****************
  3382 ;; Defined at:
  3383 ;;		line 905 in file "transceiver.c"
  3384 ;; Parameters:    Size  Location     Type
  3385 ;;		None
  3386 ;; Auto vars:     Size  Location     Type
  3387 ;;  length          2   27[COMRAM] unsigned int 
  3388 ;;  command         1   26[COMRAM] unsigned char 
  3389 ;;  length          2   24[COMRAM] unsigned int 
  3390 ;;  type            1   29[COMRAM] unsigned char 
  3391 ;; Return value:  Size  Location     Type
  3392 ;;                  1    wreg      void 
  3393 ;; Registers used:
  3394 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3395 ;; Tracked objects:
  3396 ;;		On entry : 0/0
  3397 ;;		On exit  : 0/0
  3398 ;;		Unchanged: 0/0
  3399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3400 ;;      Params:         0       0       0       0
  3401 ;;      Locals:         6       0       0       0
  3402 ;;      Temps:          5       0       0       0
  3403 ;;      Totals:        11       0       0       0
  3404 ;;Total ram usage:       11 bytes
  3405 ;; Hardware stack levels used:    1
  3406 ;; Hardware stack levels required when called:    4
  3407 ;; This function calls:
  3408 ;;		_handle_usb_ctrl_in
  3409 ;;		_usb_check_std_request
  3410 ;; This function is called by:
  3411 ;;		_handle_usb_ctrl_output
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414                           
  3415                           	psect	text16
  3416  000302                     __ptext16:
  3417                           	opt stack 0
  3418  000302                     _handle_usb_ctrl_setup:
  3419                           	opt stack 19
  3420                           
  3421                           ;transceiver.c: 907: ctrl_trf_state = 0;
  3422                           
  3423                           ;incstack = 0
  3424  000302  0E00               	movlw	0
  3425  000304  6E40               	movwf	_ctrl_trf_state,c
  3426                           
  3427                           ;transceiver.c: 908: ctrl_trf_session_owner = 0;
  3428  000306  0E00               	movlw	0
  3429  000308  6E3F               	movwf	_ctrl_trf_session_owner,c
  3430                           
  3431                           ;transceiver.c: 909: data_count = 0;
  3432  00030A  0E00               	movlw	0
  3433  00030C  6E38               	movwf	_data_count+1,c
  3434  00030E  0E00               	movlw	0
  3435  000310  6E37               	movwf	_data_count,c
  3436                           
  3437                           ;transceiver.c: 925: uint8_t type = setup_out_packet[0];
  3438  000312  C048  FFD9         	movff	_setup_out_packet,fsr2l
  3439  000316  C049  FFDA         	movff	_setup_out_packet+1,fsr2h
  3440  00031A  50DF               	movf	indf2,w,c
  3441  00031C  6E1E               	movwf	handle_usb_ctrl_setup@type,c
  3442                           
  3443                           ;transceiver.c: 926: type &= 0b01100000;
  3444  00031E  0E60               	movlw	96
  3445  000320  161E               	andwf	handle_usb_ctrl_setup@type,f,c
  3446                           
  3447                           ;transceiver.c: 932: if(type == 0x00)
  3448  000322  501E               	movf	handle_usb_ctrl_setup@type,w,c
  3449  000324  A4D8               	btfss	status,2,c
  3450  000326  D003               	goto	i2l285
  3451                           
  3452                           ;transceiver.c: 933: {
  3453                           ;transceiver.c: 934: usb_check_std_request();
  3454  000328  EC83  F002         	call	_usb_check_std_request	;wreg free
  3455                           
  3456                           ;transceiver.c: 935: }
  3457  00032C  D034               	goto	i2l292
  3458  00032E                     i2l285:
  3459                           
  3460                           ;transceiver.c: 936: else
  3461                           ;transceiver.c: 937: if(type == 0x20)
  3462  00032E  0E20               	movlw	32
  3463  000330  181E               	xorwf	handle_usb_ctrl_setup@type,w,c
  3464  000332  A4D8               	btfss	status,2,c
  3465  000334  D030               	goto	i2l292
  3466                           
  3467                           ;transceiver.c: 938: {
  3468                           ;transceiver.c: 940: uint16_t length = setup_out_packet[6] |
  3469                           ;transceiver.c: 941: (setup_out_packet[7] << 8);
  3470  000336  EE20 F007          	lfsr	2,7
  3471  00033A  5048               	movf	_setup_out_packet,w,c
  3472  00033C  26D9               	addwf	fsr2l,f,c
  3473  00033E  5049               	movf	_setup_out_packet+1,w,c
  3474  000340  22DA               	addwfc	fsr2h,f,c
  3475  000342  50DF               	movf	indf2,w,c
  3476  000344  6E14               	movwf	??_handle_usb_ctrl_setup& (0+255),c
  3477  000346  5014               	movf	??_handle_usb_ctrl_setup,w,c
  3478  000348  6E16               	movwf	(??_handle_usb_ctrl_setup+2)& (0+255),c
  3479  00034A  6A15               	clrf	(??_handle_usb_ctrl_setup+1)& (0+255),c
  3480  00034C  EE20 F006          	lfsr	2,6
  3481  000350  5048               	movf	_setup_out_packet,w,c
  3482  000352  26D9               	addwf	fsr2l,f,c
  3483  000354  5049               	movf	_setup_out_packet+1,w,c
  3484  000356  22DA               	addwfc	fsr2h,f,c
  3485  000358  50DF               	movf	indf2,w,c
  3486  00035A  6E17               	movwf	(??_handle_usb_ctrl_setup+3)& (0+255),c
  3487  00035C  6A18               	clrf	(??_handle_usb_ctrl_setup+4)& (0+255),c
  3488  00035E  5015               	movf	??_handle_usb_ctrl_setup+1,w,c
  3489  000360  1017               	iorwf	??_handle_usb_ctrl_setup+3,w,c
  3490  000362  6E19               	movwf	handle_usb_ctrl_setup@length,c
  3491  000364  5016               	movf	??_handle_usb_ctrl_setup+2,w,c
  3492  000366  1018               	iorwf	??_handle_usb_ctrl_setup+4,w,c
  3493  000368  6E1A               	movwf	handle_usb_ctrl_setup@length+1,c
  3494                           
  3495                           ;transceiver.c: 942: if(length > 0)
  3496  00036A  5019               	movf	handle_usb_ctrl_setup@length,w,c
  3497  00036C  101A               	iorwf	handle_usb_ctrl_setup@length+1,w,c
  3498  00036E  A4D8               	btfss	status,2,c
  3499  000370  D012               	goto	i2l292
  3500                           
  3501                           ;transceiver.c: 947: else
  3502                           ;transceiver.c: 948: {
  3503                           ;transceiver.c: 949: uint8_t command = setup_out_packet[1];
  3504                           
  3505                           ;transceiver.c: 943: {
  3506                           ;transceiver.c: 946: }
  3507  000372  EE20 F001          	lfsr	2,1
  3508  000376  5048               	movf	_setup_out_packet,w,c
  3509  000378  26D9               	addwf	fsr2l,f,c
  3510  00037A  5049               	movf	_setup_out_packet+1,w,c
  3511  00037C  22DA               	addwfc	fsr2h,f,c
  3512  00037E  50DF               	movf	indf2,w,c
  3513  000380  6E1B               	movwf	handle_usb_ctrl_setup@command,c
  3514                           
  3515                           ;transceiver.c: 970: }
  3516                           
  3517                           ;transceiver.c: 969: break;
  3518                           
  3519                           ;transceiver.c: 967: case 0x23U:
  3520                           
  3521                           ;transceiver.c: 966: break;
  3522                           
  3523                           ;transceiver.c: 964: case 0x22U:
  3524                           
  3525                           ;transceiver.c: 963: break;
  3526                           
  3527                           ;transceiver.c: 961: case 0x21U:
  3528                           
  3529                           ;transceiver.c: 960: break;
  3530                           
  3531                           ;transceiver.c: 957: {
  3532                           ;transceiver.c: 958: case 0x20U:
  3533                           
  3534                           ;transceiver.c: 956: switch(command)
  3535  000382  501B               	movf	handle_usb_ctrl_setup@command,w,c
  3536                           
  3537                           ; Switch size 1, requested type "space"
  3538                           ; Number of cases is 4, Range of values is 32 to 35
  3539                           ; switch strategies available:
  3540                           ; Name         Instructions Cycles
  3541                           ; simple_byte           13     7 (average)
  3542                           ;	Chosen strategy is simple_byte
  3543  000384  0A20               	xorlw	32	; case 32
  3544  000386  B4D8               	btfsc	status,2,c
  3545  000388  D006               	goto	i2l292
  3546  00038A  0A01               	xorlw	1	; case 33
  3547  00038C  B4D8               	btfsc	status,2,c
  3548  00038E  D003               	goto	i2l292
  3549  000390  0A03               	xorlw	3	; case 34
  3550  000392  A4D8               	btfss	status,2,c
  3551  000394  0A01               	xorlw	1	; case 35
  3552  000396                     i2l292:
  3553                           
  3554                           ;transceiver.c: 980: }
  3555                           ;transceiver.c: 981: }
  3556                           ;transceiver.c: 984: UCONbits.PKTDIS = 0;
  3557  000396  9864               	bcf	3940,4,c	;volatile
  3558                           
  3559                           ;transceiver.c: 986: if(ctrl_trf_session_owner == 0)
  3560  000398  503F               	movf	_ctrl_trf_session_owner,w,c
  3561  00039A  A4D8               	btfss	status,2,c
  3562  00039C  D026               	goto	i2l296
  3563                           
  3564                           ;transceiver.c: 987: {
  3565                           ;transceiver.c: 991: *(EP0_OUT + 1) = (8); *(EP0_OUT + 2) = ((uint16_t)(setup_out_packet
      +                          ) & 0xff); *(EP0_OUT + 3) = ((uint16_t)(setup_out_packet) >> 8); *(EP0_OUT) = (0x80 | 0x
      +                          04);;
  3566  00039E  0100               	movlb	0	; () banked
  3567  0003A0  EE20 F001          	lfsr	2,1
  3568  0003A4  51B3               	movf	_EP0_OUT& (0+255),w,b
  3569  0003A6  26D9               	addwf	fsr2l,f,c
  3570  0003A8  51B4               	movf	(_EP0_OUT+1)& (0+255),w,b
  3571  0003AA  22DA               	addwfc	fsr2h,f,c
  3572  0003AC  0E08               	movlw	8
  3573  0003AE  6EDF               	movwf	indf2,c
  3574  0003B0  EE20 F002          	lfsr	2,2
  3575  0003B4  51B3               	movf	_EP0_OUT& (0+255),w,b
  3576  0003B6  26D9               	addwf	fsr2l,f,c
  3577  0003B8  51B4               	movf	(_EP0_OUT+1)& (0+255),w,b
  3578  0003BA  22DA               	addwfc	fsr2h,f,c
  3579  0003BC  C048  FFDF         	movff	_setup_out_packet,indf2
  3580  0003C0  EE20 F003          	lfsr	2,3
  3581  0003C4  51B3               	movf	_EP0_OUT& (0+255),w,b
  3582  0003C6  26D9               	addwf	fsr2l,f,c
  3583  0003C8  51B4               	movf	(_EP0_OUT+1)& (0+255),w,b
  3584  0003CA  22DA               	addwfc	fsr2h,f,c
  3585  0003CC  5049               	movf	_setup_out_packet+1,w,c
  3586  0003CE  6EDF               	movwf	indf2,c
  3587                           
  3588                           ; BSR set to: 0
  3589  0003D0  C0B3  FFD9         	movff	_EP0_OUT,fsr2l
  3590  0003D4  C0B4  FFDA         	movff	_EP0_OUT+1,fsr2h
  3591  0003D8  0E84               	movlw	132
  3592  0003DA  6EDF               	movwf	indf2,c
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;transceiver.c: 992: *(EP0_IN) = (0x80 | 0x04);;
  3596  0003DC  C04C  FFD9         	movff	_EP0_IN,fsr2l
  3597  0003E0  C04D  FFDA         	movff	_EP0_IN+1,fsr2h
  3598  0003E4  0E84               	movlw	132
  3599  0003E6  6EDF               	movwf	indf2,c
  3600                           
  3601                           ; BSR set to: 0
  3602                           ;transceiver.c: 994: }
  3603                           
  3604                           ; BSR set to: 0
  3605                           ;transceiver.c: 993: return;
  3606  0003E8  0012               	return	
  3607  0003EA                     i2l296:
  3608                           
  3609                           ;transceiver.c: 995: else
  3610                           ;transceiver.c: 996: {
  3611                           ;transceiver.c: 999: if(setup_out_packet[0] & (1 << 7))
  3612                           
  3613                           ; BSR set to: 0
  3614  0003EA  C048  FFD9         	movff	_setup_out_packet,fsr2l
  3615  0003EE  C049  FFDA         	movff	_setup_out_packet+1,fsr2h
  3616  0003F2  AEDF               	btfss	indf2,7,c
  3617  0003F4  D058               	goto	i2l299
  3618                           
  3619                           ;transceiver.c: 1000: {
  3620                           ;transceiver.c: 1004: uint16_t length = setup_out_packet[6] |
  3621                           ;transceiver.c: 1005: (((uint16_t)setup_out_packet[7]) << 8);
  3622  0003F6  EE20 F006          	lfsr	2,6
  3623  0003FA  5048               	movf	_setup_out_packet,w,c
  3624  0003FC  26D9               	addwf	fsr2l,f,c
  3625  0003FE  5049               	movf	_setup_out_packet+1,w,c
  3626  000400  22DA               	addwfc	fsr2h,f,c
  3627  000402  50DF               	movf	indf2,w,c
  3628  000404  6E14               	movwf	??_handle_usb_ctrl_setup& (0+255),c
  3629  000406  EE20 F007          	lfsr	2,7
  3630  00040A  5048               	movf	_setup_out_packet,w,c
  3631  00040C  26D9               	addwf	fsr2l,f,c
  3632  00040E  5049               	movf	_setup_out_packet+1,w,c
  3633  000410  22DA               	addwfc	fsr2h,f,c
  3634  000412  50DF               	movf	indf2,w,c
  3635  000414  6E15               	movwf	(??_handle_usb_ctrl_setup+1)& (0+255),c
  3636  000416  5014               	movf	??_handle_usb_ctrl_setup,w,c
  3637  000418  6E1C               	movwf	handle_usb_ctrl_setup@length_840,c
  3638  00041A  C015  F01D         	movff	??_handle_usb_ctrl_setup+1,handle_usb_ctrl_setup@length_840+1
  3639                           
  3640                           ;transceiver.c: 1006: if(length < data_count)
  3641  00041E  5037               	movf	_data_count,w,c
  3642  000420  5C1C               	subwf	handle_usb_ctrl_setup@length_840,w,c
  3643  000422  5038               	movf	_data_count+1,w,c
  3644  000424  581D               	subwfb	handle_usb_ctrl_setup@length_840+1,w,c
  3645  000426  B0D8               	btfsc	status,0,c
  3646  000428  D004               	goto	i2l300
  3647                           
  3648                           ;transceiver.c: 1007: {
  3649                           ;transceiver.c: 1008: data_count = length;
  3650  00042A  C01C  F037         	movff	handle_usb_ctrl_setup@length_840,_data_count
  3651  00042E  C01D  F038         	movff	handle_usb_ctrl_setup@length_840+1,_data_count+1
  3652  000432                     i2l300:
  3653                           
  3654                           ;transceiver.c: 1009: }
  3655                           ;transceiver.c: 1011: handle_usb_ctrl_in();
  3656  000432  EC87  F006         	call	_handle_usb_ctrl_in	;wreg free
  3657                           
  3658                           ;transceiver.c: 1012: ctrl_trf_state = 1;
  3659  000436  0E01               	movlw	1
  3660  000438  6E40               	movwf	_ctrl_trf_state,c
  3661                           
  3662                           ;transceiver.c: 1014: *(EP0_OUT + 1) = (8); *(EP0_OUT + 2) = ((uint16_t)(setup_out_packe
      +                          t) & 0xff); *(EP0_OUT + 3) = ((uint16_t)(setup_out_packet) >> 8); *(EP0_OUT) = (0x80);;
  3663  00043A  0100               	movlb	0	; () banked
  3664  00043C  EE20 F001          	lfsr	2,1
  3665  000440  51B3               	movf	_EP0_OUT& (0+255),w,b
  3666  000442  26D9               	addwf	fsr2l,f,c
  3667  000444  51B4               	movf	(_EP0_OUT+1)& (0+255),w,b
  3668  000446  22DA               	addwfc	fsr2h,f,c
  3669  000448  0E08               	movlw	8
  3670  00044A  6EDF               	movwf	indf2,c
  3671                           
  3672                           ; BSR set to: 0
  3673  00044C  EE20 F002          	lfsr	2,2
  3674  000450  51B3               	movf	_EP0_OUT& (0+255),w,b
  3675  000452  26D9               	addwf	fsr2l,f,c
  3676  000454  51B4               	movf	(_EP0_OUT+1)& (0+255),w,b
  3677  000456  22DA               	addwfc	fsr2h,f,c
  3678  000458  C048  FFDF         	movff	_setup_out_packet,indf2
  3679                           
  3680                           ; BSR set to: 0
  3681  00045C  EE20 F003          	lfsr	2,3
  3682  000460  51B3               	movf	_EP0_OUT& (0+255),w,b
  3683  000462  26D9               	addwf	fsr2l,f,c
  3684  000464  51B4               	movf	(_EP0_OUT+1)& (0+255),w,b
  3685  000466  22DA               	addwfc	fsr2h,f,c
  3686  000468  5049               	movf	_setup_out_packet+1,w,c
  3687  00046A  6EDF               	movwf	indf2,c
  3688                           
  3689                           ; BSR set to: 0
  3690  00046C  C0B3  FFD9         	movff	_EP0_OUT,fsr2l
  3691  000470  C0B4  FFDA         	movff	_EP0_OUT+1,fsr2h
  3692  000474  0E80               	movlw	128
  3693  000476  6EDF               	movwf	indf2,c
  3694                           
  3695                           ; BSR set to: 0
  3696                           ;transceiver.c: 1016: *(EP0_IN + 2) = ((uint16_t)(setup_in_packet) & 0xff); *(EP0_IN + 3
      +                          ) = ((uint16_t)(setup_in_packet) >> 8);;
  3697  000478  EE20 F002          	lfsr	2,2
  3698  00047C  504C               	movf	_EP0_IN,w,c
  3699  00047E  26D9               	addwf	fsr2l,f,c
  3700  000480  504D               	movf	_EP0_IN+1,w,c
  3701  000482  22DA               	addwfc	fsr2h,f,c
  3702  000484  C046  FFDF         	movff	_setup_in_packet,indf2
  3703                           
  3704                           ; BSR set to: 0
  3705  000488  EE20 F003          	lfsr	2,3
  3706  00048C  504C               	movf	_EP0_IN,w,c
  3707  00048E  26D9               	addwf	fsr2l,f,c
  3708  000490  504D               	movf	_EP0_IN+1,w,c
  3709  000492  22DA               	addwfc	fsr2h,f,c
  3710  000494  5047               	movf	_setup_in_packet+1,w,c
  3711  000496  6EDF               	movwf	indf2,c
  3712                           
  3713                           ; BSR set to: 0
  3714                           ;transceiver.c: 1017: *(EP0_IN) = (0x80 | 0x40 | 0x08);;
  3715  000498  C04C  FFD9         	movff	_EP0_IN,fsr2l
  3716  00049C  C04D  FFDA         	movff	_EP0_IN+1,fsr2h
  3717  0004A0  0EC8               	movlw	200
  3718  0004A2  6EDF               	movwf	indf2,c
  3719                           
  3720                           ; BSR set to: 0
  3721                           ;transceiver.c: 1021: }
  3722                           
  3723                           ; BSR set to: 0
  3724                           ;transceiver.c: 1018: return;
  3725  0004A4  0012               	return	
  3726  0004A6                     i2l299:
  3727                           
  3728                           ;transceiver.c: 1022: else
  3729                           ;transceiver.c: 1023: {
  3730                           ;transceiver.c: 1025: ctrl_trf_state = 2;
  3731                           
  3732                           ; BSR set to: 0
  3733  0004A6  0E02               	movlw	2
  3734  0004A8  6E40               	movwf	_ctrl_trf_state,c
  3735                           
  3736                           ;transceiver.c: 1026: *(EP0_IN + 1) = (0);;
  3737  0004AA  EE20 F001          	lfsr	2,1
  3738  0004AE  504C               	movf	_EP0_IN,w,c
  3739  0004B0  26D9               	addwf	fsr2l,f,c
  3740  0004B2  504D               	movf	_EP0_IN+1,w,c
  3741  0004B4  22DA               	addwfc	fsr2h,f,c
  3742  0004B6  0E00               	movlw	0
  3743  0004B8  6EDF               	movwf	indf2,c
  3744                           
  3745                           ;transceiver.c: 1027: *(EP0_IN) = (0x80 | 0x40 | 0x08);;
  3746  0004BA  C04C  FFD9         	movff	_EP0_IN,fsr2l
  3747  0004BE  C04D  FFDA         	movff	_EP0_IN+1,fsr2h
  3748  0004C2  0EC8               	movlw	200
  3749  0004C4  6EDF               	movwf	indf2,c
  3750                           
  3751                           ;transceiver.c: 1029: *(EP0_OUT + 1) = (8); *(EP0_OUT + 2) = ((uint16_t)(setup_in_packet
      +                          ) & 0xff); *(EP0_OUT + 3) = ((uint16_t)(setup_in_packet) >> 8); *(EP0_OUT) = (0x80 | 0x4
      +                          0 | 0x08);;
  3752  0004C6  0100               	movlb	0	; () banked
  3753  0004C8  EE20 F001          	lfsr	2,1
  3754  0004CC  51B3               	movf	_EP0_OUT& (0+255),w,b
  3755  0004CE  26D9               	addwf	fsr2l,f,c
  3756  0004D0  51B4               	movf	(_EP0_OUT+1)& (0+255),w,b
  3757  0004D2  22DA               	addwfc	fsr2h,f,c
  3758  0004D4  0E08               	movlw	8
  3759  0004D6  6EDF               	movwf	indf2,c
  3760                           
  3761                           ; BSR set to: 0
  3762  0004D8  EE20 F002          	lfsr	2,2
  3763  0004DC  51B3               	movf	_EP0_OUT& (0+255),w,b
  3764  0004DE  26D9               	addwf	fsr2l,f,c
  3765  0004E0  51B4               	movf	(_EP0_OUT+1)& (0+255),w,b
  3766  0004E2  22DA               	addwfc	fsr2h,f,c
  3767  0004E4  C046  FFDF         	movff	_setup_in_packet,indf2
  3768                           
  3769                           ; BSR set to: 0
  3770  0004E8  EE20 F003          	lfsr	2,3
  3771  0004EC  51B3               	movf	_EP0_OUT& (0+255),w,b
  3772  0004EE  26D9               	addwf	fsr2l,f,c
  3773  0004F0  51B4               	movf	(_EP0_OUT+1)& (0+255),w,b
  3774  0004F2  22DA               	addwfc	fsr2h,f,c
  3775  0004F4  5047               	movf	_setup_in_packet+1,w,c
  3776  0004F6  6EDF               	movwf	indf2,c
  3777                           
  3778                           ; BSR set to: 0
  3779  0004F8  C0B3  FFD9         	movff	_EP0_OUT,fsr2l
  3780  0004FC  C0B4  FFDA         	movff	_EP0_OUT+1,fsr2h
  3781  000500  0EC8               	movlw	200
  3782  000502  6EDF               	movwf	indf2,c
  3783                           
  3784                           ; BSR set to: 0
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;transceiver.c: 1030: return;
  3788  000504  0012               	return	
  3789  000506                     __end_of_handle_usb_ctrl_setup:
  3790                           	opt stack 0
  3791                           pclatu	equ	0xFFB
  3792                           pclath	equ	0xFFA
  3793                           tblptru	equ	0xFF8
  3794                           tblptrh	equ	0xFF7
  3795                           tblptrl	equ	0xFF6
  3796                           tablat	equ	0xFF5
  3797                           prodh	equ	0xFF4
  3798                           prodl	equ	0xFF3
  3799                           intcon	equ	0xFF2
  3800                           postinc0	equ	0xFEE
  3801                           fsr0h	equ	0xFEA
  3802                           fsr0l	equ	0xFE9
  3803                           wreg	equ	0xFE8
  3804                           indf1	equ	0xFE7
  3805                           postdec1	equ	0xFE5
  3806                           fsr1h	equ	0xFE2
  3807                           fsr1l	equ	0xFE1
  3808                           bsr	equ	0xFE0
  3809                           indf2	equ	0xFDF
  3810                           postinc2	equ	0xFDE
  3811                           fsr2h	equ	0xFDA
  3812                           fsr2l	equ	0xFD9
  3813                           status	equ	0xFD8
  3814                           
  3815 ;; *************** function _usb_check_std_request *****************
  3816 ;; Defined at:
  3817 ;;		line 745 in file "transceiver.c"
  3818 ;; Parameters:    Size  Location     Type
  3819 ;;		None
  3820 ;; Auto vars:     Size  Location     Type
  3821 ;;  index           1   16[COMRAM] unsigned char 
  3822 ;;  type            1   18[COMRAM] unsigned char 
  3823 ;;  request         1   17[COMRAM] unsigned char 
  3824 ;; Return value:  Size  Location     Type
  3825 ;;                  1    wreg      void 
  3826 ;; Registers used:
  3827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3828 ;; Tracked objects:
  3829 ;;		On entry : 0/0
  3830 ;;		On exit  : 0/0
  3831 ;;		Unchanged: 0/0
  3832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3833 ;;      Params:         0       0       0       0
  3834 ;;      Locals:         3       0       0       0
  3835 ;;      Temps:          0       0       0       0
  3836 ;;      Totals:         3       0       0       0
  3837 ;;Total ram usage:        3 bytes
  3838 ;; Hardware stack levels used:    1
  3839 ;; Hardware stack levels required when called:    3
  3840 ;; This function calls:
  3841 ;;		_print_number
  3842 ;;		_user_endpoint_init
  3843 ;;		i2_flush_uart
  3844 ;;		i2_print_text
  3845 ;; This function is called by:
  3846 ;;		_handle_usb_ctrl_setup
  3847 ;; This function uses a non-reentrant model
  3848 ;;
  3849                           
  3850                           	psect	text17
  3851  000506                     __ptext17:
  3852                           	opt stack 0
  3853  000506                     _usb_check_std_request:
  3854                           	opt stack 19
  3855                           
  3856                           ;transceiver.c: 750: uint8_t request = setup_out_packet[1];
  3857                           
  3858                           ; BSR set to: 0
  3859                           ;incstack = 0
  3860  000506  EE20 F001          	lfsr	2,1
  3861  00050A  5048               	movf	_setup_out_packet,w,c
  3862  00050C  26D9               	addwf	fsr2l,f,c
  3863  00050E  5049               	movf	_setup_out_packet+1,w,c
  3864  000510  22DA               	addwfc	fsr2h,f,c
  3865  000512  50DF               	movf	indf2,w,c
  3866  000514  6E12               	movwf	usb_check_std_request@request,c
  3867                           
  3868                           ;transceiver.c: 757: if(request == 0x05)
  3869  000516  0E05               	movlw	5
  3870  000518  1812               	xorwf	usb_check_std_request@request,w,c
  3871  00051A  A4D8               	btfss	status,2,c
  3872  00051C  D005               	goto	i2l253
  3873                           
  3874                           ;transceiver.c: 758: {
  3875                           ;transceiver.c: 759: ctrl_trf_session_owner = 1;
  3876  00051E  0E01               	movlw	1
  3877  000520  6E3F               	movwf	_ctrl_trf_session_owner,c
  3878                           
  3879                           ;transceiver.c: 760: usb_state = 4;
  3880  000522  0E04               	movlw	4
  3881  000524  6E41               	movwf	_usb_state,c
  3882                           
  3883                           ;transceiver.c: 762: }
  3884                           
  3885                           ;transceiver.c: 761: return;
  3886  000526  0012               	return	
  3887  000528                     i2l253:
  3888                           
  3889                           ;transceiver.c: 763: else
  3890                           ;transceiver.c: 764: if(request == 0x06)
  3891  000528  0E06               	movlw	6
  3892  00052A  1812               	xorwf	usb_check_std_request@request,w,c
  3893  00052C  A4D8               	btfss	status,2,c
  3894  00052E  D090               	goto	i2l256
  3895                           
  3896                           ;transceiver.c: 765: {
  3897                           ;transceiver.c: 766: ctrl_trf_session_owner = 1;
  3898  000530  0E01               	movlw	1
  3899  000532  6E3F               	movwf	_ctrl_trf_session_owner,c
  3900                           
  3901                           ;transceiver.c: 768: uint8_t type = setup_out_packet[3];
  3902  000534  EE20 F003          	lfsr	2,3
  3903  000538  5048               	movf	_setup_out_packet,w,c
  3904  00053A  26D9               	addwf	fsr2l,f,c
  3905  00053C  5049               	movf	_setup_out_packet+1,w,c
  3906  00053E  22DA               	addwfc	fsr2h,f,c
  3907  000540  50DF               	movf	indf2,w,c
  3908  000542  6E13               	movwf	usb_check_std_request@type,c
  3909                           
  3910                           ;transceiver.c: 770: if(type == 0x01)
  3911  000544  0413               	decf	usb_check_std_request@type,w,c
  3912  000546  A4D8               	btfss	status,2,c
  3913  000548  D00E               	goto	i2l257
  3914                           
  3915                           ;transceiver.c: 771: {
  3916                           ;transceiver.c: 772: data_ptr = usb_descriptor;
  3917  00054A  0E7F               	movlw	low _usb_descriptor
  3918  00054C  6E34               	movwf	_data_ptr,c
  3919  00054E  0E3F               	movlw	high _usb_descriptor
  3920  000550  6E35               	movwf	_data_ptr+1,c
  3921  000552  5034               	movf	_data_ptr,w,c
  3922  000554  1035               	iorwf	_data_ptr+1,w,c
  3923  000556  A4D8               	btfss	status,2,c
  3924  000558  0E00               	movlw	low (__mediumconst shr (0+16))
  3925  00055A  6E36               	movwf	_data_ptr+2,c
  3926                           
  3927                           ;transceiver.c: 773: data_count = sizeof(usb_descriptor);
  3928  00055C  0E00               	movlw	0
  3929  00055E  6E38               	movwf	_data_count+1,c
  3930  000560  0E12               	movlw	18
  3931  000562  6E37               	movwf	_data_count,c
  3932                           
  3933                           ;transceiver.c: 775: }
  3934                           
  3935                           ;transceiver.c: 774: return;
  3936  000564  0012               	return	
  3937  000566                     i2l257:
  3938                           
  3939                           ;transceiver.c: 776: else
  3940                           ;transceiver.c: 777: if(type == 0x02)
  3941  000566  0E02               	movlw	2
  3942  000568  1813               	xorwf	usb_check_std_request@type,w,c
  3943  00056A  A4D8               	btfss	status,2,c
  3944  00056C  D00E               	goto	i2l259
  3945                           
  3946                           ;transceiver.c: 778: {
  3947                           ;transceiver.c: 779: data_ptr = usb_config1;
  3948  00056E  0E03               	movlw	low _usb_config1
  3949  000570  6E34               	movwf	_data_ptr,c
  3950  000572  0E3F               	movlw	high _usb_config1
  3951  000574  6E35               	movwf	_data_ptr+1,c
  3952  000576  5034               	movf	_data_ptr,w,c
  3953  000578  1035               	iorwf	_data_ptr+1,w,c
  3954  00057A  A4D8               	btfss	status,2,c
  3955  00057C  0E00               	movlw	low (__mediumconst shr (0+16))
  3956  00057E  6E36               	movwf	_data_ptr+2,c
  3957                           
  3958                           ;transceiver.c: 780: data_count = sizeof(usb_config1);
  3959  000580  0E00               	movlw	0
  3960  000582  6E38               	movwf	_data_count+1,c
  3961  000584  0E46               	movlw	70
  3962  000586  6E37               	movwf	_data_count,c
  3963                           
  3964                           ;transceiver.c: 782: }
  3965                           
  3966                           ;transceiver.c: 781: return;
  3967  000588  0012               	return	
  3968  00058A                     i2l259:
  3969                           
  3970                           ;transceiver.c: 783: else
  3971                           ;transceiver.c: 784: if(type == 0x03)
  3972  00058A  0E03               	movlw	3
  3973  00058C  1813               	xorwf	usb_check_std_request@type,w,c
  3974  00058E  A4D8               	btfss	status,2,c
  3975  000590  D039               	goto	i2l261
  3976                           
  3977                           ;transceiver.c: 785: {
  3978                           ;transceiver.c: 788: uint8_t index = setup_out_packet[2];
  3979  000592  EE20 F002          	lfsr	2,2
  3980  000596  5048               	movf	_setup_out_packet,w,c
  3981  000598  26D9               	addwf	fsr2l,f,c
  3982  00059A  5049               	movf	_setup_out_packet+1,w,c
  3983  00059C  22DA               	addwfc	fsr2h,f,c
  3984  00059E  50DF               	movf	indf2,w,c
  3985  0005A0  6E11               	movwf	usb_check_std_request@index,c
  3986                           
  3987                           ;transceiver.c: 793: if(index == 2)
  3988  0005A2  0E02               	movlw	2
  3989  0005A4  1811               	xorwf	usb_check_std_request@index,w,c
  3990  0005A6  A4D8               	btfss	status,2,c
  3991  0005A8  D00E               	goto	i2l262
  3992                           
  3993                           ;transceiver.c: 794: {
  3994                           ;transceiver.c: 796: data_ptr = sd002;
  3995  0005AA  0E49               	movlw	low _sd002
  3996  0005AC  6E34               	movwf	_data_ptr,c
  3997  0005AE  0E3F               	movlw	high _sd002
  3998  0005B0  6E35               	movwf	_data_ptr+1,c
  3999  0005B2  5034               	movf	_data_ptr,w,c
  4000  0005B4  1035               	iorwf	_data_ptr+1,w,c
  4001  0005B6  A4D8               	btfss	status,2,c
  4002  0005B8  0E00               	movlw	low (__mediumconst shr (0+16))
  4003  0005BA  6E36               	movwf	_data_ptr+2,c
  4004                           
  4005                           ;transceiver.c: 797: data_count = sizeof(sd002);
  4006  0005BC  0E00               	movlw	0
  4007  0005BE  6E38               	movwf	_data_count+1,c
  4008  0005C0  0E20               	movlw	32
  4009  0005C2  6E37               	movwf	_data_count,c
  4010                           
  4011                           ;transceiver.c: 799: }
  4012                           
  4013                           ;transceiver.c: 798: return;
  4014  0005C4  0012               	return	
  4015  0005C6                     i2l262:
  4016                           
  4017                           ;transceiver.c: 800: else
  4018                           ;transceiver.c: 801: if(index == 1)
  4019  0005C6  0411               	decf	usb_check_std_request@index,w,c
  4020  0005C8  A4D8               	btfss	status,2,c
  4021  0005CA  D00E               	goto	i2l264
  4022                           
  4023                           ;transceiver.c: 802: {
  4024                           ;transceiver.c: 804: data_ptr = sd001;
  4025  0005CC  0E69               	movlw	low _sd001
  4026  0005CE  6E34               	movwf	_data_ptr,c
  4027  0005D0  0E3F               	movlw	high _sd001
  4028  0005D2  6E35               	movwf	_data_ptr+1,c
  4029  0005D4  5034               	movf	_data_ptr,w,c
  4030  0005D6  1035               	iorwf	_data_ptr+1,w,c
  4031  0005D8  A4D8               	btfss	status,2,c
  4032  0005DA  0E00               	movlw	low (__mediumconst shr (0+16))
  4033  0005DC  6E36               	movwf	_data_ptr+2,c
  4034                           
  4035                           ;transceiver.c: 805: data_count = sizeof(sd001);
  4036  0005DE  0E00               	movlw	0
  4037  0005E0  6E38               	movwf	_data_count+1,c
  4038  0005E2  0E16               	movlw	22
  4039  0005E4  6E37               	movwf	_data_count,c
  4040                           
  4041                           ;transceiver.c: 807: }
  4042                           
  4043                           ;transceiver.c: 806: return;
  4044  0005E6  0012               	return	
  4045  0005E8                     i2l264:
  4046                           
  4047                           ;transceiver.c: 808: else
  4048                           ;transceiver.c: 809: {
  4049                           ;transceiver.c: 811: data_ptr = sd000;
  4050  0005E8  0E9B               	movlw	low _sd000
  4051  0005EA  6E34               	movwf	_data_ptr,c
  4052  0005EC  0E3F               	movlw	high _sd000
  4053  0005EE  6E35               	movwf	_data_ptr+1,c
  4054  0005F0  5034               	movf	_data_ptr,w,c
  4055  0005F2  1035               	iorwf	_data_ptr+1,w,c
  4056  0005F4  A4D8               	btfss	status,2,c
  4057  0005F6  0E00               	movlw	low (__mediumconst shr (0+16))
  4058  0005F8  6E36               	movwf	_data_ptr+2,c
  4059                           
  4060                           ;transceiver.c: 812: data_count = sizeof(sd000);
  4061  0005FA  0E00               	movlw	0
  4062  0005FC  6E38               	movwf	_data_count+1,c
  4063  0005FE  0E04               	movlw	4
  4064  000600  6E37               	movwf	_data_count,c
  4065                           
  4066                           ;transceiver.c: 814: }
  4067                           ;transceiver.c: 815: }
  4068                           
  4069                           ;transceiver.c: 813: return;
  4070  000602  0012               	return	
  4071  000604                     i2l261:
  4072                           
  4073                           ;transceiver.c: 816: else
  4074                           ;transceiver.c: 817: if(type == 0x06)
  4075  000604  0E06               	movlw	6
  4076  000606  1813               	xorwf	usb_check_std_request@type,w,c
  4077  000608  A4D8               	btfss	status,2,c
  4078  00060A  D00E               	goto	i2l267
  4079                           
  4080                           ;transceiver.c: 818: {
  4081                           ;transceiver.c: 819: data_ptr = qual_descriptor;
  4082  00060C  0E91               	movlw	low _qual_descriptor
  4083  00060E  6E34               	movwf	_data_ptr,c
  4084  000610  0E3F               	movlw	high _qual_descriptor
  4085  000612  6E35               	movwf	_data_ptr+1,c
  4086  000614  5034               	movf	_data_ptr,w,c
  4087  000616  1035               	iorwf	_data_ptr+1,w,c
  4088  000618  A4D8               	btfss	status,2,c
  4089  00061A  0E00               	movlw	low (__mediumconst shr (0+16))
  4090  00061C  6E36               	movwf	_data_ptr+2,c
  4091                           
  4092                           ;transceiver.c: 820: data_count = sizeof(qual_descriptor);
  4093  00061E  0E00               	movlw	0
  4094  000620  6E38               	movwf	_data_count+1,c
  4095  000622  0E0A               	movlw	10
  4096  000624  6E37               	movwf	_data_count,c
  4097                           
  4098                           ;transceiver.c: 822: }
  4099                           
  4100                           ;transceiver.c: 821: return;
  4101  000626  0012               	return	
  4102  000628                     i2l267:
  4103                           
  4104                           ;transceiver.c: 823: else
  4105                           ;transceiver.c: 824: {
  4106                           ;transceiver.c: 826: print_text("unknown descriptor type: ");
  4107  000628  0EBB               	movlw	low STR_1
  4108  00062A  6E02               	movwf	i2print_text@s,c
  4109  00062C  0E3F               	movlw	high STR_1
  4110  00062E  6E03               	movwf	i2print_text@s+1,c
  4111  000630  ECF4  F008         	call	i2_print_text	;wreg free
  4112                           
  4113                           ;transceiver.c: 827: print_number(type);
  4114  000634  C013  F00F         	movff	usb_check_std_request@type,print_number@number
  4115  000638  6A10               	clrf	print_number@number+1,c
  4116  00063A  EC60  F009         	call	_print_number	;wreg free
  4117                           
  4118                           ;transceiver.c: 828: print_text("\n");
  4119  00063E  0EF3               	movlw	low (STR_7+13)
  4120  000640  6E02               	movwf	i2print_text@s,c
  4121  000642  0E3F               	movlw	high (STR_7+13)
  4122  000644  6E03               	movwf	i2print_text@s+1,c
  4123  000646  ECF4  F008         	call	i2_print_text	;wreg free
  4124                           
  4125                           ;transceiver.c: 829: ctrl_trf_session_owner = 0;
  4126  00064A  0E00               	movlw	0
  4127  00064C  6E3F               	movwf	_ctrl_trf_session_owner,c
  4128                           
  4129                           ;transceiver.c: 831: }
  4130                           ;transceiver.c: 832: }
  4131                           
  4132                           ;transceiver.c: 830: return;
  4133  00064E  0012               	return	
  4134  000650                     i2l256:
  4135                           
  4136                           ;transceiver.c: 833: else
  4137                           ;transceiver.c: 834: if(request == 0x09)
  4138  000650  0E09               	movlw	9
  4139  000652  1812               	xorwf	usb_check_std_request@request,w,c
  4140  000654  A4D8               	btfss	status,2,c
  4141  000656  D015               	goto	i2l270
  4142                           
  4143                           ;transceiver.c: 835: {
  4144                           ;transceiver.c: 840: ctrl_trf_session_owner = 1;
  4145  000658  0E01               	movlw	1
  4146  00065A  6E3F               	movwf	_ctrl_trf_session_owner,c
  4147                           
  4148                           ;transceiver.c: 842: usb_config = setup_out_packet[2];
  4149  00065C  EE20 F002          	lfsr	2,2
  4150  000660  5048               	movf	_setup_out_packet,w,c
  4151  000662  26D9               	addwf	fsr2l,f,c
  4152  000664  5049               	movf	_setup_out_packet+1,w,c
  4153  000666  22DA               	addwfc	fsr2h,f,c
  4154  000668  50DF               	movf	indf2,w,c
  4155  00066A  6E43               	movwf	_usb_config,c
  4156                           
  4157                           ;transceiver.c: 843: if(usb_config == 0)
  4158  00066C  5043               	movf	_usb_config,w,c
  4159  00066E  A4D8               	btfss	status,2,c
  4160  000670  D003               	goto	i2l271
  4161                           
  4162                           ;transceiver.c: 844: {
  4163                           ;transceiver.c: 845: usb_state = 5;
  4164  000672  0E05               	movlw	5
  4165  000674  6E41               	movwf	_usb_state,c
  4166                           
  4167                           ;transceiver.c: 847: }
  4168                           
  4169                           ;transceiver.c: 846: return;
  4170  000676  0012               	return	
  4171  000678                     i2l271:
  4172                           
  4173                           ;transceiver.c: 848: else
  4174                           ;transceiver.c: 849: {
  4175                           ;transceiver.c: 850: usb_state = 6;
  4176  000678  0E06               	movlw	6
  4177  00067A  6E41               	movwf	_usb_state,c
  4178                           
  4179                           ;transceiver.c: 853: user_endpoint_init();
  4180  00067C  EC6A  F005         	call	_user_endpoint_init	;wreg free
  4181                           
  4182                           ;transceiver.c: 857: }
  4183                           ;transceiver.c: 858: }
  4184                           
  4185                           ;transceiver.c: 856: return;
  4186  000680  0012               	return	
  4187  000682                     i2l270:
  4188                           
  4189                           ;transceiver.c: 859: else
  4190                           ;transceiver.c: 860: if(request == 0x08)
  4191  000682  0E08               	movlw	8
  4192  000684  1812               	xorwf	usb_check_std_request@request,w,c
  4193  000686  A4D8               	btfss	status,2,c
  4194  000688  D010               	goto	i2l274
  4195                           
  4196                           ;transceiver.c: 861: {
  4197                           ;transceiver.c: 862: ctrl_trf_session_owner = 1;
  4198  00068A  0E01               	movlw	1
  4199  00068C  6E3F               	movwf	_ctrl_trf_session_owner,c
  4200                           
  4201                           ;transceiver.c: 863: data_ptr = &usb_config;
  4202  00068E  0E43               	movlw	low _usb_config
  4203  000690  6E34               	movwf	_data_ptr,c
  4204  000692  0E00               	movlw	high _usb_config
  4205  000694  6E35               	movwf	_data_ptr+1,c
  4206  000696  5034               	movf	_data_ptr,w,c
  4207  000698  1035               	iorwf	_data_ptr+1,w,c
  4208  00069A  A4D8               	btfss	status,2,c
  4209  00069C  0E20               	movlw	32
  4210  00069E  6E36               	movwf	_data_ptr+2,c
  4211                           
  4212                           ;transceiver.c: 864: data_count = 1;
  4213  0006A0  0E00               	movlw	0
  4214  0006A2  6E38               	movwf	_data_count+1,c
  4215  0006A4  0E01               	movlw	1
  4216  0006A6  6E37               	movwf	_data_count,c
  4217                           
  4218                           ;transceiver.c: 866: }
  4219                           
  4220                           ;transceiver.c: 865: return;
  4221  0006A8  0012               	return	
  4222  0006AA                     i2l274:
  4223                           
  4224                           ;transceiver.c: 867: else
  4225                           ;transceiver.c: 868: {
  4226                           ;transceiver.c: 869: print_text("unknown request ");
  4227  0006AA  0ED5               	movlw	low STR_3
  4228  0006AC  6E02               	movwf	i2print_text@s,c
  4229  0006AE  0E3F               	movlw	high STR_3
  4230  0006B0  6E03               	movwf	i2print_text@s+1,c
  4231  0006B2  ECF4  F008         	call	i2_print_text	;wreg free
  4232                           
  4233                           ;transceiver.c: 870: print_number(request);
  4234  0006B6  C012  F00F         	movff	usb_check_std_request@request,print_number@number
  4235  0006BA  6A10               	clrf	print_number@number+1,c
  4236  0006BC  EC60  F009         	call	_print_number	;wreg free
  4237                           
  4238                           ;transceiver.c: 871: print_text("\n");
  4239  0006C0  0EF3               	movlw	low (STR_7+13)
  4240  0006C2  6E02               	movwf	i2print_text@s,c
  4241  0006C4  0E3F               	movlw	high (STR_7+13)
  4242  0006C6  6E03               	movwf	i2print_text@s+1,c
  4243  0006C8  ECF4  F008         	call	i2_print_text	;wreg free
  4244                           
  4245                           ;transceiver.c: 872: flush_uart();
  4246  0006CC  EC73  F009         	call	i2_flush_uart	;wreg free
  4247  0006D0  0012               	return	
  4248  0006D2                     __end_of_usb_check_std_request:
  4249                           	opt stack 0
  4250                           pclatu	equ	0xFFB
  4251                           pclath	equ	0xFFA
  4252                           tblptru	equ	0xFF8
  4253                           tblptrh	equ	0xFF7
  4254                           tblptrl	equ	0xFF6
  4255                           tablat	equ	0xFF5
  4256                           prodh	equ	0xFF4
  4257                           prodl	equ	0xFF3
  4258                           intcon	equ	0xFF2
  4259                           postinc0	equ	0xFEE
  4260                           fsr0h	equ	0xFEA
  4261                           fsr0l	equ	0xFE9
  4262                           wreg	equ	0xFE8
  4263                           indf1	equ	0xFE7
  4264                           postdec1	equ	0xFE5
  4265                           fsr1h	equ	0xFE2
  4266                           fsr1l	equ	0xFE1
  4267                           bsr	equ	0xFE0
  4268                           indf2	equ	0xFDF
  4269                           postinc2	equ	0xFDE
  4270                           fsr2h	equ	0xFDA
  4271                           fsr2l	equ	0xFD9
  4272                           status	equ	0xFD8
  4273                           
  4274 ;; *************** function i2_flush_uart *****************
  4275 ;; Defined at:
  4276 ;;		line 259 in file "transceiver.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;		None
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;		None
  4281 ;; Return value:  Size  Location     Type
  4282 ;;                  1    wreg      void 
  4283 ;; Registers used:
  4284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4290 ;;      Params:         0       0       0       0
  4291 ;;      Locals:         0       0       0       0
  4292 ;;      Temps:          0       0       0       0
  4293 ;;      Totals:         0       0       0       0
  4294 ;;Total ram usage:        0 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:    2
  4297 ;; This function calls:
  4298 ;;		i2_handle_uart
  4299 ;; This function is called by:
  4300 ;;		_usb_check_std_request
  4301 ;; This function uses a non-reentrant model
  4302 ;;
  4303                           
  4304                           	psect	text18
  4305  0012E6                     __ptext18:
  4306                           	opt stack 0
  4307  0012E6                     i2_flush_uart:
  4308                           	opt stack 19
  4309                           
  4310                           ;transceiver.c: 261: while(serial_out_count)
  4311                           
  4312                           ;incstack = 0
  4313  0012E6  D002               	goto	i2l117
  4314  0012E8                     
  4315                           ;transceiver.c: 262: {
  4316                           ;transceiver.c: 263: handle_uart();
  4317  0012E8  ECFF  F003         	call	i2_handle_uart	;wreg free
  4318  0012EC                     i2l117:
  4319  0012EC  0100               	movlb	0	; () banked
  4320  0012EE  5182               	movf	_serial_out_count& (0+255),w,b
  4321  0012F0  1183               	iorwf	(_serial_out_count+1)& (0+255),w,b
  4322  0012F2  B4D8               	btfsc	status,2,c
  4323  0012F4  0012               	return	
  4324  0012F6  D7F8               	goto	i2l118
  4325  0012F8                     __end_ofi2_flush_uart:
  4326                           	opt stack 0
  4327                           pclatu	equ	0xFFB
  4328                           pclath	equ	0xFFA
  4329                           tblptru	equ	0xFF8
  4330                           tblptrh	equ	0xFF7
  4331                           tblptrl	equ	0xFF6
  4332                           tablat	equ	0xFF5
  4333                           prodh	equ	0xFF4
  4334                           prodl	equ	0xFF3
  4335                           intcon	equ	0xFF2
  4336                           postinc0	equ	0xFEE
  4337                           fsr0h	equ	0xFEA
  4338                           fsr0l	equ	0xFE9
  4339                           wreg	equ	0xFE8
  4340                           indf1	equ	0xFE7
  4341                           postdec1	equ	0xFE5
  4342                           fsr1h	equ	0xFE2
  4343                           fsr1l	equ	0xFE1
  4344                           bsr	equ	0xFE0
  4345                           indf2	equ	0xFDF
  4346                           postinc2	equ	0xFDE
  4347                           fsr2h	equ	0xFDA
  4348                           fsr2l	equ	0xFD9
  4349                           status	equ	0xFD8
  4350                           
  4351 ;; *************** function i2_handle_uart *****************
  4352 ;; Defined at:
  4353 ;;		line 198 in file "transceiver.c"
  4354 ;; Parameters:    Size  Location     Type
  4355 ;;		None
  4356 ;; Auto vars:     Size  Location     Type
  4357 ;;  handle_uart     1    4[COMRAM] struct .
  4358 ;; Return value:  Size  Location     Type
  4359 ;;                  1    wreg      void 
  4360 ;; Registers used:
  4361 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4362 ;; Tracked objects:
  4363 ;;		On entry : 0/0
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4367 ;;      Params:         0       0       0       0
  4368 ;;      Locals:         1       0       0       0
  4369 ;;      Temps:          0       0       0       0
  4370 ;;      Totals:         1       0       0       0
  4371 ;;Total ram usage:        1 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    1
  4374 ;; This function calls:
  4375 ;;		i2_delayMicroseconds
  4376 ;; This function is called by:
  4377 ;;		i2_flush_uart
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           	psect	text19
  4382  0007FE                     __ptext19:
  4383                           	opt stack 0
  4384  0007FE                     i2_handle_uart:
  4385                           	opt stack 19
  4386                           
  4387                           ;transceiver.c: 201: if(RCSTAbits.OERR)
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;incstack = 0
  4391  0007FE  A2AB               	btfss	4011,1,c	;volatile
  4392  000800  D003               	goto	i2l111
  4393                           
  4394                           ;transceiver.c: 202: {
  4395                           ;transceiver.c: 203: RCSTAbits.OERR = 0;
  4396  000802  92AB               	bcf	4011,1,c	;volatile
  4397                           
  4398                           ;transceiver.c: 204: RCSTAbits.CREN = 0;
  4399  000804  98AB               	bcf	4011,4,c	;volatile
  4400                           
  4401                           ;transceiver.c: 205: RCSTAbits.CREN = 1;
  4402  000806  88AB               	bsf	4011,4,c	;volatile
  4403  000808                     i2l111:
  4404                           
  4405                           ;transceiver.c: 206: }
  4406                           ;transceiver.c: 209: if(serial_out_count > 0)
  4407  000808  0100               	movlb	0	; () banked
  4408  00080A  5182               	movf	_serial_out_count& (0+255),w,b
  4409  00080C  1183               	iorwf	(_serial_out_count+1)& (0+255),w,b
  4410  00080E  B4D8               	btfsc	status,2,c
  4411  000810  0012               	return	
  4412                           
  4413                           ; BSR set to: 0
  4414                           ;transceiver.c: 210: {
  4415                           ;transceiver.c: 211: bits_t bits;
  4416                           ;transceiver.c: 212: bits.value = serial_out_buffer[serial_out_ptr2++];
  4417  000812  0E00               	movlw	low _serial_out_buffer
  4418  000814  2580               	addwf	_serial_out_ptr2& (0+255),w,b
  4419  000816  6ED9               	movwf	fsr2l,c
  4420  000818  0E01               	movlw	high _serial_out_buffer
  4421  00081A  2181               	addwfc	(_serial_out_ptr2+1)& (0+255),w,b
  4422  00081C  6EDA               	movwf	fsr2h,c
  4423  00081E  50DF               	movf	indf2,w,c
  4424  000820  6E05               	movwf	i2handle_uart@bits,c
  4425                           
  4426                           ; BSR set to: 0
  4427  000822  4B80               	infsnz	_serial_out_ptr2& (0+255),f,b
  4428  000824  2B81               	incf	(_serial_out_ptr2+1)& (0+255),f,b
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;transceiver.c: 213: if(serial_out_ptr2 >= 256)
  4432  000826  0581               	decf	(_serial_out_ptr2+1)& (0+255),w,b
  4433  000828  A0D8               	btfss	status,0,c
  4434  00082A  D004               	goto	i2l113
  4435                           
  4436                           ; BSR set to: 0
  4437                           ;transceiver.c: 214: {
  4438                           ;transceiver.c: 215: serial_out_ptr2 = 0;
  4439  00082C  0E00               	movlw	0
  4440  00082E  6F81               	movwf	(_serial_out_ptr2+1)& (0+255),b
  4441  000830  0E00               	movlw	0
  4442  000832  6F80               	movwf	_serial_out_ptr2& (0+255),b
  4443  000834                     i2l113:
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;transceiver.c: 216: }
  4447                           ;transceiver.c: 217: serial_out_count--;
  4448                           
  4449                           ; BSR set to: 0
  4450  000834  0782               	decf	_serial_out_count& (0+255),f,b
  4451  000836  A0D8               	btfss	status,0,c
  4452  000838  0783               	decf	(_serial_out_count+1)& (0+255),f,b
  4453                           
  4454                           ; BSR set to: 0
  4455                           ;transceiver.c: 221: LATCbits.LATC6 = 0;
  4456  00083A  9C8B               	bcf	3979,6,c	;volatile
  4457                           
  4458                           ; BSR set to: 0
  4459                           ;transceiver.c: 222: delayMicroseconds(26);
  4460  00083C  0E00               	movlw	0
  4461  00083E  6E02               	movwf	i2delayMicroseconds@x+1,c
  4462  000840  0E1A               	movlw	26
  4463  000842  6E01               	movwf	i2delayMicroseconds@x,c
  4464  000844  EC36  F009         	call	i2_delayMicroseconds	;wreg free
  4465                           
  4466                           ;transceiver.c: 223: LATCbits.LATC6 = bits.bit7;
  4467  000848  A005               	btfss	i2handle_uart@bits,0,c
  4468  00084A  D002               	bra	i2u129_45
  4469  00084C  8C8B               	bsf	3979,6,c	;volatile
  4470  00084E  D001               	bra	i2u129_47
  4471  000850                     i2u129_45:
  4472  000850  9C8B               	bcf	3979,6,c	;volatile
  4473  000852                     i2u129_47:
  4474                           
  4475                           ;transceiver.c: 224: delayMicroseconds(26);
  4476  000852  0E00               	movlw	0
  4477  000854  6E02               	movwf	i2delayMicroseconds@x+1,c
  4478  000856  0E1A               	movlw	26
  4479  000858  6E01               	movwf	i2delayMicroseconds@x,c
  4480  00085A  EC36  F009         	call	i2_delayMicroseconds	;wreg free
  4481                           
  4482                           ;transceiver.c: 225: LATCbits.LATC6 = bits.bit6;
  4483  00085E  A205               	btfss	i2handle_uart@bits,1,c
  4484  000860  D002               	bra	i2u130_45
  4485  000862  8C8B               	bsf	3979,6,c	;volatile
  4486  000864  D001               	bra	i2u130_47
  4487  000866                     i2u130_45:
  4488  000866  9C8B               	bcf	3979,6,c	;volatile
  4489  000868                     i2u130_47:
  4490                           
  4491                           ;transceiver.c: 226: delayMicroseconds(26);
  4492  000868  0E00               	movlw	0
  4493  00086A  6E02               	movwf	i2delayMicroseconds@x+1,c
  4494  00086C  0E1A               	movlw	26
  4495  00086E  6E01               	movwf	i2delayMicroseconds@x,c
  4496  000870  EC36  F009         	call	i2_delayMicroseconds	;wreg free
  4497                           
  4498                           ;transceiver.c: 227: LATCbits.LATC6 = bits.bit5;
  4499  000874  A405               	btfss	i2handle_uart@bits,2,c
  4500  000876  D002               	bra	i2u131_45
  4501  000878  8C8B               	bsf	3979,6,c	;volatile
  4502  00087A  D001               	bra	i2u131_47
  4503  00087C                     i2u131_45:
  4504  00087C  9C8B               	bcf	3979,6,c	;volatile
  4505  00087E                     i2u131_47:
  4506                           
  4507                           ;transceiver.c: 228: delayMicroseconds(26);
  4508  00087E  0E00               	movlw	0
  4509  000880  6E02               	movwf	i2delayMicroseconds@x+1,c
  4510  000882  0E1A               	movlw	26
  4511  000884  6E01               	movwf	i2delayMicroseconds@x,c
  4512  000886  EC36  F009         	call	i2_delayMicroseconds	;wreg free
  4513                           
  4514                           ;transceiver.c: 229: LATCbits.LATC6 = bits.bit4;
  4515  00088A  A605               	btfss	i2handle_uart@bits,3,c
  4516  00088C  D002               	bra	i2u132_45
  4517  00088E  8C8B               	bsf	3979,6,c	;volatile
  4518  000890  D001               	bra	i2u132_47
  4519  000892                     i2u132_45:
  4520  000892  9C8B               	bcf	3979,6,c	;volatile
  4521  000894                     i2u132_47:
  4522                           
  4523                           ;transceiver.c: 230: delayMicroseconds(26);
  4524  000894  0E00               	movlw	0
  4525  000896  6E02               	movwf	i2delayMicroseconds@x+1,c
  4526  000898  0E1A               	movlw	26
  4527  00089A  6E01               	movwf	i2delayMicroseconds@x,c
  4528  00089C  EC36  F009         	call	i2_delayMicroseconds	;wreg free
  4529                           
  4530                           ;transceiver.c: 231: LATCbits.LATC6 = bits.bit3;
  4531  0008A0  A805               	btfss	i2handle_uart@bits,4,c
  4532  0008A2  D002               	bra	i2u133_45
  4533  0008A4  8C8B               	bsf	3979,6,c	;volatile
  4534  0008A6  D001               	bra	i2u133_47
  4535  0008A8                     i2u133_45:
  4536  0008A8  9C8B               	bcf	3979,6,c	;volatile
  4537  0008AA                     i2u133_47:
  4538                           
  4539                           ;transceiver.c: 232: delayMicroseconds(26);
  4540  0008AA  0E00               	movlw	0
  4541  0008AC  6E02               	movwf	i2delayMicroseconds@x+1,c
  4542  0008AE  0E1A               	movlw	26
  4543  0008B0  6E01               	movwf	i2delayMicroseconds@x,c
  4544  0008B2  EC36  F009         	call	i2_delayMicroseconds	;wreg free
  4545                           
  4546                           ;transceiver.c: 233: LATCbits.LATC6 = bits.bit2;
  4547  0008B6  AA05               	btfss	i2handle_uart@bits,5,c
  4548  0008B8  D002               	bra	i2u134_45
  4549  0008BA  8C8B               	bsf	3979,6,c	;volatile
  4550  0008BC  D001               	bra	i2u134_47
  4551  0008BE                     i2u134_45:
  4552  0008BE  9C8B               	bcf	3979,6,c	;volatile
  4553  0008C0                     i2u134_47:
  4554                           
  4555                           ;transceiver.c: 234: delayMicroseconds(26);
  4556  0008C0  0E00               	movlw	0
  4557  0008C2  6E02               	movwf	i2delayMicroseconds@x+1,c
  4558  0008C4  0E1A               	movlw	26
  4559  0008C6  6E01               	movwf	i2delayMicroseconds@x,c
  4560  0008C8  EC36  F009         	call	i2_delayMicroseconds	;wreg free
  4561                           
  4562                           ;transceiver.c: 235: LATCbits.LATC6 = bits.bit1;
  4563  0008CC  AC05               	btfss	i2handle_uart@bits,6,c
  4564  0008CE  D002               	bra	i2u135_45
  4565  0008D0  8C8B               	bsf	3979,6,c	;volatile
  4566  0008D2  D001               	bra	i2u135_47
  4567  0008D4                     i2u135_45:
  4568  0008D4  9C8B               	bcf	3979,6,c	;volatile
  4569  0008D6                     i2u135_47:
  4570                           
  4571                           ;transceiver.c: 236: delayMicroseconds(26);
  4572  0008D6  0E00               	movlw	0
  4573  0008D8  6E02               	movwf	i2delayMicroseconds@x+1,c
  4574  0008DA  0E1A               	movlw	26
  4575  0008DC  6E01               	movwf	i2delayMicroseconds@x,c
  4576  0008DE  EC36  F009         	call	i2_delayMicroseconds	;wreg free
  4577                           
  4578                           ;transceiver.c: 237: LATCbits.LATC6 = bits.bit0;
  4579  0008E2  AE05               	btfss	i2handle_uart@bits,7,c
  4580  0008E4  D002               	bra	i2u136_45
  4581  0008E6  8C8B               	bsf	3979,6,c	;volatile
  4582  0008E8  D001               	bra	i2u136_47
  4583  0008EA                     i2u136_45:
  4584  0008EA  9C8B               	bcf	3979,6,c	;volatile
  4585  0008EC                     i2u136_47:
  4586                           
  4587                           ;transceiver.c: 238: delayMicroseconds(26);
  4588  0008EC  0E00               	movlw	0
  4589  0008EE  6E02               	movwf	i2delayMicroseconds@x+1,c
  4590  0008F0  0E1A               	movlw	26
  4591  0008F2  6E01               	movwf	i2delayMicroseconds@x,c
  4592  0008F4  EC36  F009         	call	i2_delayMicroseconds	;wreg free
  4593                           
  4594                           ;transceiver.c: 240: LATCbits.LATC6 = 1;
  4595  0008F8  8C8B               	bsf	3979,6,c	;volatile
  4596                           
  4597                           ;transceiver.c: 241: delayMicroseconds(26);
  4598  0008FA  0E00               	movlw	0
  4599  0008FC  6E02               	movwf	i2delayMicroseconds@x+1,c
  4600  0008FE  0E1A               	movlw	26
  4601  000900  6E01               	movwf	i2delayMicroseconds@x,c
  4602  000902  EC36  F009         	call	i2_delayMicroseconds	;wreg free
  4603  000906  0012               	return	
  4604  000908                     __end_ofi2_handle_uart:
  4605                           	opt stack 0
  4606                           pclatu	equ	0xFFB
  4607                           pclath	equ	0xFFA
  4608                           tblptru	equ	0xFF8
  4609                           tblptrh	equ	0xFF7
  4610                           tblptrl	equ	0xFF6
  4611                           tablat	equ	0xFF5
  4612                           prodh	equ	0xFF4
  4613                           prodl	equ	0xFF3
  4614                           intcon	equ	0xFF2
  4615                           postinc0	equ	0xFEE
  4616                           fsr0h	equ	0xFEA
  4617                           fsr0l	equ	0xFE9
  4618                           wreg	equ	0xFE8
  4619                           indf1	equ	0xFE7
  4620                           postdec1	equ	0xFE5
  4621                           fsr1h	equ	0xFE2
  4622                           fsr1l	equ	0xFE1
  4623                           bsr	equ	0xFE0
  4624                           indf2	equ	0xFDF
  4625                           postinc2	equ	0xFDE
  4626                           fsr2h	equ	0xFDA
  4627                           fsr2l	equ	0xFD9
  4628                           status	equ	0xFD8
  4629                           
  4630 ;; *************** function i2_delayMicroseconds *****************
  4631 ;; Defined at:
  4632 ;;		line 188 in file "transceiver.c"
  4633 ;; Parameters:    Size  Location     Type
  4634 ;;  x               2    0[COMRAM] unsigned int 
  4635 ;; Auto vars:     Size  Location     Type
  4636 ;;  delayMicrose    2    2[COMRAM] unsigned int 
  4637 ;; Return value:  Size  Location     Type
  4638 ;;                  1    wreg      void 
  4639 ;; Registers used:
  4640 ;;		wreg, status,2, status,0
  4641 ;; Tracked objects:
  4642 ;;		On entry : 0/0
  4643 ;;		On exit  : 0/0
  4644 ;;		Unchanged: 0/0
  4645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4646 ;;      Params:         2       0       0       0
  4647 ;;      Locals:         2       0       0       0
  4648 ;;      Temps:          0       0       0       0
  4649 ;;      Totals:         4       0       0       0
  4650 ;;Total ram usage:        4 bytes
  4651 ;; Hardware stack levels used:    1
  4652 ;; This function calls:
  4653 ;;		Nothing
  4654 ;; This function is called by:
  4655 ;;		i2_handle_uart
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           	psect	text20
  4660  00126C                     __ptext20:
  4661                           	opt stack 0
  4662  00126C                     i2_delayMicroseconds:
  4663                           	opt stack 19
  4664                           
  4665                           ;transceiver.c: 190: uint16_t i;
  4666                           ;transceiver.c: 191: x -= 3;
  4667                           
  4668                           ;incstack = 0
  4669  00126C  0E03               	movlw	3
  4670  00126E  5E01               	subwf	i2delayMicroseconds@x,f,c
  4671  001270  0E00               	movlw	0
  4672  001272  5A02               	subwfb	i2delayMicroseconds@x+1,f,c
  4673                           
  4674                           ;transceiver.c: 192: for(i = 0; i < x; i++)
  4675  001274  0E00               	movlw	0
  4676  001276  6E04               	movwf	i2delayMicroseconds@i+1,c
  4677  001278  0E00               	movlw	0
  4678  00127A  6E03               	movwf	i2delayMicroseconds@i,c
  4679  00127C  D003               	goto	i2l105
  4680  00127E                     i2l106:
  4681  00127E  F000               	nop		;# 
  4682  001280  4A03               	infsnz	i2delayMicroseconds@i,f,c
  4683  001282  2A04               	incf	i2delayMicroseconds@i+1,f,c
  4684  001284                     i2l105:
  4685  001284  5001               	movf	i2delayMicroseconds@x,w,c
  4686  001286  5C03               	subwf	i2delayMicroseconds@i,w,c
  4687  001288  5002               	movf	i2delayMicroseconds@x+1,w,c
  4688  00128A  5804               	subwfb	i2delayMicroseconds@i+1,w,c
  4689  00128C  B0D8               	btfsc	status,0,c
  4690  00128E  0012               	return	
  4691  001290  D7F6               	goto	i2l106
  4692  001292                     __end_ofi2_delayMicroseconds:
  4693                           	opt stack 0
  4694                           pclatu	equ	0xFFB
  4695                           pclath	equ	0xFFA
  4696                           tblptru	equ	0xFF8
  4697                           tblptrh	equ	0xFF7
  4698                           tblptrl	equ	0xFF6
  4699                           tablat	equ	0xFF5
  4700                           prodh	equ	0xFF4
  4701                           prodl	equ	0xFF3
  4702                           intcon	equ	0xFF2
  4703                           postinc0	equ	0xFEE
  4704                           fsr0h	equ	0xFEA
  4705                           fsr0l	equ	0xFE9
  4706                           wreg	equ	0xFE8
  4707                           indf1	equ	0xFE7
  4708                           postdec1	equ	0xFE5
  4709                           fsr1h	equ	0xFE2
  4710                           fsr1l	equ	0xFE1
  4711                           bsr	equ	0xFE0
  4712                           indf2	equ	0xFDF
  4713                           postinc2	equ	0xFDE
  4714                           fsr2h	equ	0xFDA
  4715                           fsr2l	equ	0xFD9
  4716                           status	equ	0xFD8
  4717                           
  4718 ;; *************** function _user_endpoint_init *****************
  4719 ;; Defined at:
  4720 ;;		line 724 in file "transceiver.c"
  4721 ;; Parameters:    Size  Location     Type
  4722 ;;		None
  4723 ;; Auto vars:     Size  Location     Type
  4724 ;;		None
  4725 ;; Return value:  Size  Location     Type
  4726 ;;                  1    wreg      void 
  4727 ;; Registers used:
  4728 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4729 ;; Tracked objects:
  4730 ;;		On entry : 0/0
  4731 ;;		On exit  : 0/0
  4732 ;;		Unchanged: 0/0
  4733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4734 ;;      Params:         0       0       0       0
  4735 ;;      Locals:         0       0       0       0
  4736 ;;      Temps:          0       0       0       0
  4737 ;;      Totals:         0       0       0       0
  4738 ;;Total ram usage:        0 bytes
  4739 ;; Hardware stack levels used:    1
  4740 ;; This function calls:
  4741 ;;		Nothing
  4742 ;; This function is called by:
  4743 ;;		_usb_check_std_request
  4744 ;; This function uses a non-reentrant model
  4745 ;;
  4746                           
  4747                           	psect	text21
  4748  000AD4                     __ptext21:
  4749                           	opt stack 0
  4750  000AD4                     _user_endpoint_init:
  4751                           	opt stack 21
  4752                           
  4753                           ;transceiver.c: 727: UEP1 = 0;
  4754                           
  4755                           ;incstack = 0
  4756  000AD4  0E00               	movlw	0
  4757  000AD6  010F               	movlb	15	; () banked
  4758  000AD8  6F54               	movwf	84,b	;volatile
  4759                           
  4760                           ; BSR set to: 15
  4761                           ;transceiver.c: 728: UEP1bits.EPCONDIS = 1;
  4762  000ADA  8754               	bsf	84,3,b	;volatile
  4763                           
  4764                           ; BSR set to: 15
  4765                           ;transceiver.c: 729: UEP1bits.EPOUTEN = 1;
  4766  000ADC  8554               	bsf	84,2,b	;volatile
  4767                           
  4768                           ; BSR set to: 15
  4769                           ;transceiver.c: 730: UEP1bits.EPINEN = 1;
  4770  000ADE  8354               	bsf	84,1,b	;volatile
  4771                           
  4772                           ; BSR set to: 15
  4773                           ;transceiver.c: 731: UEP1bits.EPHSHK = 1;
  4774  000AE0  8954               	bsf	84,4,b	;volatile
  4775                           
  4776                           ;transceiver.c: 733: UEP2 = 0;
  4777  000AE2  0E00               	movlw	0
  4778  000AE4  6F55               	movwf	85,b	;volatile
  4779                           
  4780                           ; BSR set to: 15
  4781                           ;transceiver.c: 734: UEP2bits.EPCONDIS = 1;
  4782  000AE6  8755               	bsf	85,3,b	;volatile
  4783                           
  4784                           ; BSR set to: 15
  4785                           ;transceiver.c: 735: UEP2bits.EPOUTEN = 1;
  4786  000AE8  8555               	bsf	85,2,b	;volatile
  4787                           
  4788                           ; BSR set to: 15
  4789                           ;transceiver.c: 736: UEP2bits.EPINEN = 1;
  4790  000AEA  8355               	bsf	85,1,b	;volatile
  4791                           
  4792                           ; BSR set to: 15
  4793                           ;transceiver.c: 737: UEP2bits.EPHSHK = 1;
  4794  000AEC  8955               	bsf	85,4,b	;volatile
  4795                           
  4796                           ; BSR set to: 15
  4797                           ;transceiver.c: 739: *(EP1_IN + 1) = (0x10); *(EP1_IN + 2) = ((uint16_t)(cdc_in_packet) 
      +                          & 0xff); *(EP1_IN + 3) = ((uint16_t)(cdc_in_packet) >> 8); *(EP1_IN) = (0x80 | 0x40);
  4798  000AEE  EE20 F001          	lfsr	2,1
  4799  000AF2  504A               	movf	_EP1_IN,w,c
  4800  000AF4  26D9               	addwf	fsr2l,f,c
  4801  000AF6  504B               	movf	_EP1_IN+1,w,c
  4802  000AF8  22DA               	addwfc	fsr2h,f,c
  4803  000AFA  0E10               	movlw	16
  4804  000AFC  6EDF               	movwf	indf2,c
  4805                           
  4806                           ; BSR set to: 15
  4807  000AFE  EE20 F002          	lfsr	2,2
  4808  000B02  504A               	movf	_EP1_IN,w,c
  4809  000B04  26D9               	addwf	fsr2l,f,c
  4810  000B06  504B               	movf	_EP1_IN+1,w,c
  4811  000B08  22DA               	addwfc	fsr2h,f,c
  4812  000B0A  C044  FFDF         	movff	_cdc_in_packet,indf2
  4813                           
  4814                           ; BSR set to: 15
  4815  000B0E  EE20 F003          	lfsr	2,3
  4816  000B12  504A               	movf	_EP1_IN,w,c
  4817  000B14  26D9               	addwf	fsr2l,f,c
  4818  000B16  504B               	movf	_EP1_IN+1,w,c
  4819  000B18  22DA               	addwfc	fsr2h,f,c
  4820  000B1A  5045               	movf	_cdc_in_packet+1,w,c
  4821  000B1C  6EDF               	movwf	indf2,c
  4822                           
  4823                           ; BSR set to: 15
  4824  000B1E  C04A  FFD9         	movff	_EP1_IN,fsr2l
  4825  000B22  C04B  FFDA         	movff	_EP1_IN+1,fsr2h
  4826  000B26  0EC0               	movlw	192
  4827  000B28  6EDF               	movwf	indf2,c
  4828                           
  4829                           ; BSR set to: 15
  4830                           ;transceiver.c: 741: *(EP2_IN + 1) = (0x40); *(EP2_IN + 2) = ((uint16_t)(data_in_packet)
      +                           & 0xff); *(EP2_IN + 3) = ((uint16_t)(data_in_packet) >> 8); *(EP2_IN) = (0x80 | 0x40);
  4831  000B2A  0100               	movlb	0	; () banked
  4832  000B2C  EE20 F001          	lfsr	2,1
  4833  000B30  51AF               	movf	_EP2_IN& (0+255),w,b
  4834  000B32  26D9               	addwf	fsr2l,f,c
  4835  000B34  51B0               	movf	(_EP2_IN+1)& (0+255),w,b
  4836  000B36  22DA               	addwfc	fsr2h,f,c
  4837  000B38  0E40               	movlw	64
  4838  000B3A  6EDF               	movwf	indf2,c
  4839                           
  4840                           ; BSR set to: 0
  4841  000B3C  EE20 F002          	lfsr	2,2
  4842  000B40  51AF               	movf	_EP2_IN& (0+255),w,b
  4843  000B42  26D9               	addwf	fsr2l,f,c
  4844  000B44  51B0               	movf	(_EP2_IN+1)& (0+255),w,b
  4845  000B46  22DA               	addwfc	fsr2h,f,c
  4846  000B48  C0AD  FFDF         	movff	_data_in_packet,indf2
  4847                           
  4848                           ; BSR set to: 0
  4849  000B4C  EE20 F003          	lfsr	2,3
  4850  000B50  51AF               	movf	_EP2_IN& (0+255),w,b
  4851  000B52  26D9               	addwf	fsr2l,f,c
  4852  000B54  51B0               	movf	(_EP2_IN+1)& (0+255),w,b
  4853  000B56  22DA               	addwfc	fsr2h,f,c
  4854  000B58  51AE               	movf	(_data_in_packet+1)& (0+255),w,b
  4855  000B5A  6EDF               	movwf	indf2,c
  4856                           
  4857                           ; BSR set to: 0
  4858  000B5C  C0AF  FFD9         	movff	_EP2_IN,fsr2l
  4859  000B60  C0B0  FFDA         	movff	_EP2_IN+1,fsr2h
  4860  000B64  0EC0               	movlw	192
  4861  000B66  6EDF               	movwf	indf2,c
  4862                           
  4863                           ; BSR set to: 0
  4864                           ;transceiver.c: 742: *(EP2_OUT + 1) = (0x40); *(EP2_OUT + 2) = ((uint16_t)(data_out_pack
      +                          et) & 0xff); *(EP2_OUT + 3) = ((uint16_t)(data_out_packet) >> 8); *(EP2_OUT) = (0x80 | 0
      +                          x00 | 0x08);
  4865  000B68  EE20 F001          	lfsr	2,1
  4866  000B6C  51B1               	movf	_EP2_OUT& (0+255),w,b
  4867  000B6E  26D9               	addwf	fsr2l,f,c
  4868  000B70  51B2               	movf	(_EP2_OUT+1)& (0+255),w,b
  4869  000B72  22DA               	addwfc	fsr2h,f,c
  4870  000B74  0E40               	movlw	64
  4871  000B76  6EDF               	movwf	indf2,c
  4872                           
  4873                           ; BSR set to: 0
  4874  000B78  EE20 F002          	lfsr	2,2
  4875  000B7C  51B1               	movf	_EP2_OUT& (0+255),w,b
  4876  000B7E  26D9               	addwf	fsr2l,f,c
  4877  000B80  51B2               	movf	(_EP2_OUT+1)& (0+255),w,b
  4878  000B82  22DA               	addwfc	fsr2h,f,c
  4879  000B84  C0AB  FFDF         	movff	_data_out_packet,indf2
  4880                           
  4881                           ; BSR set to: 0
  4882  000B88  EE20 F003          	lfsr	2,3
  4883  000B8C  51B1               	movf	_EP2_OUT& (0+255),w,b
  4884  000B8E  26D9               	addwf	fsr2l,f,c
  4885  000B90  51B2               	movf	(_EP2_OUT+1)& (0+255),w,b
  4886  000B92  22DA               	addwfc	fsr2h,f,c
  4887  000B94  51AC               	movf	(_data_out_packet+1)& (0+255),w,b
  4888  000B96  6EDF               	movwf	indf2,c
  4889                           
  4890                           ; BSR set to: 0
  4891  000B98  C0B1  FFD9         	movff	_EP2_OUT,fsr2l
  4892  000B9C  C0B2  FFDA         	movff	_EP2_OUT+1,fsr2h
  4893  000BA0  0E88               	movlw	136
  4894  000BA2  6EDF               	movwf	indf2,c
  4895                           
  4896                           ; BSR set to: 0
  4897  000BA4  0012               	return		;funcret
  4898  000BA6                     __end_of_user_endpoint_init:
  4899                           	opt stack 0
  4900                           pclatu	equ	0xFFB
  4901                           pclath	equ	0xFFA
  4902                           tblptru	equ	0xFF8
  4903                           tblptrh	equ	0xFF7
  4904                           tblptrl	equ	0xFF6
  4905                           tablat	equ	0xFF5
  4906                           prodh	equ	0xFF4
  4907                           prodl	equ	0xFF3
  4908                           intcon	equ	0xFF2
  4909                           postinc0	equ	0xFEE
  4910                           fsr0h	equ	0xFEA
  4911                           fsr0l	equ	0xFE9
  4912                           wreg	equ	0xFE8
  4913                           indf1	equ	0xFE7
  4914                           postdec1	equ	0xFE5
  4915                           fsr1h	equ	0xFE2
  4916                           fsr1l	equ	0xFE1
  4917                           bsr	equ	0xFE0
  4918                           indf2	equ	0xFDF
  4919                           postinc2	equ	0xFDE
  4920                           fsr2h	equ	0xFDA
  4921                           fsr2l	equ	0xFD9
  4922                           status	equ	0xFD8
  4923                           
  4924 ;; *************** function _print_number *****************
  4925 ;; Defined at:
  4926 ;;		line 299 in file "transceiver.c"
  4927 ;; Parameters:    Size  Location     Type
  4928 ;;  number          2   14[COMRAM] unsigned int 
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;		None
  4931 ;; Return value:  Size  Location     Type
  4932 ;;                  1    wreg      void 
  4933 ;; Registers used:
  4934 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4935 ;; Tracked objects:
  4936 ;;		On entry : 0/0
  4937 ;;		On exit  : 0/0
  4938 ;;		Unchanged: 0/0
  4939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4940 ;;      Params:         2       0       0       0
  4941 ;;      Locals:         0       0       0       0
  4942 ;;      Temps:          0       0       0       0
  4943 ;;      Totals:         2       0       0       0
  4944 ;;Total ram usage:        2 bytes
  4945 ;; Hardware stack levels used:    1
  4946 ;; Hardware stack levels required when called:    2
  4947 ;; This function calls:
  4948 ;;		_print_number_nospace
  4949 ;;		i2_print_byte
  4950 ;; This function is called by:
  4951 ;;		_usb_check_std_request
  4952 ;; This function uses a non-reentrant model
  4953 ;;
  4954                           
  4955                           	psect	text22
  4956  0012C0                     __ptext22:
  4957                           	opt stack 0
  4958  0012C0                     _print_number:
  4959                           	opt stack 19
  4960                           
  4961                           ;transceiver.c: 301: print_number_nospace(number);
  4962                           
  4963                           ; BSR set to: 0
  4964                           ;incstack = 0
  4965  0012C0  C00F  F00D         	movff	print_number@number,print_number_nospace@number
  4966  0012C4  C010  F00E         	movff	print_number@number+1,print_number_nospace@number+1
  4967  0012C8  EC84  F004         	call	_print_number_nospace	;wreg free
  4968                           
  4969                           ;transceiver.c: 302: print_byte(' ');
  4970  0012CC  0E20               	movlw	32
  4971  0012CE  ECC3  F008         	call	i2_print_byte
  4972  0012D2  0012               	return		;funcret
  4973  0012D4                     __end_of_print_number:
  4974                           	opt stack 0
  4975                           pclatu	equ	0xFFB
  4976                           pclath	equ	0xFFA
  4977                           tblptru	equ	0xFF8
  4978                           tblptrh	equ	0xFF7
  4979                           tblptrl	equ	0xFF6
  4980                           tablat	equ	0xFF5
  4981                           prodh	equ	0xFF4
  4982                           prodl	equ	0xFF3
  4983                           intcon	equ	0xFF2
  4984                           postinc0	equ	0xFEE
  4985                           fsr0h	equ	0xFEA
  4986                           fsr0l	equ	0xFE9
  4987                           wreg	equ	0xFE8
  4988                           indf1	equ	0xFE7
  4989                           postdec1	equ	0xFE5
  4990                           fsr1h	equ	0xFE2
  4991                           fsr1l	equ	0xFE1
  4992                           bsr	equ	0xFE0
  4993                           indf2	equ	0xFDF
  4994                           postinc2	equ	0xFDE
  4995                           fsr2h	equ	0xFDA
  4996                           fsr2l	equ	0xFD9
  4997                           status	equ	0xFD8
  4998                           
  4999 ;; *************** function _print_number_nospace *****************
  5000 ;; Defined at:
  5001 ;;		line 290 in file "transceiver.c"
  5002 ;; Parameters:    Size  Location     Type
  5003 ;;  number          2   12[COMRAM] unsigned int 
  5004 ;; Auto vars:     Size  Location     Type
  5005 ;;		None
  5006 ;; Return value:  Size  Location     Type
  5007 ;;                  1    wreg      void 
  5008 ;; Registers used:
  5009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5010 ;; Tracked objects:
  5011 ;;		On entry : 0/0
  5012 ;;		On exit  : 0/0
  5013 ;;		Unchanged: 0/0
  5014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5015 ;;      Params:         2       0       0       0
  5016 ;;      Locals:         0       0       0       0
  5017 ;;      Temps:          0       0       0       0
  5018 ;;      Totals:         2       0       0       0
  5019 ;;Total ram usage:        2 bytes
  5020 ;; Hardware stack levels used:    1
  5021 ;; Hardware stack levels required when called:    1
  5022 ;; This function calls:
  5023 ;;		___lwdiv
  5024 ;;		___lwmod
  5025 ;;		i2_print_byte
  5026 ;; This function is called by:
  5027 ;;		_print_number
  5028 ;; This function uses a non-reentrant model
  5029 ;;
  5030                           
  5031                           	psect	text23
  5032  000908                     __ptext23:
  5033                           	opt stack 0
  5034  000908                     _print_number_nospace:
  5035                           	opt stack 19
  5036                           
  5037                           ;transceiver.c: 292: if(number >= 10000) print_byte('0' + (number / 10000));
  5038                           
  5039                           ;incstack = 0
  5040  000908  0E10               	movlw	16
  5041  00090A  5C0D               	subwf	print_number_nospace@number,w,c
  5042  00090C  0E27               	movlw	39
  5043  00090E  580E               	subwfb	print_number_nospace@number+1,w,c
  5044  000910  A0D8               	btfss	status,0,c
  5045  000912  D00E               	goto	i2l134
  5046  000914  C00D  F001         	movff	print_number_nospace@number,___lwdiv@dividend
  5047  000918  C00E  F002         	movff	print_number_nospace@number+1,___lwdiv@dividend+1
  5048  00091C  0E27               	movlw	39
  5049  00091E  6E04               	movwf	___lwdiv@divisor+1,c
  5050  000920  0E10               	movlw	16
  5051  000922  6E03               	movwf	___lwdiv@divisor,c
  5052  000924  EC78  F007         	call	___lwdiv	;wreg free
  5053  000928  5001               	movf	?___lwdiv,w,c
  5054  00092A  0F30               	addlw	48
  5055  00092C  ECC3  F008         	call	i2_print_byte
  5056  000930                     i2l134:
  5057                           
  5058                           ;transceiver.c: 293: if(number >= 1000) print_byte('0' + ((number / 1000) % 10));
  5059  000930  0EE8               	movlw	232
  5060  000932  5C0D               	subwf	print_number_nospace@number,w,c
  5061  000934  0E03               	movlw	3
  5062  000936  580E               	subwfb	print_number_nospace@number+1,w,c
  5063  000938  A0D8               	btfss	status,0,c
  5064  00093A  D018               	goto	i2l135
  5065  00093C  0E03               	movlw	3
  5066  00093E  6E04               	movwf	___lwdiv@divisor+1,c
  5067  000940  0EE8               	movlw	232
  5068  000942  6E03               	movwf	___lwdiv@divisor,c
  5069  000944  C00D  F001         	movff	print_number_nospace@number,___lwdiv@dividend
  5070  000948  C00E  F002         	movff	print_number_nospace@number+1,___lwdiv@dividend+1
  5071  00094C  EC78  F007         	call	___lwdiv	;wreg free
  5072  000950  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  5073  000954  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  5074  000958  0E00               	movlw	0
  5075  00095A  6E0B               	movwf	___lwmod@divisor+1,c
  5076  00095C  0E0A               	movlw	10
  5077  00095E  6E0A               	movwf	___lwmod@divisor,c
  5078  000960  EC16  F008         	call	___lwmod	;wreg free
  5079  000964  5008               	movf	?___lwmod,w,c
  5080  000966  0F30               	addlw	48
  5081  000968  ECC3  F008         	call	i2_print_byte
  5082  00096C                     i2l135:
  5083                           
  5084                           ;transceiver.c: 294: if(number >= 100) print_byte('0' + ((number / 100) % 10));
  5085  00096C  500E               	movf	print_number_nospace@number+1,w,c
  5086  00096E  E104               	bnz	i2u124_40
  5087  000970  0E64               	movlw	100
  5088  000972  5C0D               	subwf	print_number_nospace@number,w,c
  5089  000974  A0D8               	btfss	status,0,c
  5090  000976  D018               	goto	i2l136
  5091  000978                     i2u124_40:
  5092  000978  0E00               	movlw	0
  5093  00097A  6E04               	movwf	___lwdiv@divisor+1,c
  5094  00097C  0E64               	movlw	100
  5095  00097E  6E03               	movwf	___lwdiv@divisor,c
  5096  000980  C00D  F001         	movff	print_number_nospace@number,___lwdiv@dividend
  5097  000984  C00E  F002         	movff	print_number_nospace@number+1,___lwdiv@dividend+1
  5098  000988  EC78  F007         	call	___lwdiv	;wreg free
  5099  00098C  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  5100  000990  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  5101  000994  0E00               	movlw	0
  5102  000996  6E0B               	movwf	___lwmod@divisor+1,c
  5103  000998  0E0A               	movlw	10
  5104  00099A  6E0A               	movwf	___lwmod@divisor,c
  5105  00099C  EC16  F008         	call	___lwmod	;wreg free
  5106  0009A0  5008               	movf	?___lwmod,w,c
  5107  0009A2  0F30               	addlw	48
  5108  0009A4  ECC3  F008         	call	i2_print_byte
  5109  0009A8                     i2l136:
  5110                           
  5111                           ;transceiver.c: 295: if(number >= 10) print_byte('0' + ((number / 10) % 10));
  5112  0009A8  500E               	movf	print_number_nospace@number+1,w,c
  5113  0009AA  E104               	bnz	i2u125_40
  5114  0009AC  0E0A               	movlw	10
  5115  0009AE  5C0D               	subwf	print_number_nospace@number,w,c
  5116  0009B0  A0D8               	btfss	status,0,c
  5117  0009B2  D018               	goto	i2l137
  5118  0009B4                     i2u125_40:
  5119  0009B4  0E00               	movlw	0
  5120  0009B6  6E04               	movwf	___lwdiv@divisor+1,c
  5121  0009B8  0E0A               	movlw	10
  5122  0009BA  6E03               	movwf	___lwdiv@divisor,c
  5123  0009BC  C00D  F001         	movff	print_number_nospace@number,___lwdiv@dividend
  5124  0009C0  C00E  F002         	movff	print_number_nospace@number+1,___lwdiv@dividend+1
  5125  0009C4  EC78  F007         	call	___lwdiv	;wreg free
  5126  0009C8  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  5127  0009CC  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  5128  0009D0  0E00               	movlw	0
  5129  0009D2  6E0B               	movwf	___lwmod@divisor+1,c
  5130  0009D4  0E0A               	movlw	10
  5131  0009D6  6E0A               	movwf	___lwmod@divisor,c
  5132  0009D8  EC16  F008         	call	___lwmod	;wreg free
  5133  0009DC  5008               	movf	?___lwmod,w,c
  5134  0009DE  0F30               	addlw	48
  5135  0009E0  ECC3  F008         	call	i2_print_byte
  5136  0009E4                     i2l137:
  5137                           
  5138                           ;transceiver.c: 296: print_byte('0' + (number % 10));
  5139  0009E4  C00D  F008         	movff	print_number_nospace@number,___lwmod@dividend
  5140  0009E8  C00E  F009         	movff	print_number_nospace@number+1,___lwmod@dividend+1
  5141  0009EC  0E00               	movlw	0
  5142  0009EE  6E0B               	movwf	___lwmod@divisor+1,c
  5143  0009F0  0E0A               	movlw	10
  5144  0009F2  6E0A               	movwf	___lwmod@divisor,c
  5145  0009F4  EC16  F008         	call	___lwmod	;wreg free
  5146  0009F8  5008               	movf	?___lwmod,w,c
  5147  0009FA  0F30               	addlw	48
  5148  0009FC  ECC3  F008         	call	i2_print_byte
  5149  000A00  0012               	return		;funcret
  5150  000A02                     __end_of_print_number_nospace:
  5151                           	opt stack 0
  5152                           pclatu	equ	0xFFB
  5153                           pclath	equ	0xFFA
  5154                           tblptru	equ	0xFF8
  5155                           tblptrh	equ	0xFF7
  5156                           tblptrl	equ	0xFF6
  5157                           tablat	equ	0xFF5
  5158                           prodh	equ	0xFF4
  5159                           prodl	equ	0xFF3
  5160                           intcon	equ	0xFF2
  5161                           postinc0	equ	0xFEE
  5162                           fsr0h	equ	0xFEA
  5163                           fsr0l	equ	0xFE9
  5164                           wreg	equ	0xFE8
  5165                           indf1	equ	0xFE7
  5166                           postdec1	equ	0xFE5
  5167                           fsr1h	equ	0xFE2
  5168                           fsr1l	equ	0xFE1
  5169                           bsr	equ	0xFE0
  5170                           indf2	equ	0xFDF
  5171                           postinc2	equ	0xFDE
  5172                           fsr2h	equ	0xFDA
  5173                           fsr2l	equ	0xFD9
  5174                           status	equ	0xFD8
  5175                           
  5176 ;; *************** function ___lwmod *****************
  5177 ;; Defined at:
  5178 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwmod.c"
  5179 ;; Parameters:    Size  Location     Type
  5180 ;;  dividend        2    7[COMRAM] unsigned int 
  5181 ;;  divisor         2    9[COMRAM] unsigned int 
  5182 ;; Auto vars:     Size  Location     Type
  5183 ;;  counter         1   11[COMRAM] unsigned char 
  5184 ;; Return value:  Size  Location     Type
  5185 ;;                  2    7[COMRAM] unsigned int 
  5186 ;; Registers used:
  5187 ;;		wreg, status,2, status,0
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 0/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5193 ;;      Params:         4       0       0       0
  5194 ;;      Locals:         1       0       0       0
  5195 ;;      Temps:          0       0       0       0
  5196 ;;      Totals:         5       0       0       0
  5197 ;;Total ram usage:        5 bytes
  5198 ;; Hardware stack levels used:    1
  5199 ;; This function calls:
  5200 ;;		Nothing
  5201 ;; This function is called by:
  5202 ;;		_print_number_nospace
  5203 ;; This function uses a non-reentrant model
  5204 ;;
  5205                           
  5206                           	psect	text24
  5207  00102C                     __ptext24:
  5208                           	opt stack 0
  5209  00102C                     ___lwmod:
  5210                           	opt stack 19
  5211                           
  5212                           ;incstack = 0
  5213  00102C  500A               	movf	___lwmod@divisor,w,c
  5214  00102E  100B               	iorwf	___lwmod@divisor+1,w,c
  5215  001030  B4D8               	btfsc	status,2,c
  5216  001032  D018               	goto	i2l815
  5217  001034  0E01               	movlw	1
  5218  001036  6E0C               	movwf	___lwmod@counter,c
  5219  001038  D004               	goto	i2l810
  5220  00103A  90D8               	bcf	status,0,c
  5221  00103C  360A               	rlcf	___lwmod@divisor,f,c
  5222  00103E  360B               	rlcf	___lwmod@divisor+1,f,c
  5223  001040  2A0C               	incf	___lwmod@counter,f,c
  5224  001042                     i2l810:
  5225  001042  AE0B               	btfss	___lwmod@divisor+1,7,c
  5226  001044  D7FA               	goto	i2l811
  5227  001046                     i2u117_40:
  5228  001046  500A               	movf	___lwmod@divisor,w,c
  5229  001048  5C08               	subwf	___lwmod@dividend,w,c
  5230  00104A  500B               	movf	___lwmod@divisor+1,w,c
  5231  00104C  5809               	subwfb	___lwmod@dividend+1,w,c
  5232  00104E  A0D8               	btfss	status,0,c
  5233  001050  D004               	goto	i2l814
  5234  001052  500A               	movf	___lwmod@divisor,w,c
  5235  001054  5E08               	subwf	___lwmod@dividend,f,c
  5236  001056  500B               	movf	___lwmod@divisor+1,w,c
  5237  001058  5A09               	subwfb	___lwmod@dividend+1,f,c
  5238  00105A                     i2l814:
  5239  00105A  90D8               	bcf	status,0,c
  5240  00105C  320B               	rrcf	___lwmod@divisor+1,f,c
  5241  00105E  320A               	rrcf	___lwmod@divisor,f,c
  5242  001060  2E0C               	decfsz	___lwmod@counter,f,c
  5243  001062  D7F1               	goto	i2u117_40
  5244  001064                     i2l815:
  5245  001064  C008  F008         	movff	___lwmod@dividend,?___lwmod
  5246  001068  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  5247  00106C  0012               	return		;funcret
  5248  00106E                     __end_of___lwmod:
  5249                           	opt stack 0
  5250                           pclatu	equ	0xFFB
  5251                           pclath	equ	0xFFA
  5252                           tblptru	equ	0xFF8
  5253                           tblptrh	equ	0xFF7
  5254                           tblptrl	equ	0xFF6
  5255                           tablat	equ	0xFF5
  5256                           prodh	equ	0xFF4
  5257                           prodl	equ	0xFF3
  5258                           intcon	equ	0xFF2
  5259                           postinc0	equ	0xFEE
  5260                           fsr0h	equ	0xFEA
  5261                           fsr0l	equ	0xFE9
  5262                           wreg	equ	0xFE8
  5263                           indf1	equ	0xFE7
  5264                           postdec1	equ	0xFE5
  5265                           fsr1h	equ	0xFE2
  5266                           fsr1l	equ	0xFE1
  5267                           bsr	equ	0xFE0
  5268                           indf2	equ	0xFDF
  5269                           postinc2	equ	0xFDE
  5270                           fsr2h	equ	0xFDA
  5271                           fsr2l	equ	0xFD9
  5272                           status	equ	0xFD8
  5273                           
  5274 ;; *************** function ___lwdiv *****************
  5275 ;; Defined at:
  5276 ;;		line 8 in file "/opt/microchip/xc8/v1.45/sources/common/lwdiv.c"
  5277 ;; Parameters:    Size  Location     Type
  5278 ;;  dividend        2    0[COMRAM] unsigned int 
  5279 ;;  divisor         2    2[COMRAM] unsigned int 
  5280 ;; Auto vars:     Size  Location     Type
  5281 ;;  quotient        2    4[COMRAM] unsigned int 
  5282 ;;  counter         1    6[COMRAM] unsigned char 
  5283 ;; Return value:  Size  Location     Type
  5284 ;;                  2    0[COMRAM] unsigned int 
  5285 ;; Registers used:
  5286 ;;		wreg, status,2, status,0
  5287 ;; Tracked objects:
  5288 ;;		On entry : 0/0
  5289 ;;		On exit  : 0/0
  5290 ;;		Unchanged: 0/0
  5291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5292 ;;      Params:         4       0       0       0
  5293 ;;      Locals:         3       0       0       0
  5294 ;;      Temps:          0       0       0       0
  5295 ;;      Totals:         7       0       0       0
  5296 ;;Total ram usage:        7 bytes
  5297 ;; Hardware stack levels used:    1
  5298 ;; This function calls:
  5299 ;;		Nothing
  5300 ;; This function is called by:
  5301 ;;		_print_number_nospace
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           	psect	text25
  5306  000EF0                     __ptext25:
  5307                           	opt stack 0
  5308  000EF0                     ___lwdiv:
  5309                           	opt stack 19
  5310                           
  5311                           ;incstack = 0
  5312  000EF0  0E00               	movlw	0
  5313  000EF2  6E06               	movwf	___lwdiv@quotient+1,c
  5314  000EF4  0E00               	movlw	0
  5315  000EF6  6E05               	movwf	___lwdiv@quotient,c
  5316  000EF8  5003               	movf	___lwdiv@divisor,w,c
  5317  000EFA  1004               	iorwf	___lwdiv@divisor+1,w,c
  5318  000EFC  B4D8               	btfsc	status,2,c
  5319  000EFE  D01C               	goto	i2l805
  5320  000F00  0E01               	movlw	1
  5321  000F02  6E07               	movwf	___lwdiv@counter,c
  5322  000F04  D004               	goto	i2l800
  5323  000F06  90D8               	bcf	status,0,c
  5324  000F08  3603               	rlcf	___lwdiv@divisor,f,c
  5325  000F0A  3604               	rlcf	___lwdiv@divisor+1,f,c
  5326  000F0C  2A07               	incf	___lwdiv@counter,f,c
  5327  000F0E                     i2l800:
  5328  000F0E  AE04               	btfss	___lwdiv@divisor+1,7,c
  5329  000F10  D7FA               	goto	i2l801
  5330  000F12                     i2u114_40:
  5331  000F12  90D8               	bcf	status,0,c
  5332  000F14  3605               	rlcf	___lwdiv@quotient,f,c
  5333  000F16  3606               	rlcf	___lwdiv@quotient+1,f,c
  5334  000F18  5003               	movf	___lwdiv@divisor,w,c
  5335  000F1A  5C01               	subwf	___lwdiv@dividend,w,c
  5336  000F1C  5004               	movf	___lwdiv@divisor+1,w,c
  5337  000F1E  5802               	subwfb	___lwdiv@dividend+1,w,c
  5338  000F20  A0D8               	btfss	status,0,c
  5339  000F22  D005               	goto	i2l804
  5340  000F24  5003               	movf	___lwdiv@divisor,w,c
  5341  000F26  5E01               	subwf	___lwdiv@dividend,f,c
  5342  000F28  5004               	movf	___lwdiv@divisor+1,w,c
  5343  000F2A  5A02               	subwfb	___lwdiv@dividend+1,f,c
  5344  000F2C  8005               	bsf	___lwdiv@quotient,0,c
  5345  000F2E                     i2l804:
  5346  000F2E  90D8               	bcf	status,0,c
  5347  000F30  3204               	rrcf	___lwdiv@divisor+1,f,c
  5348  000F32  3203               	rrcf	___lwdiv@divisor,f,c
  5349  000F34  2E07               	decfsz	___lwdiv@counter,f,c
  5350  000F36  D7ED               	goto	i2u114_40
  5351  000F38                     i2l805:
  5352  000F38  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  5353  000F3C  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5354  000F40  0012               	return		;funcret
  5355  000F42                     __end_of___lwdiv:
  5356                           	opt stack 0
  5357                           pclatu	equ	0xFFB
  5358                           pclath	equ	0xFFA
  5359                           tblptru	equ	0xFF8
  5360                           tblptrh	equ	0xFF7
  5361                           tblptrl	equ	0xFF6
  5362                           tablat	equ	0xFF5
  5363                           prodh	equ	0xFF4
  5364                           prodl	equ	0xFF3
  5365                           intcon	equ	0xFF2
  5366                           postinc0	equ	0xFEE
  5367                           fsr0h	equ	0xFEA
  5368                           fsr0l	equ	0xFE9
  5369                           wreg	equ	0xFE8
  5370                           indf1	equ	0xFE7
  5371                           postdec1	equ	0xFE5
  5372                           fsr1h	equ	0xFE2
  5373                           fsr1l	equ	0xFE1
  5374                           bsr	equ	0xFE0
  5375                           indf2	equ	0xFDF
  5376                           postinc2	equ	0xFDE
  5377                           fsr2h	equ	0xFDA
  5378                           fsr2l	equ	0xFD9
  5379                           status	equ	0xFD8
  5380                           
  5381 ;; *************** function _handle_usb_ctrl_out *****************
  5382 ;; Defined at:
  5383 ;;		line 1035 in file "transceiver.c"
  5384 ;; Parameters:    Size  Location     Type
  5385 ;;		None
  5386 ;; Auto vars:     Size  Location     Type
  5387 ;;  temp            1    4[COMRAM] unsigned char 
  5388 ;; Return value:  Size  Location     Type
  5389 ;;                  1    wreg      void 
  5390 ;; Registers used:
  5391 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5392 ;; Tracked objects:
  5393 ;;		On entry : 0/0
  5394 ;;		On exit  : 0/0
  5395 ;;		Unchanged: 0/0
  5396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5397 ;;      Params:         0       0       0       0
  5398 ;;      Locals:         1       0       0       0
  5399 ;;      Temps:          0       0       0       0
  5400 ;;      Totals:         1       0       0       0
  5401 ;;Total ram usage:        1 bytes
  5402 ;; Hardware stack levels used:    1
  5403 ;; Hardware stack levels required when called:    2
  5404 ;; This function calls:
  5405 ;;		_print_hex2
  5406 ;;		i2_print_text
  5407 ;; This function is called by:
  5408 ;;		_handle_usb_ctrl_output
  5409 ;; This function uses a non-reentrant model
  5410 ;;
  5411                           
  5412                           	psect	text26
  5413  000BA6                     __ptext26:
  5414                           	opt stack 0
  5415  000BA6                     _handle_usb_ctrl_out:
  5416                           	opt stack 21
  5417                           
  5418                           ;transceiver.c: 1039: uint8_t temp;
  5419                           ;transceiver.c: 1040: temp = *(EP0_OUT + 1);
  5420                           
  5421                           ;incstack = 0
  5422  000BA6  0100               	movlb	0	; () banked
  5423  000BA8  EE20 F001          	lfsr	2,1
  5424  000BAC  51B3               	movf	_EP0_OUT& (0+255),w,b
  5425  000BAE  26D9               	addwf	fsr2l,f,c
  5426  000BB0  51B4               	movf	(_EP0_OUT+1)& (0+255),w,b
  5427  000BB2  22DA               	addwfc	fsr2h,f,c
  5428  000BB4  50DF               	movf	indf2,w,c
  5429  000BB6  6E05               	movwf	handle_usb_ctrl_out@temp,c
  5430                           
  5431                           ; BSR set to: 0
  5432                           ;transceiver.c: 1042: data_count += temp;
  5433  000BB8  5005               	movf	handle_usb_ctrl_out@temp,w,c
  5434  000BBA  2637               	addwf	_data_count,f,c
  5435  000BBC  0E00               	movlw	0
  5436  000BBE  2238               	addwfc	_data_count+1,f,c
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;transceiver.c: 1045: print_text("ctrl_out ");
  5440  000BC0  0EF5               	movlw	low STR_5
  5441  000BC2  6E02               	movwf	i2print_text@s,c
  5442  000BC4  0E3F               	movlw	high STR_5
  5443  000BC6  6E03               	movwf	i2print_text@s+1,c
  5444  000BC8  ECF4  F008         	call	i2_print_text	;wreg free
  5445                           
  5446                           ;transceiver.c: 1046: print_hex2(setup_out_packet[0]);
  5447  000BCC  C048  FFD9         	movff	_setup_out_packet,fsr2l
  5448  000BD0  C049  FFDA         	movff	_setup_out_packet+1,fsr2h
  5449  000BD4  50DF               	movf	indf2,w,c
  5450  000BD6  ECC9  F007         	call	_print_hex2
  5451                           
  5452                           ;transceiver.c: 1047: print_hex2(setup_out_packet[1]);
  5453  000BDA  EE20 F001          	lfsr	2,1
  5454  000BDE  5048               	movf	_setup_out_packet,w,c
  5455  000BE0  26D9               	addwf	fsr2l,f,c
  5456  000BE2  5049               	movf	_setup_out_packet+1,w,c
  5457  000BE4  22DA               	addwfc	fsr2h,f,c
  5458  000BE6  50DF               	movf	indf2,w,c
  5459  000BE8  ECC9  F007         	call	_print_hex2
  5460                           
  5461                           ;transceiver.c: 1048: print_hex2(setup_out_packet[2]);
  5462  000BEC  EE20 F002          	lfsr	2,2
  5463  000BF0  5048               	movf	_setup_out_packet,w,c
  5464  000BF2  26D9               	addwf	fsr2l,f,c
  5465  000BF4  5049               	movf	_setup_out_packet+1,w,c
  5466  000BF6  22DA               	addwfc	fsr2h,f,c
  5467  000BF8  50DF               	movf	indf2,w,c
  5468  000BFA  ECC9  F007         	call	_print_hex2
  5469                           
  5470                           ;transceiver.c: 1049: print_hex2(setup_out_packet[3]);
  5471  000BFE  EE20 F003          	lfsr	2,3
  5472  000C02  5048               	movf	_setup_out_packet,w,c
  5473  000C04  26D9               	addwf	fsr2l,f,c
  5474  000C06  5049               	movf	_setup_out_packet+1,w,c
  5475  000C08  22DA               	addwfc	fsr2h,f,c
  5476  000C0A  50DF               	movf	indf2,w,c
  5477  000C0C  ECC9  F007         	call	_print_hex2
  5478                           
  5479                           ;transceiver.c: 1050: print_hex2(setup_out_packet[4]);
  5480  000C10  EE20 F004          	lfsr	2,4
  5481  000C14  5048               	movf	_setup_out_packet,w,c
  5482  000C16  26D9               	addwf	fsr2l,f,c
  5483  000C18  5049               	movf	_setup_out_packet+1,w,c
  5484  000C1A  22DA               	addwfc	fsr2h,f,c
  5485  000C1C  50DF               	movf	indf2,w,c
  5486  000C1E  ECC9  F007         	call	_print_hex2
  5487                           
  5488                           ;transceiver.c: 1051: print_hex2(setup_out_packet[5]);
  5489  000C22  EE20 F005          	lfsr	2,5
  5490  000C26  5048               	movf	_setup_out_packet,w,c
  5491  000C28  26D9               	addwf	fsr2l,f,c
  5492  000C2A  5049               	movf	_setup_out_packet+1,w,c
  5493  000C2C  22DA               	addwfc	fsr2h,f,c
  5494  000C2E  50DF               	movf	indf2,w,c
  5495  000C30  ECC9  F007         	call	_print_hex2
  5496                           
  5497                           ;transceiver.c: 1052: print_hex2(setup_out_packet[6]);
  5498  000C34  EE20 F006          	lfsr	2,6
  5499  000C38  5048               	movf	_setup_out_packet,w,c
  5500  000C3A  26D9               	addwf	fsr2l,f,c
  5501  000C3C  5049               	movf	_setup_out_packet+1,w,c
  5502  000C3E  22DA               	addwfc	fsr2h,f,c
  5503  000C40  50DF               	movf	indf2,w,c
  5504  000C42  ECC9  F007         	call	_print_hex2
  5505                           
  5506                           ;transceiver.c: 1053: print_hex2(setup_out_packet[7]);
  5507  000C46  EE20 F007          	lfsr	2,7
  5508  000C4A  5048               	movf	_setup_out_packet,w,c
  5509  000C4C  26D9               	addwf	fsr2l,f,c
  5510  000C4E  5049               	movf	_setup_out_packet+1,w,c
  5511  000C50  22DA               	addwfc	fsr2h,f,c
  5512  000C52  50DF               	movf	indf2,w,c
  5513  000C54  ECC9  F007         	call	_print_hex2
  5514                           
  5515                           ;transceiver.c: 1054: print_text("\n");
  5516  000C58  0EF3               	movlw	low (STR_7+13)
  5517  000C5A  6E02               	movwf	i2print_text@s,c
  5518  000C5C  0E3F               	movlw	high (STR_7+13)
  5519  000C5E  6E03               	movwf	i2print_text@s+1,c
  5520  000C60  ECF4  F008         	call	i2_print_text	;wreg free
  5521  000C64  0012               	return		;funcret
  5522  000C66                     __end_of_handle_usb_ctrl_out:
  5523                           	opt stack 0
  5524                           pclatu	equ	0xFFB
  5525                           pclath	equ	0xFFA
  5526                           tblptru	equ	0xFF8
  5527                           tblptrh	equ	0xFF7
  5528                           tblptrl	equ	0xFF6
  5529                           tablat	equ	0xFF5
  5530                           prodh	equ	0xFF4
  5531                           prodl	equ	0xFF3
  5532                           intcon	equ	0xFF2
  5533                           postinc0	equ	0xFEE
  5534                           fsr0h	equ	0xFEA
  5535                           fsr0l	equ	0xFE9
  5536                           wreg	equ	0xFE8
  5537                           indf1	equ	0xFE7
  5538                           postdec1	equ	0xFE5
  5539                           fsr1h	equ	0xFE2
  5540                           fsr1l	equ	0xFE1
  5541                           bsr	equ	0xFE0
  5542                           indf2	equ	0xFDF
  5543                           postinc2	equ	0xFDE
  5544                           fsr2h	equ	0xFDA
  5545                           fsr2l	equ	0xFD9
  5546                           status	equ	0xFD8
  5547                           
  5548 ;; *************** function i2_print_text *****************
  5549 ;; Defined at:
  5550 ;;		line 281 in file "transceiver.c"
  5551 ;; Parameters:    Size  Location     Type
  5552 ;;  s               2    1[COMRAM] PTR const unsigned char 
  5553 ;;		 -> STR_8(28), STR_7(15), STR_6(2), STR_5(10), 
  5554 ;;		 -> STR_4(2), STR_3(17), STR_2(2), STR_1(26), 
  5555 ;; Auto vars:     Size  Location     Type
  5556 ;;		None
  5557 ;; Return value:  Size  Location     Type
  5558 ;;                  1    wreg      void 
  5559 ;; Registers used:
  5560 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5561 ;; Tracked objects:
  5562 ;;		On entry : 0/0
  5563 ;;		On exit  : 0/0
  5564 ;;		Unchanged: 0/0
  5565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5566 ;;      Params:         2       0       0       0
  5567 ;;      Locals:         0       0       0       0
  5568 ;;      Temps:          0       0       0       0
  5569 ;;      Totals:         2       0       0       0
  5570 ;;Total ram usage:        2 bytes
  5571 ;; Hardware stack levels used:    1
  5572 ;; Hardware stack levels required when called:    1
  5573 ;; This function calls:
  5574 ;;		i2_print_byte
  5575 ;; This function is called by:
  5576 ;;		_usb_check_std_request
  5577 ;;		_handle_usb_ctrl_out
  5578 ;;		_handle_usb_ctrl_output
  5579 ;; This function uses a non-reentrant model
  5580 ;;
  5581                           
  5582                           	psect	text27
  5583  0011E8                     __ptext27:
  5584                           	opt stack 0
  5585  0011E8                     i2_print_text:
  5586                           	opt stack 22
  5587                           
  5588                           ;transceiver.c: 283: while(*s != 0)
  5589                           
  5590                           ;incstack = 0
  5591  0011E8  D00B               	goto	i2l128
  5592  0011EA                     
  5593                           ;transceiver.c: 284: {
  5594                           ;transceiver.c: 285: print_byte(*s);
  5595  0011EA  C002  FFF6         	movff	i2print_text@s,tblptrl
  5596  0011EE  C003  FFF7         	movff	i2print_text@s+1,tblptrh
  5597  0011F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5598  0011F2  6AF8               	clrf	tblptru,c
  5599  0011F4                     	endif
  5600  0011F4                     	if	0	;tblptru may be non-zero
  5601  0011F4                     	endif
  5602  0011F4  0008               	tblrd		*
  5603  0011F6  50F5               	movf	tablat,w,c
  5604  0011F8  ECC3  F008         	call	i2_print_byte
  5605                           
  5606                           ;transceiver.c: 286: s++;
  5607  0011FC  4A02               	infsnz	i2print_text@s,f,c
  5608  0011FE  2A03               	incf	i2print_text@s+1,f,c
  5609  001200                     i2l128:
  5610  001200  C002  FFF6         	movff	i2print_text@s,tblptrl
  5611  001204  C003  FFF7         	movff	i2print_text@s+1,tblptrh
  5612  001208                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5613  001208  6AF8               	clrf	tblptru,c
  5614  00120A                     	endif
  5615  00120A                     	if	0	;tblptru may be non-zero
  5616  00120A                     	endif
  5617  00120A  0008               	tblrd		*
  5618  00120C  50F5               	movf	tablat,w,c
  5619  00120E  0900               	iorlw	0
  5620  001210  B4D8               	btfsc	status,2,c
  5621  001212  0012               	return	
  5622  001214  D7EA               	goto	i2l129
  5623  001216                     __end_ofi2_print_text:
  5624                           	opt stack 0
  5625                           pclatu	equ	0xFFB
  5626                           pclath	equ	0xFFA
  5627                           tblptru	equ	0xFF8
  5628                           tblptrh	equ	0xFF7
  5629                           tblptrl	equ	0xFF6
  5630                           tablat	equ	0xFF5
  5631                           prodh	equ	0xFF4
  5632                           prodl	equ	0xFF3
  5633                           intcon	equ	0xFF2
  5634                           postinc0	equ	0xFEE
  5635                           fsr0h	equ	0xFEA
  5636                           fsr0l	equ	0xFE9
  5637                           wreg	equ	0xFE8
  5638                           indf1	equ	0xFE7
  5639                           postdec1	equ	0xFE5
  5640                           fsr1h	equ	0xFE2
  5641                           fsr1l	equ	0xFE1
  5642                           bsr	equ	0xFE0
  5643                           indf2	equ	0xFDF
  5644                           postinc2	equ	0xFDE
  5645                           fsr2h	equ	0xFDA
  5646                           fsr2l	equ	0xFD9
  5647                           status	equ	0xFD8
  5648                           
  5649 ;; *************** function _print_hex2 *****************
  5650 ;; Defined at:
  5651 ;;		line 310 in file "transceiver.c"
  5652 ;; Parameters:    Size  Location     Type
  5653 ;;  number          1    wreg     unsigned char 
  5654 ;; Auto vars:     Size  Location     Type
  5655 ;;  number          1    3[COMRAM] unsigned char 
  5656 ;; Return value:  Size  Location     Type
  5657 ;;                  1    wreg      void 
  5658 ;; Registers used:
  5659 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5660 ;; Tracked objects:
  5661 ;;		On entry : 0/0
  5662 ;;		On exit  : 0/0
  5663 ;;		Unchanged: 0/0
  5664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5665 ;;      Params:         0       0       0       0
  5666 ;;      Locals:         1       0       0       0
  5667 ;;      Temps:          2       0       0       0
  5668 ;;      Totals:         3       0       0       0
  5669 ;;Total ram usage:        3 bytes
  5670 ;; Hardware stack levels used:    1
  5671 ;; Hardware stack levels required when called:    1
  5672 ;; This function calls:
  5673 ;;		i2_print_byte
  5674 ;; This function is called by:
  5675 ;;		_handle_usb_ctrl_out
  5676 ;; This function uses a non-reentrant model
  5677 ;;
  5678                           
  5679                           	psect	text28
  5680  000F92                     __ptext28:
  5681                           	opt stack 0
  5682  000F92                     _print_hex2:
  5683                           	opt stack 21
  5684                           
  5685                           ;incstack = 0
  5686                           ;print_hex2@number stored from wreg
  5687  000F92  6E04               	movwf	print_hex2@number,c
  5688                           
  5689                           ;transceiver.c: 312: print_byte(hex_table[number >> 4]);
  5690  000F94  3804               	swapf	print_hex2@number,w,c
  5691  000F96  0B0F               	andlw	15
  5692  000F98  6E02               	movwf	??_print_hex2& (0+255),c
  5693  000F9A  6A03               	clrf	(??_print_hex2+1)& (0+255),c
  5694  000F9C  0EF3               	movlw	low _hex_table
  5695  000F9E  2402               	addwf	??_print_hex2,w,c
  5696  000FA0  6EF6               	movwf	tblptrl,c
  5697  000FA2  0E3E               	movlw	high _hex_table
  5698  000FA4  2003               	addwfc	??_print_hex2+1,w,c
  5699  000FA6  6EF7               	movwf	tblptrh,c
  5700  000FA8                     	if	1	;There are 3 active tblptr bytes
  5701  000FA8  6AF8               	clrf	tblptru,c
  5702  000FAA  0E00               	movlw	low (__mediumconst shr (0+16))
  5703  000FAC  22F8               	addwfc	tblptru,f,c
  5704  000FAE                     	endif
  5705  000FAE  0008               	tblrd		*
  5706  000FB0  50F5               	movf	tablat,w,c
  5707  000FB2  ECC3  F008         	call	i2_print_byte
  5708                           
  5709                           ;transceiver.c: 313: print_byte(hex_table[number & 0xf]);
  5710  000FB6  5004               	movf	print_hex2@number,w,c
  5711  000FB8  0B0F               	andlw	15
  5712  000FBA  6E02               	movwf	??_print_hex2& (0+255),c
  5713  000FBC  6A03               	clrf	(??_print_hex2+1)& (0+255),c
  5714  000FBE  0EF3               	movlw	low _hex_table
  5715  000FC0  2402               	addwf	??_print_hex2,w,c
  5716  000FC2  6EF6               	movwf	tblptrl,c
  5717  000FC4  0E3E               	movlw	high _hex_table
  5718  000FC6  2003               	addwfc	??_print_hex2+1,w,c
  5719  000FC8  6EF7               	movwf	tblptrh,c
  5720  000FCA                     	if	1	;There are 3 active tblptr bytes
  5721  000FCA  6AF8               	clrf	tblptru,c
  5722  000FCC  0E00               	movlw	low (__mediumconst shr (0+16))
  5723  000FCE  22F8               	addwfc	tblptru,f,c
  5724  000FD0                     	endif
  5725  000FD0  0008               	tblrd		*
  5726  000FD2  50F5               	movf	tablat,w,c
  5727  000FD4  ECC3  F008         	call	i2_print_byte
  5728                           
  5729                           ;transceiver.c: 314: print_byte(' ');
  5730  000FD8  0E20               	movlw	32
  5731  000FDA  ECC3  F008         	call	i2_print_byte
  5732  000FDE  0012               	return		;funcret
  5733  000FE0                     __end_of_print_hex2:
  5734                           	opt stack 0
  5735                           pclatu	equ	0xFFB
  5736                           pclath	equ	0xFFA
  5737                           tblptru	equ	0xFF8
  5738                           tblptrh	equ	0xFF7
  5739                           tblptrl	equ	0xFF6
  5740                           tablat	equ	0xFF5
  5741                           prodh	equ	0xFF4
  5742                           prodl	equ	0xFF3
  5743                           intcon	equ	0xFF2
  5744                           postinc0	equ	0xFEE
  5745                           fsr0h	equ	0xFEA
  5746                           fsr0l	equ	0xFE9
  5747                           wreg	equ	0xFE8
  5748                           indf1	equ	0xFE7
  5749                           postdec1	equ	0xFE5
  5750                           fsr1h	equ	0xFE2
  5751                           fsr1l	equ	0xFE1
  5752                           bsr	equ	0xFE0
  5753                           indf2	equ	0xFDF
  5754                           postinc2	equ	0xFDE
  5755                           fsr2h	equ	0xFDA
  5756                           fsr2l	equ	0xFD9
  5757                           status	equ	0xFD8
  5758                           
  5759 ;; *************** function i2_print_byte *****************
  5760 ;; Defined at:
  5761 ;;		line 268 in file "transceiver.c"
  5762 ;; Parameters:    Size  Location     Type
  5763 ;;  c               1    wreg     unsigned char 
  5764 ;; Auto vars:     Size  Location     Type
  5765 ;;  c               1    0[COMRAM] unsigned char 
  5766 ;; Return value:  Size  Location     Type
  5767 ;;                  1    wreg      void 
  5768 ;; Registers used:
  5769 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5770 ;; Tracked objects:
  5771 ;;		On entry : 0/0
  5772 ;;		On exit  : 0/0
  5773 ;;		Unchanged: 0/0
  5774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5775 ;;      Params:         0       0       0       0
  5776 ;;      Locals:         1       0       0       0
  5777 ;;      Temps:          0       0       0       0
  5778 ;;      Totals:         1       0       0       0
  5779 ;;Total ram usage:        1 bytes
  5780 ;; Hardware stack levels used:    1
  5781 ;; This function calls:
  5782 ;;		Nothing
  5783 ;; This function is called by:
  5784 ;;		_print_number_nospace
  5785 ;;		_print_number
  5786 ;;		_print_hex2
  5787 ;;		i2_print_text
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           	psect	text29
  5792  001186                     __ptext29:
  5793                           	opt stack 0
  5794  001186                     i2_print_byte:
  5795                           	opt stack 22
  5796                           
  5797                           ;incstack = 0
  5798                           ;i2print_byte@c stored from wreg
  5799  001186  6E01               	movwf	i2print_byte@c,c
  5800                           
  5801                           ;transceiver.c: 270: if(serial_out_count < 256)
  5802  001188  0100               	movlb	0	; () banked
  5803  00118A  0583               	decf	(_serial_out_count+1)& (0+255),w,b
  5804  00118C  B0D8               	btfsc	status,0,c
  5805  00118E  0012               	return	
  5806                           
  5807                           ; BSR set to: 0
  5808                           ;transceiver.c: 271: {
  5809                           ;transceiver.c: 272: serial_out_buffer[serial_out_ptr++] = c;
  5810  001190  0E00               	movlw	low _serial_out_buffer
  5811  001192  2439               	addwf	_serial_out_ptr,w,c
  5812  001194  6ED9               	movwf	fsr2l,c
  5813  001196  0E01               	movlw	high _serial_out_buffer
  5814  001198  203A               	addwfc	_serial_out_ptr+1,w,c
  5815  00119A  6EDA               	movwf	fsr2h,c
  5816  00119C  C001  FFDF         	movff	i2print_byte@c,indf2
  5817                           
  5818                           ; BSR set to: 0
  5819  0011A0  4A39               	infsnz	_serial_out_ptr,f,c
  5820  0011A2  2A3A               	incf	_serial_out_ptr+1,f,c
  5821                           
  5822                           ; BSR set to: 0
  5823                           ;transceiver.c: 273: serial_out_count++;
  5824  0011A4  4B82               	infsnz	_serial_out_count& (0+255),f,b
  5825  0011A6  2B83               	incf	(_serial_out_count+1)& (0+255),f,b
  5826                           
  5827                           ; BSR set to: 0
  5828                           ;transceiver.c: 274: if(serial_out_ptr >= 256)
  5829  0011A8  043A               	decf	_serial_out_ptr+1,w,c
  5830  0011AA  A0D8               	btfss	status,0,c
  5831  0011AC  0012               	return	
  5832                           
  5833                           ; BSR set to: 0
  5834                           ;transceiver.c: 275: {
  5835                           ;transceiver.c: 276: serial_out_ptr = 0;
  5836  0011AE  0E00               	movlw	0
  5837  0011B0  6E3A               	movwf	_serial_out_ptr+1,c
  5838  0011B2  0E00               	movlw	0
  5839  0011B4  6E39               	movwf	_serial_out_ptr,c
  5840                           
  5841                           ; BSR set to: 0
  5842  0011B6  0012               	return	
  5843  0011B8                     __end_ofi2_print_byte:
  5844                           	opt stack 0
  5845                           pclatu	equ	0xFFB
  5846                           pclath	equ	0xFFA
  5847                           tblptru	equ	0xFF8
  5848                           tblptrh	equ	0xFF7
  5849                           tblptrl	equ	0xFF6
  5850                           tablat	equ	0xFF5
  5851                           prodh	equ	0xFF4
  5852                           prodl	equ	0xFF3
  5853                           intcon	equ	0xFF2
  5854                           postinc0	equ	0xFEE
  5855                           fsr0h	equ	0xFEA
  5856                           fsr0l	equ	0xFE9
  5857                           wreg	equ	0xFE8
  5858                           indf1	equ	0xFE7
  5859                           postdec1	equ	0xFE5
  5860                           fsr1h	equ	0xFE2
  5861                           fsr1l	equ	0xFE1
  5862                           bsr	equ	0xFE0
  5863                           indf2	equ	0xFDF
  5864                           postinc2	equ	0xFDE
  5865                           fsr2h	equ	0xFDA
  5866                           fsr2l	equ	0xFD9
  5867                           status	equ	0xFD8
  5868                           
  5869 ;; *************** function _handle_usb_ctrl_input *****************
  5870 ;; Defined at:
  5871 ;;		line 1109 in file "transceiver.c"
  5872 ;; Parameters:    Size  Location     Type
  5873 ;;		None
  5874 ;; Auto vars:     Size  Location     Type
  5875 ;;		None
  5876 ;; Return value:  Size  Location     Type
  5877 ;;                  1    wreg      void 
  5878 ;; Registers used:
  5879 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5880 ;; Tracked objects:
  5881 ;;		On entry : 0/0
  5882 ;;		On exit  : 0/0
  5883 ;;		Unchanged: 0/0
  5884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5885 ;;      Params:         0       0       0       0
  5886 ;;      Locals:         0       0       0       0
  5887 ;;      Temps:          0       0       0       0
  5888 ;;      Totals:         0       0       0       0
  5889 ;;Total ram usage:        0 bytes
  5890 ;; Hardware stack levels used:    1
  5891 ;; Hardware stack levels required when called:    1
  5892 ;; This function calls:
  5893 ;;		_handle_usb_ctrl_in
  5894 ;;		_usb_prepare_setup
  5895 ;; This function is called by:
  5896 ;;		_handle_usb_transaction
  5897 ;; This function uses a non-reentrant model
  5898 ;;
  5899                           
  5900                           	psect	text30
  5901  000E90                     __ptext30:
  5902                           	opt stack 0
  5903  000E90                     _handle_usb_ctrl_input:
  5904                           	opt stack 23
  5905                           
  5906                           ;transceiver.c: 1113: if(usb_state == 4)
  5907                           
  5908                           ; BSR set to: 0
  5909                           ;incstack = 0
  5910  000E90  0E04               	movlw	4
  5911  000E92  1841               	xorwf	_usb_state,w,c
  5912  000E94  A4D8               	btfss	status,2,c
  5913  000E96  D010               	goto	i2l317
  5914                           
  5915                           ;transceiver.c: 1114: {
  5916                           ;transceiver.c: 1116: UADDR = *(setup_out_packet + 2);
  5917  000E98  EE20 F002          	lfsr	2,2
  5918  000E9C  5048               	movf	_setup_out_packet,w,c
  5919  000E9E  26D9               	addwf	fsr2l,f,c
  5920  000EA0  5049               	movf	_setup_out_packet+1,w,c
  5921  000EA2  22DA               	addwfc	fsr2h,f,c
  5922  000EA4  50DF               	movf	indf2,w,c
  5923  000EA6  010F               	movlb	15	; () banked
  5924  000EA8  6F5C               	movwf	92,b	;volatile
  5925                           
  5926                           ; BSR set to: 15
  5927                           ;transceiver.c: 1118: if(!UADDR)
  5928  000EAA  515C               	movf	92,w,b	;volatile
  5929  000EAC  A4D8               	btfss	status,2,c
  5930  000EAE  D002               	goto	i2l316
  5931                           
  5932                           ; BSR set to: 15
  5933                           ;transceiver.c: 1119: {
  5934                           ;transceiver.c: 1120: usb_state = 3;
  5935  000EB0  0E03               	movlw	3
  5936  000EB2  D001               	goto	L3
  5937  000EB4                     i2l316:
  5938                           
  5939                           ; BSR set to: 15
  5940                           ;transceiver.c: 1122: else
  5941                           ;transceiver.c: 1123: {
  5942                           ;transceiver.c: 1124: usb_state = 5;
  5943                           
  5944                           ; BSR set to: 15
  5945  000EB4  0E05               	movlw	5
  5946  000EB6                     L3:
  5947  000EB6  6E41               	movwf	_usb_state,c
  5948  000EB8                     i2l317:
  5949                           
  5950                           ;transceiver.c: 1125: }
  5951                           ;transceiver.c: 1126: }
  5952                           ;transceiver.c: 1129: if(ctrl_trf_state == 1)
  5953                           
  5954                           ; BSR set to: 15
  5955                           
  5956                           ; BSR set to: 15
  5957  000EB8  0440               	decf	_ctrl_trf_state,w,c
  5958  000EBA  A4D8               	btfss	status,2,c
  5959  000EBC  D016               	goto	i2l318
  5960                           
  5961                           ;transceiver.c: 1130: {
  5962                           ;transceiver.c: 1131: handle_usb_ctrl_in();
  5963  000EBE  EC87  F006         	call	_handle_usb_ctrl_in	;wreg free
  5964                           
  5965                           ;transceiver.c: 1134: if(*(EP0_IN) & (1 << 6))
  5966  000EC2  C04C  FFD9         	movff	_EP0_IN,fsr2l
  5967  000EC6  C04D  FFDA         	movff	_EP0_IN+1,fsr2h
  5968  000ECA  ACDF               	btfss	indf2,6,c
  5969  000ECC  D007               	goto	i2l319
  5970                           
  5971                           ;transceiver.c: 1135: {
  5972                           ;transceiver.c: 1137: *(EP0_IN) = (0x80 | 0x00 | 0x08);
  5973  000ECE  C04C  FFD9         	movff	_EP0_IN,fsr2l
  5974  000ED2  C04D  FFDA         	movff	_EP0_IN+1,fsr2h
  5975  000ED6  0E88               	movlw	136
  5976  000ED8  6EDF               	movwf	indf2,c
  5977                           
  5978                           ;transceiver.c: 1138: }
  5979  000EDA  0012               	return	
  5980  000EDC                     i2l319:
  5981                           
  5982                           ;transceiver.c: 1139: else
  5983                           ;transceiver.c: 1140: {
  5984                           ;transceiver.c: 1142: *(EP0_IN) = (0x80 | 0x40 | 0x08);
  5985  000EDC  C04C  FFD9         	movff	_EP0_IN,fsr2l
  5986  000EE0  C04D  FFDA         	movff	_EP0_IN+1,fsr2h
  5987  000EE4  0EC8               	movlw	200
  5988  000EE6  6EDF               	movwf	indf2,c
  5989                           
  5990                           ;transceiver.c: 1143: }
  5991                           ;transceiver.c: 1144: }
  5992  000EE8  0012               	return	
  5993  000EEA                     i2l318:
  5994                           
  5995                           ;transceiver.c: 1145: else
  5996                           ;transceiver.c: 1146: {
  5997                           ;transceiver.c: 1147: usb_prepare_setup();
  5998  000EEA  ECA1  F007         	call	_usb_prepare_setup	;wreg free
  5999  000EEE  0012               	return	
  6000  000EF0                     __end_of_handle_usb_ctrl_input:
  6001                           	opt stack 0
  6002                           pclatu	equ	0xFFB
  6003                           pclath	equ	0xFFA
  6004                           tblptru	equ	0xFF8
  6005                           tblptrh	equ	0xFF7
  6006                           tblptrl	equ	0xFF6
  6007                           tablat	equ	0xFF5
  6008                           prodh	equ	0xFF4
  6009                           prodl	equ	0xFF3
  6010                           intcon	equ	0xFF2
  6011                           postinc0	equ	0xFEE
  6012                           fsr0h	equ	0xFEA
  6013                           fsr0l	equ	0xFE9
  6014                           wreg	equ	0xFE8
  6015                           indf1	equ	0xFE7
  6016                           postdec1	equ	0xFE5
  6017                           fsr1h	equ	0xFE2
  6018                           fsr1l	equ	0xFE1
  6019                           bsr	equ	0xFE0
  6020                           indf2	equ	0xFDF
  6021                           postinc2	equ	0xFDE
  6022                           fsr2h	equ	0xFDA
  6023                           fsr2l	equ	0xFD9
  6024                           status	equ	0xFD8
  6025                           
  6026 ;; *************** function _handle_usb_ctrl_in *****************
  6027 ;; Defined at:
  6028 ;;		line 879 in file "transceiver.c"
  6029 ;; Parameters:    Size  Location     Type
  6030 ;;		None
  6031 ;; Auto vars:     Size  Location     Type
  6032 ;;  fragment        2    4[COMRAM] unsigned int 
  6033 ;;  i               1    3[COMRAM] unsigned char 
  6034 ;; Return value:  Size  Location     Type
  6035 ;;                  1    wreg      void 
  6036 ;; Registers used:
  6037 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6038 ;; Tracked objects:
  6039 ;;		On entry : 0/0
  6040 ;;		On exit  : 0/0
  6041 ;;		Unchanged: 0/0
  6042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6043 ;;      Params:         0       0       0       0
  6044 ;;      Locals:         3       0       0       0
  6045 ;;      Temps:          3       0       0       0
  6046 ;;      Totals:         6       0       0       0
  6047 ;;Total ram usage:        6 bytes
  6048 ;; Hardware stack levels used:    1
  6049 ;; This function calls:
  6050 ;;		Nothing
  6051 ;; This function is called by:
  6052 ;;		_handle_usb_ctrl_setup
  6053 ;;		_handle_usb_ctrl_input
  6054 ;; This function uses a non-reentrant model
  6055 ;;
  6056                           
  6057                           	psect	text31
  6058  000D0E                     __ptext31:
  6059                           	opt stack 0
  6060  000D0E                     _handle_usb_ctrl_in:
  6061                           	opt stack 22
  6062                           
  6063                           ;transceiver.c: 886: uint16_t fragment = data_count;
  6064                           
  6065                           ;incstack = 0
  6066  000D0E  C037  F005         	movff	_data_count,handle_usb_ctrl_in@fragment
  6067  000D12  C038  F006         	movff	_data_count+1,handle_usb_ctrl_in@fragment+1
  6068                           
  6069                           ;transceiver.c: 887: if(fragment > 8)
  6070  000D16  5006               	movf	handle_usb_ctrl_in@fragment+1,w,c
  6071  000D18  E104               	bnz	i2u150_40
  6072  000D1A  0E09               	movlw	9
  6073  000D1C  5C05               	subwf	handle_usb_ctrl_in@fragment,w,c
  6074  000D1E  A0D8               	btfss	status,0,c
  6075  000D20  D004               	goto	i2l278
  6076  000D22                     i2u150_40:
  6077                           
  6078                           ;transceiver.c: 888: {
  6079                           ;transceiver.c: 889: fragment = 8;
  6080  000D22  0E00               	movlw	0
  6081  000D24  6E06               	movwf	handle_usb_ctrl_in@fragment+1,c
  6082  000D26  0E08               	movlw	8
  6083  000D28  6E05               	movwf	handle_usb_ctrl_in@fragment,c
  6084  000D2A                     i2l278:
  6085                           
  6086                           ;transceiver.c: 890: }
  6087                           ;transceiver.c: 892: *(EP0_IN + 1) = (fragment);
  6088  000D2A  EE20 F001          	lfsr	2,1
  6089  000D2E  504C               	movf	_EP0_IN,w,c
  6090  000D30  26D9               	addwf	fsr2l,f,c
  6091  000D32  504D               	movf	_EP0_IN+1,w,c
  6092  000D34  22DA               	addwfc	fsr2h,f,c
  6093  000D36  C005  FFDF         	movff	handle_usb_ctrl_in@fragment,indf2
  6094                           
  6095                           ;transceiver.c: 895: uint8_t i;
  6096                           ;transceiver.c: 896: for(i = 0; i < fragment; i++)
  6097  000D3A  0E00               	movlw	0
  6098  000D3C  6E04               	movwf	handle_usb_ctrl_in@i,c
  6099  000D3E  D025               	goto	i2l279
  6100  000D40                     
  6101                           ;transceiver.c: 897: {
  6102                           ;transceiver.c: 898: setup_in_packet[i] = data_ptr[i];
  6103  000D40  5004               	movf	handle_usb_ctrl_in@i,w,c
  6104  000D42  0D01               	mullw	1
  6105  000D44  50F3               	movf	prodl,w,c
  6106  000D46  2434               	addwf	_data_ptr,w,c
  6107  000D48  6E01               	movwf	??_handle_usb_ctrl_in& (0+255),c
  6108  000D4A  50F4               	movf	prodh,w,c
  6109  000D4C  2035               	addwfc	_data_ptr+1,w,c
  6110  000D4E  6E02               	movwf	(??_handle_usb_ctrl_in+1)& (0+255),c
  6111  000D50  0E00               	movlw	0
  6112  000D52  2036               	addwfc	_data_ptr+2,w,c
  6113  000D54  6E03               	movwf	(??_handle_usb_ctrl_in+2)& (0+255),c
  6114  000D56  C001  FFF6         	movff	??_handle_usb_ctrl_in,tblptrl
  6115  000D5A  C002  FFF7         	movff	??_handle_usb_ctrl_in+1,tblptrh
  6116  000D5E  C003  FFF8         	movff	??_handle_usb_ctrl_in+2,tblptru
  6117  000D62  5004               	movf	handle_usb_ctrl_in@i,w,c
  6118  000D64  0D01               	mullw	1
  6119  000D66  50F3               	movf	prodl,w,c
  6120  000D68  2446               	addwf	_setup_in_packet,w,c
  6121  000D6A  6ED9               	movwf	fsr2l,c
  6122  000D6C  50F4               	movf	prodh,w,c
  6123  000D6E  2047               	addwfc	_setup_in_packet+1,w,c
  6124  000D70  6EDA               	movwf	fsr2h,c
  6125  000D72  BAF8               	btfsc	tblptru,5,c
  6126  000D74  D003               	bra	i2u151_47
  6127  000D76  0008               	tblrd		*
  6128  000D78  50F5               	movf	tablat,w,c
  6129  000D7A  D005               	bra	i2u151_40
  6130  000D7C                     i2u151_47:
  6131  000D7C  CFF6 FFE1          	movff	tblptrl,fsr1l
  6132  000D80  CFF7 FFE2          	movff	tblptrh,fsr1h
  6133  000D84  50E7               	movf	indf1,w,c
  6134  000D86                     i2u151_40:
  6135  000D86  6EDF               	movwf	indf2,c
  6136  000D88  2A04               	incf	handle_usb_ctrl_in@i,f,c
  6137  000D8A                     i2l279:
  6138  000D8A  5004               	movf	handle_usb_ctrl_in@i,w,c
  6139  000D8C  6E01               	movwf	??_handle_usb_ctrl_in& (0+255),c
  6140  000D8E  6A02               	clrf	(??_handle_usb_ctrl_in+1)& (0+255),c
  6141  000D90  5005               	movf	handle_usb_ctrl_in@fragment,w,c
  6142  000D92  5C01               	subwf	??_handle_usb_ctrl_in,w,c
  6143  000D94  5006               	movf	handle_usb_ctrl_in@fragment+1,w,c
  6144  000D96  5802               	subwfb	??_handle_usb_ctrl_in+1,w,c
  6145  000D98  A0D8               	btfss	status,0,c
  6146  000D9A  D7D2               	goto	i2l280
  6147                           
  6148                           ;transceiver.c: 899: }
  6149                           ;transceiver.c: 900: data_ptr += fragment;
  6150  000D9C  C005  FFE8         	movff	handle_usb_ctrl_in@fragment,wreg
  6151  000DA0  2634               	addwf	_data_ptr,f,c
  6152  000DA2  C006  FFE8         	movff	handle_usb_ctrl_in@fragment+1,wreg
  6153  000DA6  2235               	addwfc	_data_ptr+1,f,c
  6154  000DA8  0E00               	movlw	0
  6155  000DAA  2236               	addwfc	_data_ptr+2,f,c
  6156                           
  6157                           ;transceiver.c: 901: data_count -= fragment;
  6158  000DAC  5005               	movf	handle_usb_ctrl_in@fragment,w,c
  6159  000DAE  5E37               	subwf	_data_count,f,c
  6160  000DB0  5006               	movf	handle_usb_ctrl_in@fragment+1,w,c
  6161  000DB2  5A38               	subwfb	_data_count+1,f,c
  6162  000DB4  0012               	return		;funcret
  6163  000DB6                     __end_of_handle_usb_ctrl_in:
  6164                           	opt stack 0
  6165                           pclatu	equ	0xFFB
  6166                           pclath	equ	0xFFA
  6167                           tblptru	equ	0xFF8
  6168                           tblptrh	equ	0xFF7
  6169                           tblptrl	equ	0xFF6
  6170                           tablat	equ	0xFF5
  6171                           prodh	equ	0xFF4
  6172                           prodl	equ	0xFF3
  6173                           intcon	equ	0xFF2
  6174                           postinc0	equ	0xFEE
  6175                           fsr0h	equ	0xFEA
  6176                           fsr0l	equ	0xFE9
  6177                           wreg	equ	0xFE8
  6178                           indf1	equ	0xFE7
  6179                           postdec1	equ	0xFE5
  6180                           fsr1h	equ	0xFE2
  6181                           fsr1l	equ	0xFE1
  6182                           bsr	equ	0xFE0
  6183                           indf2	equ	0xFDF
  6184                           postinc2	equ	0xFDE
  6185                           fsr2h	equ	0xFDA
  6186                           fsr2l	equ	0xFD9
  6187                           status	equ	0xFD8
  6188                           
  6189 ;; *************** function _handle_usb_stall *****************
  6190 ;; Defined at:
  6191 ;;		line 711 in file "transceiver.c"
  6192 ;; Parameters:    Size  Location     Type
  6193 ;;		None
  6194 ;; Auto vars:     Size  Location     Type
  6195 ;;		None
  6196 ;; Return value:  Size  Location     Type
  6197 ;;                  1    wreg      void 
  6198 ;; Registers used:
  6199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6200 ;; Tracked objects:
  6201 ;;		On entry : 0/0
  6202 ;;		On exit  : 0/0
  6203 ;;		Unchanged: 0/0
  6204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6205 ;;      Params:         0       0       0       0
  6206 ;;      Locals:         0       0       0       0
  6207 ;;      Temps:          0       0       0       0
  6208 ;;      Totals:         0       0       0       0
  6209 ;;Total ram usage:        0 bytes
  6210 ;; Hardware stack levels used:    1
  6211 ;; Hardware stack levels required when called:    1
  6212 ;; This function calls:
  6213 ;;		_usb_prepare_setup
  6214 ;; This function is called by:
  6215 ;;		_isr
  6216 ;; This function uses a non-reentrant model
  6217 ;;
  6218                           
  6219                           	psect	text32
  6220  0012F8                     __ptext32:
  6221                           	opt stack 0
  6222  0012F8                     _handle_usb_stall:
  6223                           	opt stack 24
  6224                           
  6225                           ;transceiver.c: 713: if(UEP0bits.EPSTALL)
  6226                           
  6227                           ;incstack = 0
  6228  0012F8  010F               	movlb	15	; () banked
  6229  0012FA  A153               	btfss	83,0,b	;volatile
  6230  0012FC  D004               	goto	i2l246
  6231                           
  6232                           ; BSR set to: 15
  6233                           ;transceiver.c: 714: {
  6234                           ;transceiver.c: 715: usb_prepare_setup();
  6235  0012FE  ECA1  F007         	call	_usb_prepare_setup	;wreg free
  6236                           
  6237                           ;transceiver.c: 716: UEP0bits.EPSTALL = 0;
  6238  001302  010F               	movlb	15	; () banked
  6239  001304  9153               	bcf	83,0,b	;volatile
  6240  001306                     i2l246:
  6241                           
  6242                           ; BSR set to: 15
  6243                           ;transceiver.c: 717: }
  6244                           ;transceiver.c: 719: UIRbits.STALLIF = 0;
  6245                           
  6246                           ; BSR set to: 15
  6247  001306  9A62               	bcf	3938,5,c	;volatile
  6248                           
  6249                           ; BSR set to: 15
  6250  001308  0012               	return		;funcret
  6251  00130A                     __end_of_handle_usb_stall:
  6252                           	opt stack 0
  6253                           pclatu	equ	0xFFB
  6254                           pclath	equ	0xFFA
  6255                           tblptru	equ	0xFF8
  6256                           tblptrh	equ	0xFF7
  6257                           tblptrl	equ	0xFF6
  6258                           tablat	equ	0xFF5
  6259                           prodh	equ	0xFF4
  6260                           prodl	equ	0xFF3
  6261                           intcon	equ	0xFF2
  6262                           postinc0	equ	0xFEE
  6263                           fsr0h	equ	0xFEA
  6264                           fsr0l	equ	0xFE9
  6265                           wreg	equ	0xFE8
  6266                           indf1	equ	0xFE7
  6267                           postdec1	equ	0xFE5
  6268                           fsr1h	equ	0xFE2
  6269                           fsr1l	equ	0xFE1
  6270                           bsr	equ	0xFE0
  6271                           indf2	equ	0xFDF
  6272                           postinc2	equ	0xFDE
  6273                           fsr2h	equ	0xFDA
  6274                           fsr2l	equ	0xFD9
  6275                           status	equ	0xFD8
  6276                           
  6277 ;; *************** function _handle_usb_reset *****************
  6278 ;; Defined at:
  6279 ;;		line 680 in file "transceiver.c"
  6280 ;; Parameters:    Size  Location     Type
  6281 ;;		None
  6282 ;; Auto vars:     Size  Location     Type
  6283 ;;		None
  6284 ;; Return value:  Size  Location     Type
  6285 ;;                  1    wreg      void 
  6286 ;; Registers used:
  6287 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6288 ;; Tracked objects:
  6289 ;;		On entry : 0/0
  6290 ;;		On exit  : 0/0
  6291 ;;		Unchanged: 0/0
  6292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6293 ;;      Params:         0       0       0       0
  6294 ;;      Locals:         0       0       0       0
  6295 ;;      Temps:          0       0       0       0
  6296 ;;      Totals:         0       0       0       0
  6297 ;;Total ram usage:        0 bytes
  6298 ;; Hardware stack levels used:    1
  6299 ;; Hardware stack levels required when called:    1
  6300 ;; This function calls:
  6301 ;;		_usb_prepare_setup
  6302 ;; This function is called by:
  6303 ;;		_isr
  6304 ;; This function uses a non-reentrant model
  6305 ;;
  6306                           
  6307                           	psect	text33
  6308  0010EA                     __ptext33:
  6309                           	opt stack 0
  6310  0010EA                     _handle_usb_reset:
  6311                           	opt stack 24
  6312                           
  6313                           ;transceiver.c: 685: UIR = 0;
  6314                           
  6315                           ; BSR set to: 15
  6316                           ;incstack = 0
  6317  0010EA  0E00               	movlw	0
  6318  0010EC  6E62               	movwf	3938,c	;volatile
  6319                           
  6320                           ;transceiver.c: 687: UADDR = 0;
  6321  0010EE  0E00               	movlw	0
  6322  0010F0  010F               	movlb	15	; () banked
  6323  0010F2  6F5C               	movwf	92,b	;volatile
  6324                           
  6325                           ;transceiver.c: 689: UEP0 = 0;
  6326  0010F4  0E00               	movlw	0
  6327  0010F6  6F53               	movwf	83,b	;volatile
  6328                           
  6329                           ; BSR set to: 15
  6330                           ;transceiver.c: 690: UEP0bits.EPOUTEN = 1;
  6331  0010F8  8553               	bsf	83,2,b	;volatile
  6332                           
  6333                           ; BSR set to: 15
  6334                           ;transceiver.c: 691: UEP0bits.EPINEN = 1;
  6335  0010FA  8353               	bsf	83,1,b	;volatile
  6336                           
  6337                           ; BSR set to: 15
  6338                           ;transceiver.c: 692: UEP0bits.EPHSHK = 1;
  6339  0010FC  8953               	bsf	83,4,b	;volatile
  6340                           
  6341                           ;transceiver.c: 694: while(UIRbits.TRNIF)
  6342  0010FE  D006               	goto	i2l240
  6343  001100                     i2l241:
  6344                           
  6345                           ;transceiver.c: 695: {
  6346                           ;transceiver.c: 696: UIRbits.TRNIF = 0;
  6347  001100  9662               	bcf	3938,3,c	;volatile
  6348  001102  F000               	nop		;# 
  6349  001104  F000               	nop		;# 
  6350  001106  F000               	nop		;# 
  6351  001108  F000               	nop		;# 
  6352  00110A  F000               	nop		;# 
  6353  00110C                     i2l240:
  6354  00110C  B662               	btfsc	3938,3,c	;volatile
  6355  00110E  D7F8               	goto	i2l241
  6356                           
  6357                           ;transceiver.c: 702: }
  6358                           ;transceiver.c: 704: UCONbits.PKTDIS = 0;
  6359  001110  9864               	bcf	3940,4,c	;volatile
  6360                           
  6361                           ;transceiver.c: 705: usb_prepare_setup();
  6362  001112  ECA1  F007         	call	_usb_prepare_setup	;wreg free
  6363                           
  6364                           ;transceiver.c: 707: usb_config = 0;
  6365  001116  0E00               	movlw	0
  6366  001118  6E43               	movwf	_usb_config,c
  6367                           
  6368                           ;transceiver.c: 708: usb_state = 3;
  6369  00111A  0E03               	movlw	3
  6370  00111C  6E41               	movwf	_usb_state,c
  6371  00111E  0012               	return		;funcret
  6372  001120                     __end_of_handle_usb_reset:
  6373                           	opt stack 0
  6374                           pclatu	equ	0xFFB
  6375                           pclath	equ	0xFFA
  6376                           tblptru	equ	0xFF8
  6377                           tblptrh	equ	0xFF7
  6378                           tblptrl	equ	0xFF6
  6379                           tablat	equ	0xFF5
  6380                           prodh	equ	0xFF4
  6381                           prodl	equ	0xFF3
  6382                           intcon	equ	0xFF2
  6383                           postinc0	equ	0xFEE
  6384                           fsr0h	equ	0xFEA
  6385                           fsr0l	equ	0xFE9
  6386                           wreg	equ	0xFE8
  6387                           indf1	equ	0xFE7
  6388                           postdec1	equ	0xFE5
  6389                           fsr1h	equ	0xFE2
  6390                           fsr1l	equ	0xFE1
  6391                           bsr	equ	0xFE0
  6392                           indf2	equ	0xFDF
  6393                           postinc2	equ	0xFDE
  6394                           fsr2h	equ	0xFDA
  6395                           fsr2l	equ	0xFD9
  6396                           status	equ	0xFD8
  6397                           
  6398 ;; *************** function _usb_prepare_setup *****************
  6399 ;; Defined at:
  6400 ;;		line 668 in file "transceiver.c"
  6401 ;; Parameters:    Size  Location     Type
  6402 ;;		None
  6403 ;; Auto vars:     Size  Location     Type
  6404 ;;		None
  6405 ;; Return value:  Size  Location     Type
  6406 ;;                  1    wreg      void 
  6407 ;; Registers used:
  6408 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6409 ;; Tracked objects:
  6410 ;;		On entry : 0/0
  6411 ;;		On exit  : 0/0
  6412 ;;		Unchanged: 0/0
  6413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6414 ;;      Params:         0       0       0       0
  6415 ;;      Locals:         0       0       0       0
  6416 ;;      Temps:          0       0       0       0
  6417 ;;      Totals:         0       0       0       0
  6418 ;;Total ram usage:        0 bytes
  6419 ;; Hardware stack levels used:    1
  6420 ;; This function calls:
  6421 ;;		Nothing
  6422 ;; This function is called by:
  6423 ;;		_handle_usb_reset
  6424 ;;		_handle_usb_stall
  6425 ;;		_handle_usb_ctrl_output
  6426 ;;		_handle_usb_ctrl_input
  6427 ;; This function uses a non-reentrant model
  6428 ;;
  6429                           
  6430                           	psect	text34
  6431  000F42                     __ptext34:
  6432                           	opt stack 0
  6433  000F42                     _usb_prepare_setup:
  6434                           	opt stack 23
  6435                           
  6436                           ;transceiver.c: 670: ctrl_trf_state = 0;
  6437                           
  6438                           ;incstack = 0
  6439  000F42  0E00               	movlw	0
  6440  000F44  6E40               	movwf	_ctrl_trf_state,c
  6441                           
  6442                           ;transceiver.c: 673: *(EP0_OUT + 1) = (8); *(EP0_OUT + 2) = ((uint16_t)(setup_out_packet
      +                          ) & 0xff); *(EP0_OUT + 3) = ((uint16_t)(setup_out_packet) >> 8); *(EP0_OUT) = (0x80 | 0x
      +                          00 | 0x08 | 0x04);
  6443  000F46  0100               	movlb	0	; () banked
  6444  000F48  EE20 F001          	lfsr	2,1
  6445  000F4C  51B3               	movf	_EP0_OUT& (0+255),w,b
  6446  000F4E  26D9               	addwf	fsr2l,f,c
  6447  000F50  51B4               	movf	(_EP0_OUT+1)& (0+255),w,b
  6448  000F52  22DA               	addwfc	fsr2h,f,c
  6449  000F54  0E08               	movlw	8
  6450  000F56  6EDF               	movwf	indf2,c
  6451                           
  6452                           ; BSR set to: 0
  6453  000F58  EE20 F002          	lfsr	2,2
  6454  000F5C  51B3               	movf	_EP0_OUT& (0+255),w,b
  6455  000F5E  26D9               	addwf	fsr2l,f,c
  6456  000F60  51B4               	movf	(_EP0_OUT+1)& (0+255),w,b
  6457  000F62  22DA               	addwfc	fsr2h,f,c
  6458  000F64  C048  FFDF         	movff	_setup_out_packet,indf2
  6459                           
  6460                           ; BSR set to: 0
  6461  000F68  EE20 F003          	lfsr	2,3
  6462  000F6C  51B3               	movf	_EP0_OUT& (0+255),w,b
  6463  000F6E  26D9               	addwf	fsr2l,f,c
  6464  000F70  51B4               	movf	(_EP0_OUT+1)& (0+255),w,b
  6465  000F72  22DA               	addwfc	fsr2h,f,c
  6466  000F74  5049               	movf	_setup_out_packet+1,w,c
  6467  000F76  6EDF               	movwf	indf2,c
  6468                           
  6469                           ; BSR set to: 0
  6470  000F78  C0B3  FFD9         	movff	_EP0_OUT,fsr2l
  6471  000F7C  C0B4  FFDA         	movff	_EP0_OUT+1,fsr2h
  6472  000F80  0E8C               	movlw	140
  6473  000F82  6EDF               	movwf	indf2,c
  6474                           
  6475                           ; BSR set to: 0
  6476                           ;transceiver.c: 676: *(EP0_IN) = (0x00);
  6477  000F84  C04C  FFD9         	movff	_EP0_IN,fsr2l
  6478  000F88  C04D  FFDA         	movff	_EP0_IN+1,fsr2h
  6479  000F8C  0E00               	movlw	0
  6480  000F8E  6EDF               	movwf	indf2,c
  6481                           
  6482                           ; BSR set to: 0
  6483  000F90  0012               	return		;funcret
  6484  000F92                     __end_of_usb_prepare_setup:
  6485                           	opt stack 0
  6486                           pclatu	equ	0xFFB
  6487                           pclath	equ	0xFFA
  6488                           tblptru	equ	0xFF8
  6489                           tblptrh	equ	0xFF7
  6490                           tblptrl	equ	0xFF6
  6491                           tablat	equ	0xFF5
  6492                           prodh	equ	0xFF4
  6493                           prodl	equ	0xFF3
  6494                           intcon	equ	0xFF2
  6495                           postinc0	equ	0xFEE
  6496                           fsr0h	equ	0xFEA
  6497                           fsr0l	equ	0xFE9
  6498                           wreg	equ	0xFE8
  6499                           indf1	equ	0xFE7
  6500                           postdec1	equ	0xFE5
  6501                           fsr1h	equ	0xFE2
  6502                           fsr1l	equ	0xFE1
  6503                           bsr	equ	0xFE0
  6504                           indf2	equ	0xFDF
  6505                           postinc2	equ	0xFDE
  6506                           fsr2h	equ	0xFDA
  6507                           fsr2l	equ	0xFD9
  6508                           status	equ	0xFD8
  6509                           
  6510 ;; *************** function _handle_uart_rx *****************
  6511 ;; Defined at:
  6512 ;;		line 171 in file "transceiver.c"
  6513 ;; Parameters:    Size  Location     Type
  6514 ;;		None
  6515 ;; Auto vars:     Size  Location     Type
  6516 ;;  c               1    0[COMRAM] unsigned char 
  6517 ;; Return value:  Size  Location     Type
  6518 ;;                  1    wreg      void 
  6519 ;; Registers used:
  6520 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6521 ;; Tracked objects:
  6522 ;;		On entry : 0/0
  6523 ;;		On exit  : 0/0
  6524 ;;		Unchanged: 0/0
  6525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  6526 ;;      Params:         0       0       0       0
  6527 ;;      Locals:         1       0       0       0
  6528 ;;      Temps:          0       0       0       0
  6529 ;;      Totals:         1       0       0       0
  6530 ;;Total ram usage:        1 bytes
  6531 ;; Hardware stack levels used:    1
  6532 ;; This function calls:
  6533 ;;		Nothing
  6534 ;; This function is called by:
  6535 ;;		_isr
  6536 ;; This function uses a non-reentrant model
  6537 ;;
  6538                           
  6539                           	psect	text35
  6540  00106E                     __ptext35:
  6541                           	opt stack 0
  6542  00106E                     _handle_uart_rx:
  6543                           	opt stack 25
  6544                           
  6545                           ;transceiver.c: 173: flags.interrupt_complete = 0;
  6546                           
  6547                           ; BSR set to: 0
  6548                           ;incstack = 0
  6549  00106E  9042               	bcf	_flags,0,c
  6550                           
  6551                           ;transceiver.c: 175: uint8_t c = RCREG;
  6552  001070  CFAE F001          	movff	4014,handle_uart_rx@c	;volatile
  6553                           
  6554                           ;transceiver.c: 176: if(serial_in_count < 32)
  6555  001074  503E               	movf	_serial_in_count+1,w,c
  6556  001076  E11B               	bnz	i2l102
  6557  001078  0E20               	movlw	32
  6558  00107A  5C3D               	subwf	_serial_in_count,w,c
  6559  00107C  B0D8               	btfsc	status,0,c
  6560  00107E  0012               	return	
  6561                           
  6562                           ;transceiver.c: 177: {
  6563                           ;transceiver.c: 178: serial_in_buffer[serial_in_ptr++] = c;
  6564  001080  0E60               	movlw	low _serial_in_buffer
  6565  001082  243B               	addwf	_serial_in_ptr,w,c
  6566  001084  6ED9               	movwf	fsr2l,c
  6567  001086  0E00               	movlw	high _serial_in_buffer
  6568  001088  203C               	addwfc	_serial_in_ptr+1,w,c
  6569  00108A  6EDA               	movwf	fsr2h,c
  6570  00108C  C001  FFDF         	movff	handle_uart_rx@c,indf2
  6571  001090  4A3B               	infsnz	_serial_in_ptr,f,c
  6572  001092  2A3C               	incf	_serial_in_ptr+1,f,c
  6573                           
  6574                           ;transceiver.c: 179: serial_in_count++;
  6575  001094  4A3D               	infsnz	_serial_in_count,f,c
  6576  001096  2A3E               	incf	_serial_in_count+1,f,c
  6577                           
  6578                           ;transceiver.c: 180: if(serial_in_ptr >= 32)
  6579  001098  503C               	movf	_serial_in_ptr+1,w,c
  6580  00109A  E104               	bnz	i2u185_40
  6581  00109C  0E20               	movlw	32
  6582  00109E  5C3B               	subwf	_serial_in_ptr,w,c
  6583  0010A0  A0D8               	btfss	status,0,c
  6584  0010A2  0012               	return	
  6585  0010A4                     i2u185_40:
  6586                           
  6587                           ;transceiver.c: 181: {
  6588                           ;transceiver.c: 182: serial_in_ptr = 0;
  6589  0010A4  0E00               	movlw	0
  6590  0010A6  6E3C               	movwf	_serial_in_ptr+1,c
  6591  0010A8  0E00               	movlw	0
  6592  0010AA  6E3B               	movwf	_serial_in_ptr,c
  6593  0010AC  0012               	return	
  6594  0010AE                     i2l102:
  6595  0010AE  0012               	return		;funcret
  6596  0010B0                     __end_of_handle_uart_rx:
  6597                           	opt stack 0
  6598                           pclatu	equ	0xFFB
  6599                           pclath	equ	0xFFA
  6600                           tblptru	equ	0xFF8
  6601                           tblptrh	equ	0xFF7
  6602                           tblptrl	equ	0xFF6
  6603                           tablat	equ	0xFF5
  6604                           prodh	equ	0xFF4
  6605                           prodl	equ	0xFF3
  6606                           intcon	equ	0xFF2
  6607                           postinc0	equ	0xFEE
  6608                           fsr0h	equ	0xFEA
  6609                           fsr0l	equ	0xFE9
  6610                           wreg	equ	0xFE8
  6611                           indf1	equ	0xFE7
  6612                           postdec1	equ	0xFE5
  6613                           fsr1h	equ	0xFE2
  6614                           fsr1l	equ	0xFE1
  6615                           bsr	equ	0xFE0
  6616                           indf2	equ	0xFDF
  6617                           postinc2	equ	0xFDE
  6618                           fsr2h	equ	0xFDA
  6619                           fsr2l	equ	0xFD9
  6620                           status	equ	0xFD8
  6621                           pclatu	equ	0xFFB
  6622                           pclath	equ	0xFFA
  6623                           tblptru	equ	0xFF8
  6624                           tblptrh	equ	0xFF7
  6625                           tblptrl	equ	0xFF6
  6626                           tablat	equ	0xFF5
  6627                           prodh	equ	0xFF4
  6628                           prodl	equ	0xFF3
  6629                           intcon	equ	0xFF2
  6630                           postinc0	equ	0xFEE
  6631                           fsr0h	equ	0xFEA
  6632                           fsr0l	equ	0xFE9
  6633                           wreg	equ	0xFE8
  6634                           indf1	equ	0xFE7
  6635                           postdec1	equ	0xFE5
  6636                           fsr1h	equ	0xFE2
  6637                           fsr1l	equ	0xFE1
  6638                           bsr	equ	0xFE0
  6639                           indf2	equ	0xFDF
  6640                           postinc2	equ	0xFDE
  6641                           fsr2h	equ	0xFDA
  6642                           fsr2l	equ	0xFD9
  6643                           status	equ	0xFD8
  6644                           
  6645                           	psect	rparam
  6646  0000                     pclatu	equ	0xFFB
  6647                           pclath	equ	0xFFA
  6648                           tblptru	equ	0xFF8
  6649                           tblptrh	equ	0xFF7
  6650                           tblptrl	equ	0xFF6
  6651                           tablat	equ	0xFF5
  6652                           prodh	equ	0xFF4
  6653                           prodl	equ	0xFF3
  6654                           intcon	equ	0xFF2
  6655                           postinc0	equ	0xFEE
  6656                           fsr0h	equ	0xFEA
  6657                           fsr0l	equ	0xFE9
  6658                           wreg	equ	0xFE8
  6659                           indf1	equ	0xFE7
  6660                           postdec1	equ	0xFE5
  6661                           fsr1h	equ	0xFE2
  6662                           fsr1l	equ	0xFE1
  6663                           bsr	equ	0xFE0
  6664                           indf2	equ	0xFDF
  6665                           postinc2	equ	0xFDE
  6666                           fsr2h	equ	0xFDA
  6667                           fsr2l	equ	0xFD9
  6668                           status	equ	0xFD8
  6669                           
  6670                           	psect	temp
  6671  00004E                     btemp:
  6672                           	opt stack 0
  6673  00004E                     	ds	1
  6674  0000                     int$flags	set	btemp
  6675  0000                     wtemp6	set	btemp+1
  6676                           pclatu	equ	0xFFB
  6677                           pclath	equ	0xFFA
  6678                           tblptru	equ	0xFF8
  6679                           tblptrh	equ	0xFF7
  6680                           tblptrl	equ	0xFF6
  6681                           tablat	equ	0xFF5
  6682                           prodh	equ	0xFF4
  6683                           prodl	equ	0xFF3
  6684                           intcon	equ	0xFF2
  6685                           postinc0	equ	0xFEE
  6686                           fsr0h	equ	0xFEA
  6687                           fsr0l	equ	0xFE9
  6688                           wreg	equ	0xFE8
  6689                           indf1	equ	0xFE7
  6690                           postdec1	equ	0xFE5
  6691                           fsr1h	equ	0xFE2
  6692                           fsr1l	equ	0xFE1
  6693                           bsr	equ	0xFE0
  6694                           indf2	equ	0xFDF
  6695                           postinc2	equ	0xFDE
  6696                           fsr2h	equ	0xFDA
  6697                           fsr2l	equ	0xFD9
  6698                           status	equ	0xFD8


Data Sizes:
    Strings     96
    Constant    172
    Data        20
    BSS         312
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     51      77
    BANK0           160     35      85
    BANK1           256      0     256
    BANK2           256      0       0

Pointer List with Targets:

    data_ptr	PTR const unsigned char  size(3) Largest target is 16383
		 -> qual_descriptor(CODE[10]), sd000(CODE[4]), sd001(CODE[22]), sd002(CODE[32]), 
		 -> usb_config1(CODE[70]), usb_descriptor(CODE[18]), usb_config(COMRAM[1]), ROM(CODE[16383]), 

    data_out_packet	PTR volatile unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    data_in_packet	PTR volatile unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    cdc_in_packet	PTR volatile unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    setup_in_packet	PTR volatile unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    setup_out_packet	PTR volatile unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    EP2_IN	PTR volatile unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    EP2_OUT	PTR volatile unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    EP1_IN	PTR volatile unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    EP0_IN	PTR volatile unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    EP0_OUT	PTR volatile unsigned char  size(2) Largest target is 767
		 -> RAM(DATA[767]), 

    print_text@s	PTR const unsigned char  size(2) Largest target is 28
		 -> STR_8(CODE[28]), STR_7(CODE[15]), STR_6(CODE[2]), STR_5(CODE[10]), 
		 -> STR_4(CODE[2]), STR_3(CODE[17]), STR_2(CODE[2]), STR_1(CODE[26]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr1 in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_handle_usb_transaction
    _handle_usb_transaction->_handle_usb_ctrl_output
    _handle_usb_ctrl_output->_handle_usb_ctrl_setup
    _handle_usb_ctrl_setup->_usb_check_std_request
    _usb_check_std_request->_print_number
    i2_flush_uart->i2_handle_uart
    i2_handle_uart->i2_delayMicroseconds
    _print_number->_print_number_nospace
    _print_number_nospace->___lwmod
    ___lwmod->___lwdiv
    _handle_usb_ctrl_out->_print_hex2
    i2_print_text->i2_print_byte
    _print_hex2->i2_print_byte
    _handle_usb_ctrl_input->_handle_usb_ctrl_in

Critical Paths under _main in BANK0

    _main->_handle_uart
    _transmit_mode->_write_radio
    _receive_mode->_write_radio
    _radio_on->_write_radio
    _print_text->_print_byte
    _flush_uart->_handle_uart
    _handle_uart->_delayMicroseconds

Critical Paths under _isr1 in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr1 in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr1 in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     4      5    6962
                                             26 BANK0      9     4      5
                  _delayMicroseconds
                         _flush_uart
                        _handle_uart
                          _init_uart
                           _init_usb
                         _print_byte
                         _print_text
                           _radio_on
                       _receive_mode
                      _transmit_mode
 ---------------------------------------------------------------------------------
 (1) _transmit_mode                                        0     0      0    1057
                        _write_radio
 ---------------------------------------------------------------------------------
 (1) _receive_mode                                         0     0      0    1057
                        _write_radio
 ---------------------------------------------------------------------------------
 (1) _radio_on                                             0     0      0    1057
                        _write_radio
 ---------------------------------------------------------------------------------
 (2) _write_radio                                          4     2      2    1057
                                             21 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _print_text                                           2     0      2     493
                                             22 BANK0      2     0      2
                         _print_byte
 ---------------------------------------------------------------------------------
 (2) _print_byte                                           1     1      0      22
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_usb                                             1     1      0      68
                                             21 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_uart                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _flush_uart                                           0     0      0    1060
                        _handle_uart
 ---------------------------------------------------------------------------------
 (1) _handle_uart                                          1     1      0    1060
                                             25 BANK0      1     1      0
                  _delayMicroseconds
 ---------------------------------------------------------------------------------
 (2) _delayMicroseconds                                    4     2      2     883
                                             21 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr1                                                21    21      0       0
                                              0 BANK0     21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 18    18      0    4160
                                             33 COMRAM    18    18      0
                     _handle_uart_rx
                   _handle_usb_reset
                   _handle_usb_stall
             _handle_usb_transaction
 ---------------------------------------------------------------------------------
 (6) _handle_usb_transaction                               2     2      0    4137
                                             31 COMRAM     2     2      0
              _handle_usb_ctrl_input
             _handle_usb_ctrl_output
 ---------------------------------------------------------------------------------
 (7) _handle_usb_ctrl_output                               1     1      0    3957
                                             30 COMRAM     1     1      0
                _handle_usb_ctrl_out
              _handle_usb_ctrl_setup
                  _usb_prepare_setup
                       i2_print_text
 ---------------------------------------------------------------------------------
 (8) _handle_usb_ctrl_setup                               11    11      0    3346
                                             19 COMRAM    11    11      0
                 _handle_usb_ctrl_in
              _usb_check_std_request
 ---------------------------------------------------------------------------------
 (9) _usb_check_std_request                                3     3      0    3029
                                             16 COMRAM     3     3      0
                       _print_number
                 _user_endpoint_init
                       i2_flush_uart
                       i2_print_text
 ---------------------------------------------------------------------------------
 (10) i2_flush_uart                                        0     0      0     484
                      i2_handle_uart
 ---------------------------------------------------------------------------------
 (11) i2_handle_uart                                       1     1      0     484
                                              4 COMRAM     1     1      0
                i2_delayMicroseconds
 ---------------------------------------------------------------------------------
 (12) i2_delayMicroseconds                                 4     2      2     307
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _user_endpoint_init                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _print_number                                        2     0      2    2029
                                             14 COMRAM     2     0      2
               _print_number_nospace
                       i2_print_byte
 ---------------------------------------------------------------------------------
 (11) _print_number_nospace                                2     0      2    1833
                                             12 COMRAM     2     0      2
                            ___lwdiv
                            ___lwmod
                       i2_print_byte
 ---------------------------------------------------------------------------------
 (12) ___lwmod                                             5     1      4     767
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (12) ___lwdiv                                             7     3      4     770
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (8) _handle_usb_ctrl_out                                  1     1      0     338
                                              4 COMRAM     1     1      0
                         _print_hex2
                       i2_print_text
 ---------------------------------------------------------------------------------
 (8) i2_print_text                                         2     0      2     249
                                              1 COMRAM     2     0      2
                       i2_print_byte
 ---------------------------------------------------------------------------------
 (9) _print_hex2                                           3     3      0      66
                                              1 COMRAM     3     3      0
                       i2_print_byte
 ---------------------------------------------------------------------------------
 (9) i2_print_byte                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _handle_usb_ctrl_input                                0     0      0     180
                 _handle_usb_ctrl_in
                  _usb_prepare_setup
 ---------------------------------------------------------------------------------
 (9) _handle_usb_ctrl_in                                   6     6      0     180
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (6) _handle_usb_stall                                     0     0      0       0
                  _usb_prepare_setup
 ---------------------------------------------------------------------------------
 (6) _handle_usb_reset                                     0     0      0       0
                  _usb_prepare_setup
 ---------------------------------------------------------------------------------
 (8) _usb_prepare_setup                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _handle_uart_rx                                       1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delayMicroseconds
   _flush_uart
     _handle_uart
       _delayMicroseconds
   _handle_uart
     _delayMicroseconds
   _init_uart
   _init_usb
   _print_byte
   _print_text
     _print_byte
   _radio_on
     _write_radio
   _receive_mode
     _write_radio
   _transmit_mode
     _write_radio

 _isr1 (ROOT)

 _isr (ROOT)
   _handle_uart_rx
   _handle_usb_reset
     _usb_prepare_setup
   _handle_usb_stall
     _usb_prepare_setup
   _handle_usb_transaction
     _handle_usb_ctrl_input
       _handle_usb_ctrl_in
       _usb_prepare_setup
     _handle_usb_ctrl_output
       _handle_usb_ctrl_out
         _print_hex2
           i2_print_byte
         i2_print_text
           i2_print_byte
       _handle_usb_ctrl_setup
         _handle_usb_ctrl_in
         _usb_check_std_request
           _print_number
             _print_number_nospace
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               i2_print_byte
             i2_print_byte
           _user_endpoint_init
           i2_flush_uart
             i2_handle_uart
               i2_delayMicroseconds
           i2_print_text
             i2_print_byte
       _usb_prepare_setup
       i2_print_text
         i2_print_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0     100       5      100.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     23      55       4       53.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     33      4D       1       81.9%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1A2       8        0.0%
DATA                 0      0     1A2      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Jun 27 03:17:50 2021

                    _usb_config1 3F03                               bsr 000FE0  
                   __CFG_CP0$OFF 000000                     __CFG_CP1$OFF 000000  
                            l111 06DC                              l105 125E  
                            l113 0708                              l106 1256  
                            l117 12DA                              l118 12D6  
                            l230 100E                              l128 11D2  
                            l129 11BA                              l331 10C0  
                            l228 0FEE                              l340 1232  
                            l342 1240                              l350 0120  
                            l352 015C                              l353 0140  
                            l370 0230                              l371 0268  
                            l364 01C6                              l373 02C4  
                            l365 0202                              l368 022A  
                            l369 026A                     __CFG_CPB$OFF 000000  
                   __CFG_CPD$OFF 000000                              _UIE 000F60  
                            _UIR 000F62                   _usb_descriptor 3F7F  
                            _isr 0008                     __CFG_BORV$19 000000  
                            wreg 000FE8                     __CFG_FOSC$XT 000000  
                   __CFG_LVP$OFF 000000                             l2516 0FE6  
                           l2466 10B8                             ?_isr 0001  
                           STR_1 3FBB                             STR_2 3FF3  
                           STR_3 3FD5                             STR_4 3FF3  
                           STR_5 3FF5                             STR_6 3FF3  
                           STR_7 3FE6                             STR_8 3F9F  
                           u2150 0260                             u2080 0170  
                           u2090 0174                             u1705 07DC  
                           u1810 10CA                             u1707 07DE  
                           u1635 0726                             u1645 0740  
                           u1637 0728                             u1830 10E6  
                           u1655 075A                             u1647 0742  
                           u1665 0774                             u1657 075C  
                           u1675 078E                             u1667 0776  
                           u1828 10CE                             u1685 07A8  
                           u1677 0790                             u1695 07C2  
                           u1687 07AA                             u1697 07C4  
                           u1890 1006                i2handle_uart@bits 0005  
                           _UCFG 000F61                             _UEP0 000F53  
                           _UEP1 000F54                             _UEP2 000F55  
                           _UCON 000F64                             _TMR0 000FD6  
                           _isr1 0018                             _main 00CA  
                           _tick 0086                             fsr0h 000FEA  
                           fsr1h 000FE2                             fsr2h 000FDA  
                           fsr0l 000FE9                             indf1 000FE7  
                           indf2 000FDF                             fsr1l 000FE1  
                           fsr2l 000FD9                             btemp 004E  
     __end_of_user_endpoint_init 0BA6             __end_ofi2_print_byte 11B8  
                           prodh 000FF4                             prodl 000FF3  
                           start 00C6             __end_ofi2_print_text 1216  
                  __CFG_IESO$OFF 000000                    __CFG_MCLRE$ON 000000  
                   ___param_bank 000000                            ??_isr 0022  
                  __CFG_PLLEN$ON 000000           __end_of_usb_descriptor 3F91  
                          ?_isr1 0001                            ?_main 00A2  
                   main@fragment 00AA                            _ANSEL 000F7E  
                          _T0CON 000FD5                  __end_of___lwdiv 0F42  
                          i2l102 10AE                            i2l111 0808  
                __end_of___lwmod 106E                            i2l105 1284  
                          i2l113 0834                            i2l106 127E  
                          i2l300 0432                            i2l117 12EC  
                          i2l134 0930                            i2l118 12E8  
                          i2l310 0E7C                            i2l135 096C  
                          i2l240 110C                            i2l128 1200  
                          i2l136 09A8                            i2l241 1100  
                          i2l129 11EA                            i2l137 09E4  
                          i2l307 0E4A                            i2l316 0EB4  
                  __CFG_WDTEN$ON 000000                            i2l317 0EB8  
                          i2l261 0604                            i2l253 0528  
                          i2l309 0E8A                            i2l325 1160  
                          i2l246 1306                            i2l318 0EEA  
                          i2l270 0682                            i2l262 05C6  
                          i2l319 0EDC                            i2l271 0678  
                          i2l327 1182                            i2l280 0D40  
                          i2l256 0650                            i2l264 05E8  
                          i2l257 0566                            i2l274 06AA  
                          i2l267 0628                            i2l259 058A  
                          i2l292 0396                            i2l285 032E  
                          i2l278 0D2A                            i2l279 0D8A  
                          i2l800 0F0E                            i2l296 03EA  
                          i2l392 0A6A                            i2l801 0F06  
                          i2l393 0A7E                            i2l810 1042  
                          i2l394 0A84                            i2l811 103A  
                          i2l299 04A6                            i2l804 0F2E  
                          i2l388 0A4E                            i2l805 0F38  
                          i2l814 105A                            i2l815 1064  
__size_of_handle_usb_transaction 0032                            _UADDR 000F5C  
                          _RCREG 000FAE                   __CFG_BBSIZ$OFF 000000  
                          _RCSTA 000FAB                            _SPBRG 000FAF  
                          _USTAT 000F63                            _TXREG 000FAD  
                          _TXSTA 000FAC                    _transmit_mode 1216  
                  __CFG_WRT0$OFF 000000                    __CFG_WRT1$OFF 000000  
                 __CFG_EBTR0$OFF 000000                   __CFG_FCMEN$OFF 000000  
                    _write_radio 10B0                   __CFG_EBTR1$OFF 000000  
   __size_ofi2_delayMicroseconds 0026                            _sd000 3F9B  
                          _sd001 3F69                            _sd002 3F49  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                   _data_in_packet 00AD  
                 __CFG_EBTRB$OFF 000000                            _flags 0042  
                          main@i 00A8                            pclath 000FFA  
         ?_handle_usb_ctrl_input 0001                            tablat 000FF5  
      __size_of_handle_usb_reset 0036           ?_handle_usb_ctrl_setup 0001  
      __size_of_handle_usb_stall 0012                            status 000FD8  
                          wtemp6 004F                   __CFG_HFOFST$ON 000000  
     handle_usb_ctrl_in@fragment 0005                  __initialization 0DB6  
                  i2print_byte@c 0001                     __end_of_isr1 00C6  
                   __end_of_main 0302    __size_of_print_number_nospace 00FA  
                  i2print_text@s 0002                   __CFG_PCLKEN$ON 000000  
                         ??_isr1 0088                           ??_main 00A7  
                  __activetblptr 000003                   ?_transmit_mode 0001  
          __size_ofi2_flush_uart 0012             __size_of_handle_uart 012C  
                         _EP0_IN 004C                           _EP1_IN 004A  
                         _ANSELH 000F7F                           _EP2_IN 00AF  
             delayMicroseconds@i 009F               delayMicroseconds@x 009D  
                         _SPBRGH 000FB0           _handle_usb_transaction 1154  
                 __CFG_XINST$OFF 000000           __size_ofi2_handle_uart 010A  
                   i2_flush_uart 12E6                        ??___lwdiv 0005  
                      ??___lwmod 000C                 __end_of_init_usb 102C  
                         clear_0 0DFE                           clear_1 0E10  
                         clear_2 0E1C                 __end_of_radio_on 0D0E  
                   __pdataCOMRAM 0044                     __mediumconst 3EF2  
        ?_handle_usb_ctrl_output 0001                           tblptrh 000FF7  
                         tblptrl 000FF6                           tblptru 000FF8  
                write_radio@data 009D            __size_ofi2_print_byte 0032  
          __size_ofi2_print_text 002E               _handle_usb_ctrl_in 0D0E  
                     __accesstop 0060          __end_of__initialization 0E22  
                  ?_receive_mode 0001                    ___rparam_used 000001  
              _usb_prepare_setup 0F42     __size_of_handle_usb_ctrl_out 00C0  
            ?_handle_usb_ctrl_in 0001                   __pcstackCOMRAM 0001  
             ?_usb_prepare_setup 0001                    __end_of_sd000 3F9F  
                  __end_of_sd001 3F7F                    __end_of_sd002 3F69  
                   __pidataBANK0 1314              handle_usb_ctrl_in@i 0004  
                ??_transmit_mode 00A1              ??_usb_prepare_setup 0001  
 __end_of_handle_usb_ctrl_output 0E90                     i2_print_byte 1186  
                   i2_print_text 11E8             ??_handle_usb_ctrl_in 0001  
          _usb_check_std_request 0506                    i2_handle_uart 07FE  
                     __pbssBANK0 0060                       __pbssBANK1 0100  
               _handle_usb_reset 10EA                 _handle_usb_stall 12F8  
                 ??_receive_mode 00A1                  _data_out_packet 00AB  
                     _data_count 0037        __end_of_usb_prepare_setup 0F92  
                  _cdc_in_packet 0044               __size_of_init_uart 001A  
            i2_delayMicroseconds 126C                          _BAUDCTL 000FB8  
             _user_endpoint_init 0AD4                          _EP0_OUT 00B3  
                        _EP2_OUT 00B1                   ?i2_handle_uart 0001  
                   ?_write_radio 009D              ?_user_endpoint_init 0001  
           ?i2_delayMicroseconds 0001          ??_handle_usb_ctrl_input 0007  
                handle_uart@bits 00A1          ??_handle_usb_ctrl_setup 0014  
                __CFG_USBDIV$OFF 000000                          _UIEbits 000F60  
        __size_of_handle_uart_rx 0042                          _UIRbits 000F62  
                handle_uart_rx@c 0001                        ?_init_usb 0001  
                      ?_radio_on 0001                  __CFG_PWRTEN$OFF 000000  
                        __Hparam 0000             ??_user_endpoint_init 0001  
                        __Lparam 0000                       _flush_uart 12D4  
                        ___lwdiv 0EF0                          ___lwmod 102C  
              __end_of_hex_table 3F03                  __CFG_STVREN$OFF 000000  
                        __pcinit 0DB6                          __ramtop 0300  
                        __ptext0 00CA                          __ptext1 1216  
                        __ptext2 12AC                          __ptext3 0C66  
                        __ptext4 10B0                          __ptext5 11B8  
                        __ptext6 1120                          __ptext7 0FE0  
                        __ptext8 1292                          __ptext9 12D4  
                   __size_of_isr 0ACC           ?_usb_check_std_request 0001  
              __end_of_init_uart 12AC            ??i2_delayMicroseconds 0003  
      handle_usb_ctrl_setup@type 001E                   _ctrl_trf_state 0040  
   __end_of_print_number_nospace 0A02                   __pintcode_body 0A02  
           end_of_initialization 0E22          ?_handle_usb_transaction 0001  
      usb_check_std_request@type 0013                          int_func 0A02  
                     ??_init_usb 009D       __size_of_usb_prepare_setup 0050  
                     ??_radio_on 00A1          handle_usb_ctrl_out@temp 0005  
                      _RCSTAbits 000FAB                          postdec1 000FE5  
                        postinc0 000FEE                          postinc2 000FDE  
     usb_check_std_request@index 0011                   _serial_in_ptr2 0084  
                _qual_descriptor 3F91             __end_of_receive_mode 12C0  
                     _print_hex2 0F92                  ??i2_handle_uart 0005  
               _setup_out_packet 0048                       _print_byte 1120  
                     _print_text 11B8                    ??_handle_uart 00A1  
                 _serial_out_ptr 0039              _handle_usb_ctrl_out 0BA6  
                      _TRISBbits 000F93                        _TRISCbits 000F94  
                  ?_print_number 000F                       _usb_config 0043  
 __end_of_handle_usb_transaction 1186     usb_check_std_request@request 0012  
         _ctrl_trf_session_owner 003F                        _TXSTAbits 000FAC  
     handle_usb_ctrl_output@temp 001F             ?_handle_usb_ctrl_out 0001  
                   write_radio@i 00A0                      print_byte@c 009D  
                    print_text@s 009E                      ?_flush_uart 0001  
       __end_of_handle_usb_reset 1120                    __pidataCOMRAM 130A  
       __end_of_handle_usb_stall 130A              start_initialization 0DB6  
                 ??_print_number 0011                      __end_of_isr 0AD4  
           __size_of_write_radio 003A                   _handle_uart_rx 106E  
            __end_of_handle_uart 07FE             i2delayMicroseconds@i 0003  
           i2delayMicroseconds@x 0001            ??_handle_usb_ctrl_out 0005  
        __end_of_qual_descriptor 3F9B             _print_number_nospace 0908  
                    __pdataBANK0 00AB                      ?_print_hex2 0001  
          __end_of_transmit_mode 1242                      ?_print_byte 0001  
                    ?_print_text 009E                      __pbssCOMRAM 0034  
    __size_of_handle_usb_ctrl_in 00A8                    __pcstackBANK0 0088  
         __end_of_handle_uart_rx 10B0                _delayMicroseconds 1242  
 __size_of_handle_usb_ctrl_input 0060               ?_delayMicroseconds 009D  
  __end_of_handle_usb_ctrl_input 0EF0   __size_of_handle_usb_ctrl_setup 0204  
            __size_of_flush_uart 0012    __end_of_handle_usb_ctrl_setup 0506  
            ??_delayMicroseconds 009F                __size_of_init_usb 004C  
              __size_of_radio_on 00A8                 ___lwdiv@dividend 0001  
          ?_print_number_nospace 000D                        __pintcode 0008  
                  __pmediumconst 3EF2            __size_of_receive_mode 0014  
                       ?___lwdiv 0001                         ?___lwmod 0008  
                    __pintcodelo 0018          ??_usb_check_std_request 0011  
                _setup_in_packet 0046                        _hex_table 3EF3  
      __end_of_delayMicroseconds 126C                      _handle_uart 06D2  
                ?_handle_uart_rx 0001                 ___lwdiv@quotient 0005  
                      _init_uart 1292                         _LATBbits 000F8A  
                   _receive_mode 12AC                         _LATCbits 000F8B  
                       _PIE1bits 000F9D                         _PIE2bits 000FA0  
            __size_of_print_hex2 004E              __size_of_print_byte 0034  
     print_number_nospace@number 000D                         i2u114_40 0F12  
                       i2u130_45 0866                         i2u130_47 0868  
                       i2u131_45 087C                         i2u131_47 087E  
                       i2u124_40 0978                         i2u132_45 0892  
                       i2u132_47 0894                         i2u117_40 1046  
                       i2u125_40 09B4                         i2u133_45 08A8  
                       i2u133_47 08AA                         i2u150_40 0D22  
                       i2u134_45 08BE              __size_of_print_text 0030  
                       i2u134_47 08C0                         i2u151_40 0D86  
                       i2u135_45 08D4                         i2u151_47 0D7C  
                       i2u135_47 08D6                         i2u136_45 08EA  
                       i2u136_47 08EC                         i2u129_45 0850  
                       i2u129_47 0852                         i2u185_40 10A4  
                       _PIR1bits 000F9E                         i2u194_40 116A  
                       i2u195_40 116C                         _PIR2bits 000FA1  
    __size_of_user_endpoint_init 00D2             __end_of_print_number 12D4  
               __CFG_WDTPS$32768 000000                         _UEP0bits 000F53  
                       _UEP1bits 000F54                         _UEP2bits 000F55  
                  ?i2_flush_uart 0001                    _serial_in_ptr 003B  
                       _UCONbits 000F64         ??_handle_usb_ctrl_output 001F  
    __end_ofi2_delayMicroseconds 1292                        main@i_919 00A9  
                      _usb_state 0041                       ?_init_uart 0001  
                      copy_data0 0DCA                        copy_data1 0DEA  
   handle_usb_ctrl_setup@command 001B                         __Hrparam 0000  
         ??_print_number_nospace 000F                         __Lrparam 0000  
             __CFG_BOREN$SBORDIS 000000                   ??i2_flush_uart 0006  
                   ??_flush_uart 00A2                        init_usb@i 009D  
               __size_of___lwdiv 0052                 __size_of___lwmod 0042  
              ?_handle_usb_reset 0001                ?_handle_usb_stall 0001  
                  ?i2_print_byte 0001               ??_handle_usb_reset 0001  
     __size_of_delayMicroseconds 002A                    ?i2_print_text 0002  
             ??_handle_usb_stall 0001                         _data_ptr 0034  
          __end_ofi2_handle_uart 0908                  ___lwdiv@divisor 0003  
                ___lwdiv@counter 0007                         __ptext10 06D2  
                       __ptext11 1242                         __ptext20 126C  
                       __ptext21 0AD4                         __ptext30 0E90  
                       __ptext22 12C0                         __ptext14 1154  
                       __ptext31 0D0E                         __ptext23 0908  
                       __ptext15 0E2C                         __ptext32 12F8  
                       __ptext24 102C                         __ptext16 0302  
                       __ptext33 10EA                         __ptext25 0EF0  
                       __ptext17 0506                         __ptext34 0F42  
                       __ptext26 0BA6                         __ptext18 12E6  
                       __ptext35 106E                         __ptext27 11E8  
                       __ptext19 07FE                         __ptext28 0F92  
                       __ptext29 1186               __end_of_flush_uart 12E6  
                  __size_of_isr1 00AE                    __size_of_main 0238  
                       _init_usb 0FE0                         _radio_on 0C66  
                       int$flags 004E  __size_of_handle_usb_ctrl_output 0064  
                       main@argc 00A2                         main@argv 00A4  
            __end_of_usb_config1 3F49                   ??i2_print_byte 0001  
                   ??_print_hex2 0002                   ??i2_print_text 0004  
                   ??_print_byte 009D                     ??_print_text 00A0  
                     _INTCONbits 000FF2                    ??_write_radio 009F  
    handle_usb_ctrl_setup@length 0019  handle_usb_ctrl_setup@length_840 001C  
                    ??_init_uart 009D                 print_hex2@number 0004  
    __end_of_handle_usb_ctrl_out 0C66                         intlevel1 0000  
                       intlevel2 0000               print_number@number 000F  
               ___lwmod@dividend 0008                 _serial_in_buffer 0060  
          __size_of_print_number 0014               __end_of_print_hex2 0FE0  
             __end_of_print_byte 1154               __end_of_print_text 11E8  
           __CFG_CPUDIV$NOCLKDIV 000000                 ??_handle_uart_rx 0001  
              _serial_out_buffer 0100         ??_handle_usb_transaction 0020  
     __end_of_handle_usb_ctrl_in 0DB6   __size_of_usb_check_std_request 01CC  
  __end_of_usb_check_std_request 06D2                  _serial_in_count 003D  
                ___lwmod@divisor 000A                     ?_handle_uart 0001  
                ___lwmod@counter 000C                     _print_number 12C0  
           __end_ofi2_flush_uart 12F8           _handle_usb_ctrl_output 0E2C  
               _serial_out_count 0082              __end_of_write_radio 10EA  
          _handle_usb_ctrl_input 0E90            _handle_usb_ctrl_setup 0302  
                _serial_out_ptr2 0080           __size_of_transmit_mode 002C  
