What you'll find here:

countreps: rep counter using openpose
tracker: Mane camera tracker for a laptop.
    Using openpose & CAFFE/FP32

Tracker: the android interface for the tracker

tracker.h
trackerlib.h
trackerserver.c
tracker_trt.c: The mane camera tracker on the jetson nano.
    Using openpose & TENSORRT/FP16.
    This requires the body25_*.engine files from
    https://drive.google.com/file/d/1sFKhUgDjm0c-Dv7PBAPgatd569N6yF6p/view?usp=sharing
    https://drive.google.com/file/d/1WnMKvONACR5N7q81nwyrE0Nje4v_iiZj/view?usp=sharing

    Build the FP16 camera tracker with make -f Makefile.trt
    Run it with ./tracker_trt

    Uses either local servos.X or truck's arm_cam.c to drive the servos.
    Uses mechanical bits from truckcam & truck.


comcast.X comcast2.pcb irlib.c: Comcast XR16 remote hack.  
    It was envisioned as controlling the tracker but is not currently used.


servos.pcb: USB to PWM circuit board using a PIC

servos.X: USB to PWM firmware for the 2 axis tracker
    Building servos.X requires mplab.
    servos.X runs on a PIC

servos.FCStd: enclosure for servo board


enclosure4.FCStd: obsolete enclosure for a jetson nano terminal
    .8mm nozzle .32 layer height for
        outer case + bottom
            - intersect with outer masks in blender to get print sections
            - use support for battery latch
        inner case
            - intersect with inner mask in blender
            - use support for card slots
        back panel
            - intersect with back mask in blender
        stand
            - intersect with back mask in blender
        cam
        ir
    .4mm nozzle .32 layer height for 
        clips
        outer joiners
        inner joiners
        lid joiners
        - wall direction of the corner joiners must be printed flat on the bed
        - flat joiners must be printed flat on the bed
        - use binder clips
    M3 self tappers for case
    M2 self tappers for speakers
    Speakers are arduino speakers
    16 gauge metal rod for hinges
    6mm x 3mm magnets

enclosure5.FCStd: latest enclosure for a headless jetson nano


knob.FCStd: bits for mounting a camera on a pan/tilt head

shroud.FCStd: shroud for the gears on a servocity pan/tilt head
tripod.FCStd: adapt pan/tilt head to 3/8" tripod bolt



--------------------------------------------------------------------------------
Jetson notes:

Install the NFS server.
apt install nfs-kernel-server
Fix /etc/exports

Disable the auto X server by renaming files to .bak.

zram is enabled in
/etc/systemd/nvzramconfig.sh

Create an /etc/rc.local file for initialization.
It must be mode 777 & begin with:
#!/bin/sh -e
xinit /usr/bin/fvwm2&



Install fvwm:
apt install fvwm

Copy /usr/share/fvwm/system.fvwm2rc from a previous fvwm installation.
Add lines to disable the window border.

Style "Countreps" NoTitle, HandleWidth 0
Style "Tracker" NoTitle, HandleWidth 0


Building openpose on the jetson follows the directions for Ubunt:

git clone https://github.com/CMU-Perceptual-Computing-Lab/openpose

Install dependencies:
apt install libprotobuf-dev protobuf-compiler libgoogle-glog-dev
apt install libboost-all-dev libhdf5-dev libatlas-base-dev
apt install libfreetype6-dev

The jetson image has all the CUDA dependencies preinstalled.

cd openpose
mkdir build
cd build
cmake ..

make -j4

An error about cublas_device requires deleting every reference to cublas_device in
/usr/share/cmake-3.10

The models must be downloaded after building.
cd models
./getModels.sh

The demos can be run with
./build/examples/openpose/openpose.bin --net_resolution -1x128 --camera 0 --camera_resolution 1280x720
but don't work.


--------------------------------------------------------------------------------
Convert openpose body25 to onnx format:
Change the input dimensions in the prototxt file to the desired dimensions.

python3 -m caffe2onnx.convert --prototxt openpose/models/pose/body_25/pose_deploy.prototxt  --caffemodel openpose/models/pose/body_25/pose_iter_584000.caffemodel --onnx body25.onnx

Fix broadcast operators in onnx version:
time python3 fixonnx.py

Convert to a tensorrt engine:
/usr/src/tensorrt/bin/trtexec --onnx=body25_fixed.onnx --fp16 --saveEngine=body25.engine




--------------------------------------------------------------------------------


Countreps requires guicast in the parent directory from 
https://github.com/heroineworshiper/guicast.git

Compiling countreps is a matter of

make countreps

# build the atmega servo controller
# must be programmed with instructions in servos.c
make servos


countreps.c: The rep counter.
countreps.sh: Runs the rep counter.


Compiling tracker is a matter of

make tracker


tracker.c
trackerx11.c
    The back end for the tracking.
    USE_SERVER in tracker.h switches the tracker from a standalone GUI to a phone GUI

tracker.sh: Runs the FP32 tracker





ffmpeg-kit: ffmpeg for android must be built for the tracker
    Install the android ndk from https://developer.android.com/ndk/downloads
    Set some environment variables
    export ANDROID_SDK_ROOT=~/Android/Sdk
    export ANDROID_NDK_ROOT=~/android-ndk-r23b/
    time ./android.sh
    Hack the Cmake version to get it to compile with whatever version you have.
    Run ~/Android/Sdk/tools/bin/sdkmanager --licenses to update all the licenses
    android/gradle.properties needs a full JDK to find tools.jar
        org.gradle.java.home=/usr/local/jdk1.8.0_144
    Replace everything between VALIDATE GPL FLAGS & DO NOT BUILD ANDROID ARCHIVE
        with 'cd android' to skip rebuilding every time.


Linux notes:



compiling OpenBLAS for Ryzen:

make TARGET=ZEN
make TARGET=ZEN PREFIX=/root/countreps install

FLOAT in OpenBLAS/common.h conflicts with another definition & has to be
renamed FLOAT_ when compiling openpose.



OpenCV requires ffmpeg to read movie files but can only use ffmpeg in
/usr/local.
OpenCV must be built with GTK support & JPEG support.



To build opencv:
mkdir build
cd build
cmake -DCMAKE_INSTALL_PREFIX=/root/countreps/ ..

make
# this doesn't work
make install
# running this a 2nd time is what installs libopencv.so
make




to build openpose:

Using only the CPU is too slow, but works:

mkdir build
cd build
cmake \
-DGPU_MODE=CPU_ONLY \
-DUSE_MKL=n \
-DOpenCV_INCLUDE_DIRS=/root/countreps/include \
-DOpenCV_LIBS_DIR=/root/countreps/lib \
-DCaffe_INCLUDE_DIRS=/root/countreps/include \
-DCaffe_LIBS=/root/countreps/lib/libcaffe.so \
-DBUILD_CAFFE=OFF \
-DPROTOBUF_LIBRARY=/root/countreps/lib \
-DProtobuf_INCLUDE_DIRS=/root/countreps/include \
-DGLOG_INCLUDE_DIR=/root/countreps/include \
-DGLOG_LIBRARY=/root/countreps/lib \
-DGFLAGS_INCLUDE_DIR=/root/countreps/include \
-DGFLAGS_LIBRARY=/root/countreps/lib \
-DCMAKE_INSTALL_PREFIX=/root/countreps/ \
..


LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/root/countreps/lib make VERBOSE=1
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/root/countreps/lib make install



Running with a GPU requires CUDA & CUDNN.
CUDA also requires manually loading the nvidia-uvm module.

    insmod ./modules/4.9.39/kernel/drivers/video/nvidia-uvm.ko

Caffe must be rebuilt with CUDA, then openpose.



To build Caffe:

edit caffe/Makefile.config
    uncomment USE_CUDNN
    comment out CPU_ONLY
    comment out the required lines on the CUDA_ARCH line
    edit BLAS_INCLUDE, BLAS_LIB, LIBRARY_DIRS to include /root/countreps
    comment out the Q ?= @ line

All the objects need -fPIC, but nvcc complains about it.  

Placing -fPIC in NVCCFLAGS after -Xcompiler, CXXFLAGS, LINKFLAGS but not
COMMON_FLAGS fixes it.

PATH=$PATH:/root/countreps/bin make
PATH=$PATH:/root/countreps/bin make distribute

Comment out the tools/caffe.cpp: time() function if there's an undefined
reference to caffe::caffe_gpu_dot

The output goes in the distribute directory.

cp -a bin/* /root/countreps/bin/
cp -a include/* /root/countreps/include/
cp -a lib/* /root/countreps/lib/
cp -a proto/* /root/countreps/proto/
cp -a python/* /root/countreps/python/






To build openpose with CUDA:


mkdir build
cd build
cmake \
-DGPU_MODE=CUDA \
-DUSE_MKL=n \
-DOpenCV_INCLUDE_DIRS=/root/countreps/include \
-DOpenCV_LIBS_DIR=/root/countreps/lib \
-DCaffe_INCLUDE_DIRS=/root/countreps/include \
-DCaffe_LIBS=/root/countreps/lib/libcaffe.so \
-DBUILD_CAFFE=OFF \
-DPROTOBUF_LIBRARY=/root/countreps/lib \
-DProtobuf_INCLUDE_DIRS=/root/countreps/include \
-DGLOG_INCLUDE_DIR=/root/countreps/include \
-DGLOG_LIBRARY=/root/countreps/lib \
-DGFLAGS_INCLUDE_DIR=/root/countreps/include \
-DGFLAGS_LIBRARY=/root/countreps/lib \
-DCMAKE_INSTALL_PREFIX=/root/countreps/ \
..

LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/root/countreps/lib make VERBOSE=1
LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/root/countreps/lib make install

All the dependancies have to be installed in the project directory.

to compile countreps:

LD_LIBRARY_PATH=$LD_LIBRARY_PATH:`pwd`/lib make

to run countreps:

LD_LIBRARY_PATH=$LD_LIBRARY_PATH:`pwd`/lib countreps


A circular dependency on gflags creates a lot of problems for everyone.
The gflags commands were taken out of countreps.c

Input frames are in test_input.  Output frames are put in test_output.

Using the CPU, it does 640x480 at 2.15 seconds per frame.

Using CUDA on the GeForce GTX 1050, it's 14 frames per second.
On the GTX 970M, it's 13 fps.
CUDA in 2GB of RAM requires reducing netInputSize to -1x256.







